/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		if (null) script.crossOrigin = null;
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "f9c3307ed245ed2c078c";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_selfInvalidated: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 			invalidate: function() {
/******/ 				this._selfInvalidated = true;
/******/ 				switch (hotStatus) {
/******/ 					case "idle":
/******/ 						hotUpdate = {};
/******/ 						hotUpdate[moduleId] = modules[moduleId];
/******/ 						hotSetStatus("ready");
/******/ 						break;
/******/ 					case "ready":
/******/ 						hotApplyInvalidatedModule(moduleId);
/******/ 						break;
/******/ 					case "prepare":
/******/ 					case "check":
/******/ 					case "dispose":
/******/ 					case "apply":
/******/ 						(hotQueuedInvalidatedModules =
/******/ 							hotQueuedInvalidatedModules || []).push(moduleId);
/******/ 						break;
/******/ 					default:
/******/ 						// ignore requests in error states
/******/ 						break;
/******/ 				}
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash, hotQueuedInvalidatedModules;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus(hotApplyInvalidatedModules() ? "ready" : "idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			for(var chunkId in installedChunks)
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/ 		return hotApplyInternal(options);
/******/ 	}
/******/
/******/ 	function hotApplyInternal(options) {
/******/ 		hotApplyInvalidatedModules();
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (
/******/ 					!module ||
/******/ 					(module.hot._selfAccepted && !module.hot._selfInvalidated)
/******/ 				)
/******/ 					continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted &&
/******/ 				// removed self-accepted modules should not be required
/******/ 				appliedUpdate[moduleId] !== warnUnexpectedRequire &&
/******/ 				// when called invalidate self-accepting is not possible
/******/ 				!installedModules[moduleId].hot._selfInvalidated
/******/ 			) {
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					parents: installedModules[moduleId].parents.slice(),
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		if (hotUpdateNewHash !== undefined) {
/******/ 			hotCurrentHash = hotUpdateNewHash;
/******/ 			hotUpdateNewHash = undefined;
/******/ 		}
/******/ 		hotUpdate = undefined;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = item.parents;
/******/ 			hotCurrentChildModule = moduleId;
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		if (hotQueuedInvalidatedModules) {
/******/ 			return hotApplyInternal(options).then(function(list) {
/******/ 				outdatedModules.forEach(function(moduleId) {
/******/ 					if (list.indexOf(moduleId) < 0) list.push(moduleId);
/******/ 				});
/******/ 				return list;
/******/ 			});
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	function hotApplyInvalidatedModules() {
/******/ 		if (hotQueuedInvalidatedModules) {
/******/ 			if (!hotUpdate) hotUpdate = {};
/******/ 			hotQueuedInvalidatedModules.forEach(hotApplyInvalidatedModule);
/******/ 			hotQueuedInvalidatedModules = undefined;
/******/ 			return true;
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApplyInvalidatedModule(moduleId) {
/******/ 		if (!Object.prototype.hasOwnProperty.call(hotUpdate, moduleId))
/******/ 			hotUpdate[moduleId] = modules[moduleId];
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"index": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push([0,"vendors~bootstrap~index","vendors~index","index~store"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/mini-css-extract-plugin/dist/loader.js?!./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/_custom_leaflet.scss":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-1!./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/_custom_leaflet.scss ***!
  \******************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin
    if(true) {
      // 1656592602146
      var cssReload = __webpack_require__(/*! ./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js */ "./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(module.i, {"esModule":false,"locals":false});
      module.hot.dispose(cssReload);
      module.hot.accept(undefined, cssReload);
    }
  

/***/ }),

/***/ "./node_modules/mini-css-extract-plugin/dist/loader.js?!./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/maplayers_list.scss":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-1!./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/maplayers_list.scss ***!
  \*****************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin
    if(true) {
      // 1656592602335
      var cssReload = __webpack_require__(/*! ./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js */ "./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(module.i, {"esModule":false,"locals":false});
      module.hot.dispose(cssReload);
      module.hot.accept(undefined, cssReload);
    }
  

/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn-bd": "./node_modules/moment/locale/bn-bd.js",
	"./bn-bd.js": "./node_modules/moment/locale/bn-bd.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-in": "./node_modules/moment/locale/en-in.js",
	"./en-in.js": "./node_modules/moment/locale/en-in.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./en-sg": "./node_modules/moment/locale/en-sg.js",
	"./en-sg.js": "./node_modules/moment/locale/en-sg.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-mx": "./node_modules/moment/locale/es-mx.js",
	"./es-mx.js": "./node_modules/moment/locale/es-mx.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fil": "./node_modules/moment/locale/fil.js",
	"./fil.js": "./node_modules/moment/locale/fil.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-deva": "./node_modules/moment/locale/gom-deva.js",
	"./gom-deva.js": "./node_modules/moment/locale/gom-deva.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./oc-lnc": "./node_modules/moment/locale/oc-lnc.js",
	"./oc-lnc.js": "./node_modules/moment/locale/oc-lnc.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tk": "./node_modules/moment/locale/tk.js",
	"./tk.js": "./node_modules/moment/locale/tk.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-mo": "./node_modules/moment/locale/zh-mo.js",
	"./zh-mo.js": "./node_modules/moment/locale/zh-mo.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./src/config/identifyConfig.js":
/*!**************************************!*\
  !*** ./src/config/identifyConfig.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var identifyConfig = exports.identifyConfig = {
  colorLookup: [{
    layer: "exposure",
    value: 1,
    backgroundColor: "#248391",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "exposure",
    value: 2,
    backgroundColor: "#7bb0a3",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "exposure",
    value: 3,
    backgroundColor: "#d4e6b8",
    color: "#343A4F",
    label: "Medium"
  }, {
    layer: "exposure",
    value: 4,
    backgroundColor: "#edd898",
    color: "#343A4F",
    label: "Medium"
  }, {
    layer: "exposure",
    value: 6,
    backgroundColor: "#c49054",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "exposure",
    value: 9,
    backgroundColor: "#9c551f",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "exposure",
    value: 255,
    backgroundColor: "#e9ecef",
    color: "#343A4F",
    label: "N/A"
  }, {
    layer: "asset",
    value: 0,
    backgroundColor: "#b6edf0",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "asset",
    value: 1,
    backgroundColor: "#a1daed",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "asset",
    value: 2,
    backgroundColor: "#8ecaed",
    color: "#343A4F",
    label: "Medium"
  }, {
    layer: "asset",
    value: 3,
    backgroundColor: "#7abaeb",
    color: "#343A4F",
    label: "High"
  }, {
    layer: "asset",
    value: 4,
    backgroundColor: "#64aae8",
    color: "#343A4F",
    label: "High"
  }, {
    layer: "asset",
    value: 5,
    backgroundColor: "#4c99e6",
    color: "#343A4F",
    label: "High"
  }, {
    layer: "asset",
    value: 6,
    backgroundColor: "#328ae3",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "asset",
    value: 7,
    backgroundColor: "#217bdb",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "asset",
    value: 8,
    backgroundColor: "#2166cf",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "asset",
    value: 9,
    backgroundColor: "#2154c2",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "asset",
    value: 10,
    backgroundColor: "#1d40b5",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "asset",
    value: 11,
    backgroundColor: "#192fa8",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "asset",
    value: 12,
    backgroundColor: "#131f9e",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "asset",
    value: 13,
    backgroundColor: "#080a90",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "asset",
    value: 255,
    backgroundColor: "#090991",
    color: "#343A4F",
    label: "N/A"
  }, {
    layer: "threat",
    value: 0,
    backgroundColor: "#ffebd6",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "threat",
    value: 1,
    backgroundColor: "#fce5cf",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "threat",
    value: 2,
    backgroundColor: "#fadec5",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "threat",
    value: 3,
    backgroundColor: "#f7d7bc",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "threat",
    value: 4,
    backgroundColor: "#f5d1b5",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "threat",
    value: 5,
    backgroundColor: "#f5cbae",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "threat",
    value: 6,
    backgroundColor: "#f2c4a5",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "threat",
    value: 7,
    backgroundColor: "#f0bc9c",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "threat",
    value: 8,
    backgroundColor: "#edb695",
    color: "#343A4F",
    label: "Medium"
  }, {
    layer: "threat",
    value: 9,
    backgroundColor: "#ebae8d",
    color: "#343A4F",
    label: "Medium"
  }, {
    layer: "threat",
    value: 10,
    backgroundColor: "#eba786",
    color: "#343A4F",
    label: "Medium"
  }, {
    layer: "threat",
    value: 11,
    backgroundColor: "#e8a180",
    color: "#343A4F",
    label: "Medium"
  }, {
    layer: "threat",
    value: 12,
    backgroundColor: "#e69877",
    color: "#343A4F",
    label: "High"
  }, {
    layer: "threat",
    value: 13,
    backgroundColor: "#e3906f",
    color: "#343A4F",
    label: "High"
  }, {
    layer: "threat",
    value: 14,
    backgroundColor: "#e08867",
    color: "#343A4F",
    label: "High"
  }, {
    layer: "threat",
    value: 15,
    backgroundColor: "#e08063",
    color: "#343A4F",
    label: "High"
  }, {
    layer: "threat",
    value: 16,
    backgroundColor: "#de775b",
    color: "#343A4F",
    label: "High"
  }, {
    layer: "threat",
    value: 17,
    backgroundColor: "#db6f53",
    color: "#343A4F",
    label: "High"
  }, {
    layer: "threat",
    value: 18,
    backgroundColor: "#d9664c",
    color: "#343A4F",
    label: "High"
  }, {
    layer: "threat",
    value: 19,
    backgroundColor: "#d65f47",
    color: "#343A4F",
    label: "High"
  }, {
    layer: "threat",
    value: 20,
    backgroundColor: "#d65740",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "threat",
    value: 21,
    backgroundColor: "#d44e39",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "threat",
    value: 22,
    backgroundColor: "#d14734",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "threat",
    value: 23,
    backgroundColor: "#cf3e2d",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "threat",
    value: 24,
    backgroundColor: "#cc3527",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "threat",
    value: 25,
    backgroundColor: "#cc2c21",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "threat",
    value: 26,
    backgroundColor: "#c9251c",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "threat",
    value: 27,
    backgroundColor: "#c71c16",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "threat",
    value: 28,
    backgroundColor: "#c41310",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "threat",
    value: 29,
    backgroundColor: "#af0e08",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "threat",
    value: 255,
    backgroundColor: "#c40a0a",
    color: "#343A4F",
    label: "N/A"
  }, {
    layer: "aquatic",
    value: 1,
    backgroundColor: "#CCE2E8",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "aquatic",
    value: 2,
    backgroundColor: "#8FC8D6",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "aquatic",
    value: 3,
    backgroundColor: "#5EA4BA",
    color: "#343A4F",
    label: "Medium"
  }, {
    layer: "aquatic",
    value: 4,
    backgroundColor: "#047E91",
    color: "#343A4F",
    label: "Medium"
  }, {
    layer: "aquatic",
    value: 5,
    backgroundColor: "#095A62",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "aquatic",
    value: 255,
    backgroundColor: "#e9ecef",
    color: "#343A4F",
    label: "N/A"
  }, {
    layer: "terrestrial",
    value: 1,
    backgroundColor: "#FFE9C4",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "terrestrial",
    value: 2,
    backgroundColor: "#E0C879",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "terrestrial",
    value: 3,
    backgroundColor: "#76974E",
    color: "#343A4F",
    label: "Medium"
  }, {
    layer: "terrestrial",
    value: 4,
    backgroundColor: "#385B24",
    color: "#343A4F",
    label: "Medium"
  }, {
    layer: "terrestrial",
    value: 5,
    backgroundColor: "#004908",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "terrestrial",
    value: 255,
    backgroundColor: "#e9ecef",
    color: "#343A4F",
    label: "N/A"
  }, {
    layer: "hubs",
    value: 1,
    backgroundColor: "#edf8e9",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "hubs",
    value: 2,
    backgroundColor: "#c5ddca",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "hubs",
    value: 3,
    backgroundColor: "#9ec3ac",
    color: "#343A4F",
    label: "Low"
  }, {
    layer: "hubs",
    value: 4,
    backgroundColor: "#76a98d",
    color: "#343A4F",
    label: "Medium"
  }, {
    layer: "hubs",
    value: 5,
    backgroundColor: "#4f8e6f",
    color: "#e9ecef",
    label: "Medium"
  }, {
    layer: "hubs",
    value: 6,
    backgroundColor: "#277450",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "hubs",
    value: 7,
    backgroundColor: "#005a32",
    color: "#e9ecef",
    label: "High"
  }, {
    layer: "hubs",
    value: 255,
    backgroundColor: "#e9ecef",
    color: "#343A4F",
    label: "None"
  }]
};

exports.default = identifyConfig;

/***/ }),

/***/ "./src/config/mapConfig.js":
/*!*********************************!*\
  !*** ./src/config/mapConfig.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var mapConfig = exports.mapConfig = {

  //ESRI Vector BaseMap
  ESRIVectorBasemap: {
    name: "DarkGray"
  },

  //tile layers (WMS)
  TMSLayers: [{
    id: "southeast_swir_current_threshold_landsat8",
    layer: "southeast_swir_current_threshold_landsat8 TMS",
    label: "SWIR Differencing (Threshold)",
    apikey: 'southeast_swir_current_threshold_landsat8',
    hubsapikey: 'southeast_swir_current_threshold_landsat8',
    chartLabel: 'swir',
    chartLegendValues: 4,
    chartCSSColor: {
      0: '#E9ECEF',
      1: '#ff8000',
      2: '#ff0000',
      3: '#a30000',
      4: '#590000'
    },
    chartDriver: false,
    chartSummary: true,
    chartOrder: 1,
    chartInputName: 'summary',
    chartInpuLabel: 'Summary',
    chartCSSSelector: 'southeast_swir_current_threshold_landsat8',
    chartMaxValue: 5,
    chartMinValue: 0,
    chartScale: 0,
    chartScaleGroups: 1,
    chartNoDataOverRide: 1,
    url: "https://maptiles.southfact.com/mapcache/tms/1.0.0/current-swir-threshold-landsat8/{z}/{x}/{y}.png",
    attribution: "SouthFACT 2022",
    format: "image/png",
    tileSize: 256,
    transparent: true,
    opacity: 0.75,
    zIndex: 9000,
    crs: L.CRS.EPSG3857,
    maxNativeZoom: 21,
    tms: true,
    legend: "swir",
    description: "Indicator of drastic vegetation change, showing change greater than 60 percent. The Shortwave Infrared (SWIR) Band Differencing (Band 7 provided by Landsat satellites) method represents the most simplistic of the three current methods used on the SouthFACT project. This method is intended to focus on vegetation moisture while minimizing interference of atmosphere and light cloud cover. State forestry agency personnel have found this method to be a simple and quick approach to identify more drastic vegetation changes on the landscape, particularly forest harvesting.",
    source: 'regional',
    region: 'southeast',
    platform: 'landsat8'
  }, {
    id: "southeast_swir_current_all_landsat8",
    layer: "southeast_swir_current_all_landsat8 TMS",
    label: "SWIR Differencing (All Change)",
    apikey: 'southeast_swir_current_all_landsat8',
    hubsapikey: 'southeast_swir_current_all_landsat8',
    chartLabel: 'swir',
    chartLegendValues: 14,
    chartCSSColor: {
      0: '#E9ECEF',
      1: '#00003c',
      2: '#000059',
      3: '#000080',
      4: '#0000e8',
      5: '#0080ff',
      6: '#00c080',
      7: '#01ff00',
      8: '#c0ff00',
      9: '#ffff00',
      10: '#ffc100',
      11: '#ff8000',
      12: '#ff0000',
      13: '#a30000',
      14: '#590000'
    },
    chartDriver: false,
    chartSummary: true,
    chartOrder: 2,
    chartInputName: 'summary',
    chartInpuLabel: 'Summary',
    chartCSSSelector: 'southeast_swir_current_all_landsat8',
    chartMaxValue: 15,
    chartMinValue: 0,
    chartScale: 0,
    chartScaleGroups: 1,
    chartNoDataOverRide: 1,
    url: "https://maptiles.southfact.com/mapcache/tms/1.0.0/current-swir-all-landsat8/{z}/{x}/{y}.png",
    attribution: "SouthFACT 2022",
    format: "image/png",
    tileSize: 256,
    transparent: true,
    opacity: 1.0,
    zIndex: 9000,
    crs: L.CRS.EPSG3857,
    maxNativeZoom: 21,
    tms: true,
    legend: "swir",
    description: "Indicator of drastic vegetation change, showing all change. The Shortwave Infrared (SWIR) Band Differencing (Band 7 provided by Landsat satellites) method represents the most simplistic of the three current methods used on the SouthFACT project. This method is intended to focus on vegetation moisture while minimizing interference of atmosphere and light cloud cover. State forestry agency personnel have found this method to be a simple and quick approach to identify more drastic vegetation changes on the landscape, particularly forest harvesting.",
    source: 'regional',
    region: 'southeast',
    platform: 'landsat8'
  }, {
    id: "southeast_ndvi_current_landsat8",
    layer: "southeast_ndvi_current_landsat8 TMS",
    label: "NDVI",
    apikey: 'southeast_ndvi_current_landsat8',
    hubsapikey: 'southeast_ndvi_current_landsat8',
    chartLabel: 'NDVI',
    chartLegendValues: 14,
    chartCSSColor: {
      0: '#E9ECEF',
      1: '#006100',
      2: '#2d7500',
      3: '#4d8c00',
      4: '#70a300',
      5: '#97bd00',
      6: '#bdd600',
      7: '#e8f000',
      8: '#fff200',
      9: '#ffd000',
      10: '#ffb300',
      11: '#ff9100',
      12: '#ff7300',
      13: '#ff5100',
      14: '#ff2200'
    },
    chartDriver: false,
    chartSummary: true,
    chartOrder: 3,
    chartInputName: 'summary',
    chartInpuLabel: 'Summary',
    chartCSSSelector: 'southeast_ndvi_current_landsat8',
    chartMaxValue: 15,
    chartMinValue: 0,
    chartScale: 0,
    chartScaleGroups: 1,
    chartNoDataOverRide: 1,
    url: "https://maptiles.southfact.com/mapcache/tms/1.0.0/current-ndvi-landsat8/{z}/{x}/{y}.png",
    attribution: "SouthFACT 2022",
    format: "image/png",
    tileSize: 256,
    transparent: true,
    opacity: 0.75,
    zIndex: 9000,
    crs: L.CRS.EPSG3857,
    maxNativeZoom: 21,
    tms: true,
    legend: "NDVI",
    description: 'The Normalized Differential Vegetation Index (NDVI) method is a commonly used vegetation index, generically referred to as a measure of vegetation "greenness." In general, this method relies on the characteristics of healthy vegetation to absorb red light (for energy / photosynthesis) and reflect near-infrared light. As a result, evaluating the change in NDVI from one image to another roughly equates to evaluating the change in vegetation health / productivity.',
    source: 'regional',
    region: 'southeast',
    platform: 'landsat8'
  }, {
    id: "southeast_ndmi_current_landsat8",
    layer: "southeast_ndmi_current_landsat8 TMS",
    label: "NDMI",
    apikey: 'southeast_ndmi_current_landsat8',
    hubsapikey: 'southeast_ndmi_current_landsat8',
    chartLabel: 'NDMI',
    chartLegendValues: 14,
    chartCSSColor: {
      0: '#E9ECEF',
      1: '#4575b5',
      2: '#6388b8',
      3: '#7f9aba',
      4: '#9bafbd',
      5: '#b7c4bd',
      6: '#d3dbbf',
      7: '#f0f2bf',
      8: '#fff0b3',
      9: '#fcce95',
      10: '#faaf7d',
      11: '#f28e63',
      12: '#eb6f4d',
      13: '#e05138',
      14: '#d62f27'
    },
    chartDriver: false,
    chartSummary: true,
    chartOrder: 4,
    chartInputName: 'summary',
    chartInpuLabel: 'Summary',
    chartCSSSelector: 'southeast_ndmi_current_landsat8',
    chartMaxValue: 15,
    chartMinValue: 0,
    chartScale: 0,
    chartScaleGroups: 1,
    chartNoDataOverRide: 1,
    url: "https://maptiles.southfact.com/mapcache/tms/1.0.0/current-ndmi-landsat8/{z}/{x}/{y}.png",
    attribution: "SouthFACT 2022",
    format: "image/png",
    tileSize: 256,
    transparent: true,
    opacity: 0.75,
    zIndex: 9000,
    crs: L.CRS.EPSG3857,
    maxNativeZoom: 21,
    tms: true,
    legend: "ndmi",
    description: 'The Normalized Differential Moisture Index (NDMI) method is another relatively common Vegetation Index and is generically referred to as a measure of vegetation moisture. NDMI is more frequently being used in drought monitoring but is also capable of detecting more subtle changes in vegetation moisture conditions. Researchers have also evaluated the use of NDMI to determine fuel moistures for wildfire hazard assessments.',
    source: 'regional',
    region: 'continental_us',
    platform: 'landsat8'
  }, {
    id: "southeast_swir_current_threshold_1yr_landsat8",
    layer: "southeast_swir_current_threshold_1yr_landsat8 TMS",
    label: "SWIR Differencing Last Year",
    apikey: 'southeast_swir_current_threshold_1yr_landsat8',
    hubsapikey: 'southeast_swir_current_threshold_1yr_landsat8',
    chartLabel: 'SWIR Differencing 2019 - 2018',
    chartLegendValues: 4,
    chartCSSColor: {
      0: '#E9ECEF',
      1: '#ff8000',
      2: '#ff0000',
      3: '#a30000',
      4: '#590000'
    },
    chartDriver: false,
    chartSummary: true,
    chartOrder: 1,
    chartInputName: 'summary',
    chartInpuLabel: 'Summary',
    chartCSSSelector: 'southeast_swir_current_threshold_1yr_landsat8',
    chartMaxValue: 5,
    chartMinValue: 0,
    chartScale: 0,
    chartScaleGroups: 1,
    chartNoDataOverRide: 1,
    url: "https://maptiles.southfact.com/mapcache/tms/1.0.0/last-year-swir-threshold-landsat8/{z}/{x}/{y}.png",
    attribution: "SouthFACT 2022",
    format: "image/png",
    tileSize: 256,
    transparent: true,
    opacity: 0.75,
    zIndex: 9000,
    crs: L.CRS.EPSG3857,
    maxNativeZoom: 14,
    tms: true,
    legend: "hub",
    description: "Indicator of drastic vegetation change, showing change greater than 60 percent for last year. The Shortwave Infrared (SWIR) Band Differencing (Band 7 provided by Landsat satellites) method represents the most simplistic of the three current methods used on the SouthFACT project. This method is intended to focus on vegetation moisture while minimizing interference of atmosphere and light cloud cover. State forestry agency personnel have found this method to be a simple and quick approach to identify more drastic vegetation changes on the landscape, particularly forest harvesting.",
    source: 'regional',
    region: 'southeast',
    platform: 'landsat8'
  },

  //tile layers (sentinel2)
  {
    id: "southeast_swir_current_threshold_sentinel2",
    layer: "southeast_swir_current_threshold_sentinel2 TMS",
    label: "SWIR Differencing (Threshold)",
    apikey: 'southeast_swir_current_threshold_sentinel2',
    hubsapikey: 'southeast_swir_current_threshold_sentinel2',
    chartLabel: 'swir',
    chartLegendValues: 4,
    chartCSSColor: {
      0: '#E9ECEF',
      1: '#ff8000',
      2: '#ff0000',
      3: '#a30000',
      4: '#590000'
    },
    chartDriver: false,
    chartSummary: true,
    chartOrder: 1,
    chartInputName: 'summary',
    chartInpuLabel: 'Summary',
    chartCSSSelector: 'southeast_swir_current_threshold_sentinel2',
    chartMaxValue: 5,
    chartMinValue: 0,
    chartScale: 0,
    chartScaleGroups: 1,
    chartNoDataOverRide: 1,
    url: "https://maptiles.southfact.com/mapcache/tms/1.0.0/current-swir-threshold-sentinel2/{z}/{x}/{y}.png",
    attribution: "SouthFACT 2022",
    format: "image/png",
    tileSize: 256,
    transparent: true,
    opacity: 0.75,
    zIndex: 9000,
    crs: L.CRS.EPSG3857,
    maxNativeZoom: 21,
    tms: true,
    legend: "swir",
    description: "Indicator of drastic vegetation change, showing change greater than 60 percent. The Shortwave Infrared (SWIR) Band Differencing (Band 7 provided by Landsat satellites) method represents the most simplistic of the three current methods used on the SouthFACT project. This method is intended to focus on vegetation moisture while minimizing interference of atmosphere and light cloud cover. State forestry agency personnel have found this method to be a simple and quick approach to identify more drastic vegetation changes on the landscape, particularly forest harvesting.",
    source: 'regional',
    region: 'southeast',
    platform: 'sentinel2'
  }, {
    id: "southeast_swir_current_all_sentinel2",
    layer: "southeast_swir_current_all_sentinel2 TMS",
    label: "SWIR Differencing (All Change)",
    apikey: 'southeast_swir_current_all_sentinel2',
    hubsapikey: 'southeast_swir_current_all_sentinel2',
    chartLabel: 'swir',
    chartLegendValues: 14,
    chartCSSColor: {
      0: '#E9ECEF',
      1: '#00003c',
      2: '#000059',
      3: '#000080',
      4: '#0000e8',
      5: '#0080ff',
      6: '#00c080',
      7: '#01ff00',
      8: '#c0ff00',
      9: '#ffff00',
      10: '#ffc100',
      11: '#ff8000',
      12: '#ff0000',
      13: '#a30000',
      14: '#590000'
    },
    chartDriver: false,
    chartSummary: true,
    chartOrder: 2,
    chartInputName: 'summary',
    chartInpuLabel: 'Summary',
    chartCSSSelector: 'southeast_swir_current_all_sentinel2',
    chartMaxValue: 15,
    chartMinValue: 0,
    chartScale: 0,
    chartScaleGroups: 1,
    chartNoDataOverRide: 1,
    url: "https://maptiles.southfact.com/mapcache/tms/1.0.0/current-swir-all-sentinel2/{z}/{x}/{y}.png",
    attribution: "SouthFACT 2022",
    format: "image/png",
    tileSize: 256,
    transparent: true,
    opacity: 1.0,
    zIndex: 9000,
    crs: L.CRS.EPSG3857,
    maxNativeZoom: 21,
    tms: true,
    legend: "swir",
    description: "Indicator of drastic vegetation change, showing all change. The Shortwave Infrared (SWIR) Band Differencing (Band 7 provided by Landsat satellites) method represents the most simplistic of the three current methods used on the SouthFACT project. This method is intended to focus on vegetation moisture while minimizing interference of atmosphere and light cloud cover. State forestry agency personnel have found this method to be a simple and quick approach to identify more drastic vegetation changes on the landscape, particularly forest harvesting.",
    source: 'regional',
    region: 'southeast',
    platform: 'sentinel2'
  }, {
    id: "southeast_ndvi_current_sentinel2",
    layer: "southeast_ndvi_current_sentinel2 TMS",
    label: "NDVI",
    apikey: 'southeast_ndvi_current_sentinel2',
    hubsapikey: 'southeast_ndvi_current_sentinel2',
    chartLabel: 'NDVI',
    chartLegendValues: 14,
    chartCSSColor: {
      0: '#E9ECEF',
      1: '#006100',
      2: '#2d7500',
      3: '#4d8c00',
      4: '#70a300',
      5: '#97bd00',
      6: '#bdd600',
      7: '#e8f000',
      8: '#fff200',
      9: '#ffd000',
      10: '#ffb300',
      11: '#ff9100',
      12: '#ff7300',
      13: '#ff5100',
      14: '#ff2200'
    },
    chartDriver: false,
    chartSummary: true,
    chartOrder: 3,
    chartInputName: 'summary',
    chartInpuLabel: 'Summary',
    chartCSSSelector: 'southeast_ndvi_current_sentinel2',
    chartMaxValue: 15,
    chartMinValue: 0,
    chartScale: 0,
    chartScaleGroups: 1,
    chartNoDataOverRide: 1,
    url: "https://maptiles.southfact.com/mapcache/tms/1.0.0/current-ndvi-sentinel2/{z}/{x}/{y}.png",
    attribution: "SouthFACT 2022",
    format: "image/png",
    tileSize: 256,
    transparent: true,
    opacity: 0.75,
    zIndex: 9000,
    crs: L.CRS.EPSG3857,
    maxNativeZoom: 21,
    tms: true,
    legend: "NDVI",
    description: 'The Normalized Differential Vegetation Index (NDVI) method is a commonly used vegetation index, generically referred to as a measure of vegetation "greenness." In general, this method relies on the characteristics of healthy vegetation to absorb red light (for energy / photosynthesis) and reflect near-infrared light. As a result, evaluating the change in NDVI from one image to another roughly equates to evaluating the change in vegetation health / productivity.',
    source: 'regional',
    region: 'southeast',
    platform: 'sentinel2'
  }, {
    id: "southeast_ndmi_current_sentinel2",
    layer: "southeast_ndmi_current_sentinel2 TMS",
    label: "NDMI",
    apikey: 'southeast_ndmi_current_sentinel2',
    hubsapikey: 'southeast_ndmi_current_sentinel2',
    chartLabel: 'NDMI',
    chartLegendValues: 14,
    chartCSSColor: {
      0: '#E9ECEF',
      1: '#4575b5',
      2: '#6388b8',
      3: '#7f9aba',
      4: '#9bafbd',
      5: '#b7c4bd',
      6: '#d3dbbf',
      7: '#f0f2bf',
      8: '#fff0b3',
      9: '#fcce95',
      10: '#faaf7d',
      11: '#f28e63',
      12: '#eb6f4d',
      13: '#e05138',
      14: '#d62f27'
    },
    chartDriver: false,
    chartSummary: true,
    chartOrder: 4,
    chartInputName: 'summary',
    chartInpuLabel: 'Summary',
    chartCSSSelector: 'southeast_ndmi_current_sentinel2',
    chartMaxValue: 15,
    chartMinValue: 0,
    chartScale: 0,
    chartScaleGroups: 1,
    chartNoDataOverRide: 1,
    url: "https://maptiles.southfact.com/mapcache/tms/1.0.0/current-ndmi-sentinel2/{z}/{x}/{y}.png",
    attribution: "SouthFACT 2022",
    format: "image/png",
    tileSize: 256,
    transparent: true,
    opacity: 0.75,
    zIndex: 9000,
    crs: L.CRS.EPSG3857,
    maxNativeZoom: 21,
    tms: true,
    legend: "ndmi",
    description: 'The Normalized Differential Moisture Index (NDMI) method is another relatively common Vegetation Index and is generically referred to as a measure of vegetation moisture. NDMI is more frequently being used in drought monitoring but is also capable of detecting more subtle changes in vegetation moisture conditions. Researchers have also evaluated the use of NDMI to determine fuel moistures for wildfire hazard assessments.',
    source: 'regional',
    region: 'continental_us',
    platform: 'sentinel2'
  }, {
    id: "southeast_swir_current_threshold_1yr_sentinel2",
    layer: "southeast_swir_current_threshold_1yr_sentinel2 TMS",
    label: "SWIR Differencing Last Year",
    apikey: 'southeast_swir_current_threshold_1yr_sentinel2',
    hubsapikey: 'southeast_swir_current_threshold_1yr_sentinel2',
    chartLabel: 'SWIR Differencing 2019 - 2018',
    chartLegendValues: 4,
    chartCSSColor: {
      0: '#E9ECEF',
      1: '#ff8000',
      2: '#ff0000',
      3: '#a30000',
      4: '#590000'
    },
    chartDriver: false,
    chartSummary: true,
    chartOrder: 1,
    chartInputName: 'summary',
    chartInpuLabel: 'Summary',
    chartCSSSelector: 'southeast_swir_current_threshold_1yr_sentinel2',
    chartMaxValue: 5,
    chartMinValue: 0,
    chartScale: 0,
    chartScaleGroups: 1,
    chartNoDataOverRide: 1,
    url: "https://maptiles.southfact.com/mapcache/tms/1.0.0/last-year-swir-threshold-sentinel2/{z}/{x}/{y}.png",
    attribution: "SouthFACT 2022",
    format: "image/png",
    tileSize: 256,
    transparent: true,
    opacity: 0.75,
    zIndex: 9000,
    crs: L.CRS.EPSG3857,
    maxNativeZoom: 14,
    tms: true,
    legend: "hub",
    description: "Indicator of drastic vegetation change, showing change greater than 60 percent for last year. The Shortwave Infrared (SWIR) Band Differencing (Band 7 provided by Landsat satellites) method represents the most simplistic of the three current methods used on the SouthFACT project. This method is intended to focus on vegetation moisture while minimizing interference of atmosphere and light cloud cover. State forestry agency personnel have found this method to be a simple and quick approach to identify more drastic vegetation changes on the landscape, particularly forest harvesting.",
    source: 'regional',
    region: 'southeast',
    platform: 'sentinel2'
  }],

  //tile layers (WMS)
  WMSLayers: [],

  zoomRegions: [{
    region: 'southeast',
    label: 'Southeast U.S',
    center: [40.979898, -81.474609], // update
    extent: [-132.97, 25.16, -62.49, 50.00], // update
    zoom: 4
  }],

  mapDefaults: {
    center: [36.914764288955936, -82.33154296875001],
    zoom: 5
  },

  //leaflet optoins expand as needed
  mapOptions: {
    // center: [ 32.7765, -79.9311 ],
    zoom: 4,
    maxZoom: 16,
    minZoom: 4,
    crs: L.CRS.EPSG3857
  }

};

exports.default = mapConfig;

/***/ }),

/***/ "./src/config/navConfig.js":
/*!*********************************!*\
  !*** ./src/config/navConfig.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var navConfig = exports.navConfig = {
  navs: [{
    name: "home",
    ref: "main-nav-home",
    text: "Home",
    id: "main-nav-home",
    href: "https://www.southfact.com/",
    target: "_self"
  }, {
    name: "map",
    ref: "main-nav-map",
    text: "Map",
    id: "main-nav-map",
    href: "./#Home",
    target: "_self"
  }, {
    name: "cr",
    ref: "main-nav-cr",
    text: "Custom Requests",
    id: "main-nav-cr",
    href: "https://code.earthengine.google.com/99d055f769538474c2e566a764f6eb6d?hideCode=true",
    target: "_blank"
  }, {
    name: "learn",
    ref: "main-nav-learn",
    text: "Learn",
    id: "main-nav-learn",
    href: "https://www.southfact.com/about/index.html ",
    target: "_self"
  }, {
    name: "downloads",
    ref: "main-nav-downloads",
    text: "Downloads",
    id: "main-nav-downloads",
    href: "https://www.southfact.com/downloads/index.html ",
    target: "_self"
  }, {
    name: "contact",
    ref: "main-nav-contact",
    text: "Contact",
    id: "main-nav-contact",
    href: "https://www.southfact.com/contact/index.html ",
    target: "_self"
  }]
};

/***/ }),

/***/ "./src/css/_custom_leaflet.scss":
/*!**************************************!*\
  !*** ./src/css/_custom_leaflet.scss ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-1!../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./_custom_leaflet.scss */ "./node_modules/mini-css-extract-plugin/dist/loader.js?!./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/_custom_leaflet.scss");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
  if (!a && b || a && !b) {
    return false;
  }

  var p;

  for (p in a) {
    if (isNamedExport && p === 'default') {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (a[p] !== b[p]) {
      return false;
    }
  }

  for (p in b) {
    if (isNamedExport && p === 'default') {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (!a[p]) {
      return false;
    }
  }

  return true;
};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-1!../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./_custom_leaflet.scss */ "./node_modules/mini-css-extract-plugin/dist/loader.js?!./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/_custom_leaflet.scss",
      function () {
        content = __webpack_require__(/*! !../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-1!../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./_custom_leaflet.scss */ "./node_modules/mini-css-extract-plugin/dist/loader.js?!./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/_custom_leaflet.scss");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.i, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ "./src/css/maplayers_list.scss":
/*!*************************************!*\
  !*** ./src/css/maplayers_list.scss ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-1!../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./maplayers_list.scss */ "./node_modules/mini-css-extract-plugin/dist/loader.js?!./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/maplayers_list.scss");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
  if (!a && b || a && !b) {
    return false;
  }

  var p;

  for (p in a) {
    if (isNamedExport && p === 'default') {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (a[p] !== b[p]) {
      return false;
    }
  }

  for (p in b) {
    if (isNamedExport && p === 'default') {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (!a[p]) {
      return false;
    }
  }

  return true;
};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-1!../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./maplayers_list.scss */ "./node_modules/mini-css-extract-plugin/dist/loader.js?!./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/maplayers_list.scss",
      function () {
        content = __webpack_require__(/*! !../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-1!../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./maplayers_list.scss */ "./node_modules/mini-css-extract-plugin/dist/loader.js?!./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/maplayers_list.scss");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.i, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ "./src/images/DGCanvasBase.png":
/*!*************************************!*\
  !*** ./src/images/DGCanvasBase.png ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "04a10eb02a5d5076c151e4ba38216875.png";

/***/ }),

/***/ "./src/images/imagery.jpg":
/*!********************************!*\
  !*** ./src/images/imagery.jpg ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "611aceeea7f89d10f0a6e4e646de64a3.jpg";

/***/ }),

/***/ "./src/images/topo_map_2.jpg":
/*!***********************************!*\
  !*** ./src/images/topo_map_2.jpg ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "57aa59bc77bd05030cd928627f009910.jpg";

/***/ }),

/***/ "./src/images/world_street_map.jpg":
/*!*****************************************!*\
  !*** ./src/images/world_street_map.jpg ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "90bad225cb92652caa9c5c892d2dcfe5.jpg";

/***/ }),

/***/ "./src/images/zoomregion-cus.png":
/*!***************************************!*\
  !*** ./src/images/zoomregion-cus.png ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "1cae590a92ba7f0f5402517bbcb43042.png";

/***/ }),

/***/ "./src/scripts/components.js":
/*!***********************************!*\
  !*** ./src/scripts/components.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Base component class to provide view ref binding, template insertion, and event listener setup
 */
var Component = exports.Component = function () {
  /**
   * Component Constructor
   * @param { String } placeholderId - Element ID to inflate the component into
   * @param { Object } props - Component properties
   * @param { Object } props.events - Component event listeners
   * @param { Object } props.data - Component data properties
   * @param { String } template - HTML template to inflate into placeholder id
   */
  function Component(placeholderId) {
    var _this = this;

    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var template = arguments[2];

    _classCallCheck(this, Component);

    this.componentElem = document.getElementById(placeholderId);

    this.refs = {};

    if (template) {
      if (this.componentElem != null) {
        this.componentElem.addEventListener('load', function () {
          // placeholder for future use
        });

        this.componentElem.addEventListener('unload', function () {
          // placeholder for future use
        });

        // Load template into placeholder element
        this.componentElem.innerHTML = template;

        // Find all refs in component
        var refElems = this.componentElem.querySelectorAll('[ref]');
        refElems.forEach(function (elem) {
          _this.refs[elem.getAttribute('ref')] = elem;
        });
      }
    }

    if (props.events) {
      this.createEvents(props.events);
    }
  }

  /** Read "event" component parameters, and attach event listeners for each */


  _createClass(Component, [{
    key: 'createEvents',
    value: function createEvents(events) {
      var _this2 = this;

      Object.keys(events).forEach(function (eventName) {
        _this2.componentElem.addEventListener(eventName, events[eventName], false);
      });
    }

    /** Trigger a component event with the provided "detail" payload */

  }, {
    key: 'triggerEvent',
    value: function triggerEvent(eventName, detail) {
      var event = new window.CustomEvent(eventName, { detail: detail });
      this.componentElem.dispatchEvent(event);
    }
  }]);

  return Component;
}();

/***/ }),

/***/ "./src/scripts/downloadbutton.js":
/*!***************************************!*\
  !*** ./src/scripts/downloadbutton.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DownloadButton = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _leaflet = __webpack_require__(/*! leaflet */ "./node_modules/leaflet/dist/leaflet-src.js");

var _leaflet2 = _interopRequireDefault(_leaflet);

var _components = __webpack_require__(/*! ./components */ "./src/scripts/components.js");

var _utilitys = __webpack_require__(/*! ./utilitys */ "./src/scripts/utilitys.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // dependencies

// import utilities


// required for bootstrap
window.$ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
// required for tooltip, popup...
window.Popper = __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js");

window.jQuery = window.$;

/**
* handles download of map data
*/

var DownloadButton = exports.DownloadButton = function (_Component) {
  _inherits(DownloadButton, _Component);

  function DownloadButton(placeholderId, props) {
    _classCallCheck(this, DownloadButton);

    var _this = _possibleConstructorReturn(this, (DownloadButton.__proto__ || Object.getPrototypeOf(DownloadButton)).call(this, placeholderId, props));

    var mapComponent = props.mapComponent;

    _this.mapComponent = mapComponent;

    // DownloadButton.addDownloadButtonControl(this.mapComponent);
    return _this;
  }

  _createClass(DownloadButton, null, [{
    key: 'DownloadButtonControlOnAddHandler',
    value: function DownloadButtonControlOnAddHandler() {
      var downloadBtn = _leaflet2.default.DomUtil.create('div', 'btn-download-holder');
      downloadBtn.setAttribute('id', 'btn-download-holder');
      downloadBtn.classList.add('btn-mapshareurl-holder');
      downloadBtn.innerHTML = '<a id="downloaddata" class="btn btn-light btn-downloaddata"  href="#" title="Download map data" ' + 'role="button" aria-label="Download map data" ' + 'data-toggle="tooltip" data-placement="right" data-original-title="Download map data"> ' + '<i class="fas fa-download icon-download"></i>' + '<div class="btn-med-download-label" >Download</div></a>';

      _leaflet2.default.DomEvent.disableClickPropagation(downloadBtn);
      // initalize new tooltips
      $(function () {
        $('#btn-download-holder [data-toggle="tooltip"]').tooltip({ trigger: 'hover focus' });
      });
      return downloadBtn;
    }

    // add  Download Button control to leaflet map

  }, {
    key: 'addDownloadButtonControl',
    value: function addDownloadButtonControl(leafletmap) {
      _leaflet2.default.Control.Watermark = _leaflet2.default.Control.extend({
        onAdd: DownloadButton.DownloadButtonControlOnAddHandler,

        // Nothing to do here
        onRemove: DownloadButton.DownloadButtonOnRemoveHandler
      });

      _leaflet2.default.control.watermark = function (opts) {
        return new _leaflet2.default.Control.Watermark(opts);
      };
      _leaflet2.default.control.watermark({ position: 'bottomleft' }).addTo(leafletmap);

      // get btn for share URL add click event
      var leafletControlElement = document.querySelector('.btn-downloaddata');
      leafletControlElement.addEventListener('click', DownloadButton.DownloadButtonHandler.bind(this));
    }

    // share url (identify) control (button) on add function.
    // fires when the control (button) is removed

  }, {
    key: 'DownloadButtonOnRemoveHandler',
    value: function DownloadButtonOnRemoveHandler(map) {
      // Nothing to do here yet
      return null;
    }
  }, {
    key: 'DownloadButtonHandler',
    value: function DownloadButtonHandler() {
      console.log('download data click');
      // ga event action, category, label
      (0, _utilitys.googleAnalyticsEvent)('click', 'DownloadButton', 'download');
    }
  }]);

  return DownloadButton;
}(_components.Component);

/***/ }),

/***/ "./src/scripts/identifyAPI.js":
/*!************************************!*\
  !*** ./src/scripts/identifyAPI.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IdentifyAPI = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");

var _store = __webpack_require__(/*! ./store */ "./src/scripts/store.js");

var _identifyConfig = __webpack_require__(/*! ../config/identifyConfig */ "./src/config/identifyConfig.js");

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var store = new _store.Store({});
// const apiEndpoint = 'https://ktj0thaws0.execute-api.us-east-1.amazonaws.com/';
// const identifyPath = 'Dev/';

var apiEndpoint = 'https://lg0njzoglg.execute-api.us-east-1.amazonaws.com/';
var identifyPath = 'Prod/';

/** API Wrapper Service Class
* this wrapps the lambda service into axios js calls
* it should only handle the api calls
*/

var IdentifyAPI = exports.IdentifyAPI = function () {
  function IdentifyAPI() {
    var _this = this;

    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : apiEndpoint;
    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identifyPath;

    _classCallCheck(this, IdentifyAPI);

    this.apiEndpoint = url;
    var activeNav = store.getStateItem('activeNav');
    if (activeNav === 'main-nav-map-searchNShubs') {
      this.apiEndpoint = 'https://dm3kiccxv2.execute-api.us-east-1.amazonaws.com/';
    }
    this.url = this.apiEndpoint + path;
    this.cancelToken = _axios.CancelToken.source();

    // handle nav bar change and potentail data change
    // to targeted watersheds for identify
    window.addEventListener('aboutNavChange', function (e) {
      _this.apiEndpoint = url;
      var activeNavList = store.getStateItem('activeNav');
      if (activeNavList === 'main-nav-map-searchNShubs') {
        _this.apiEndpoint = 'https://dm3kiccxv2.execute-api.us-east-1.amazonaws.com/';
      }
      _this.url = _this.apiEndpoint + path;
    });
  }

  _createClass(IdentifyAPI, [{
    key: 'httpGet',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var queryString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var axiosConfig, response;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.cancelToken.cancel('Cancelled Ongoing Request');
                this.cancelToken = _axios.CancelToken.source();
                axiosConfig = {
                  cancelToken: this.cancelToken.token
                };
                _context.prev = 3;
                _context.next = 6;
                return (0, _axios.get)('' + this.url + queryString, axiosConfig);

              case 6:
                response = _context.sent;
                return _context.abrupt('return', response.data);

              case 10:
                _context.prev = 10;
                _context.t0 = _context['catch'](3);
                return _context.abrupt('return', {});

              case 13:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 10]]);
      }));

      function httpGet() {
        return _ref.apply(this, arguments);
      }

      return httpGet;
    }()
  }, {
    key: 'getIdentifySummary',
    value: function getIdentifySummary() {
      var lat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '1745727';
      var lng = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '451980';

      return this.httpGet('identify?lat=' + lat + '&lng=' + lng);
    }
  }], [{
    key: 'getIdentifyItem',
    value: function getIdentifyItem(item, value) {
      var filteredItems = [{
        layer: item,
        value: 255,
        backgroundColor: '#e9ecef',
        color: '#343A4F',
        label: 'N/A'
      }];

      var returnedFilteredItems = _identifyConfig.identifyConfig.colorLookup.filter(function (layer) {
        return layer.layer === item && layer.value === value;
      });

      if (returnedFilteredItems !== undefined && returnedFilteredItems.length > 0) {
        filteredItems = returnedFilteredItems;
      }
      return filteredItems;
    }
  }]);

  return IdentifyAPI;
}();

/***/ }),

/***/ "./src/scripts/index.js":
/*!******************************!*\
  !*** ./src/scripts/index.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _navigo = __webpack_require__(/*! navigo */ "./node_modules/navigo/lib/navigo.min.js");

var _navigo2 = _interopRequireDefault(_navigo);

var _fontawesomeSvgCore = __webpack_require__(/*! @fortawesome/fontawesome-svg-core */ "./node_modules/@fortawesome/fontawesome-svg-core/index.es.js");

var _freeSolidSvgIcons = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ "./node_modules/@fortawesome/free-solid-svg-icons/index.es.js");

var _freeRegularSvgIcons = __webpack_require__(/*! @fortawesome/free-regular-svg-icons */ "./node_modules/@fortawesome/free-regular-svg-icons/index.es.js");

var _store = __webpack_require__(/*! ./store */ "./src/scripts/store.js");

var _url = __webpack_require__(/*! ./url */ "./src/scripts/url.js");

var _utilitys = __webpack_require__(/*! ./utilitys */ "./src/scripts/utilitys.js");

var _map = __webpack_require__(/*! ./map */ "./src/scripts/map.js");

var _maplayers_list = __webpack_require__(/*! ./maplayers_list */ "./src/scripts/maplayers_list.js");

var _navBar = __webpack_require__(/*! ./navBar */ "./src/scripts/navBar.js");

var _mapinfo = __webpack_require__(/*! ./mapinfo */ "./src/scripts/mapinfo.js");

var _pointsofinterest = __webpack_require__(/*! ./pointsofinterest */ "./src/scripts/pointsofinterest.js");

var _shareurl = __webpack_require__(/*! ./shareurl */ "./src/scripts/shareurl.js");

var _searchlocations = __webpack_require__(/*! ./searchlocations */ "./src/scripts/searchlocations.js");

var _notfound = __webpack_require__(/*! ../templates/notfound.html */ "./src/templates/notfound.html");

var _notfound2 = _interopRequireDefault(_notfound);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// initialize navbar


// import extended components
var navBarComponent = new _navBar.NavBar('nav-holder');

// import html templates


// import custom classess
// import dependencies

var urlParams = new URLSearchParams(window.location.search);
var hasShareURL = urlParams.get('shareurl');
var theStartNav = urlParams.get('fornav');
var URLCls = new _url.URL();

_fontawesomeSvgCore.library.add(_freeSolidSvgIcons.fas, _freeRegularSvgIcons.far);

// Kicks off the process of finding <i> tags and replacing with <svg>
_fontawesomeSvgCore.dom.watch();

var mapComponent = void 0;
var maplayersComponent = void 0;
var mapInfoComponent = void 0;
var pointsOfInterestComponent = void 0;
var searchLocationsComponent = void 0;
var shareurl = void 0;

var store = new _store.Store({});

// lint overirdes
store.setStoreItem('navBarComponent', navBarComponent);
store.removeStateItem('navBarComponent');
store.setStoreItem('maplayersComponent', maplayersComponent);
store.removeStateItem('maplayersComponent');
store.setStoreItem('shareurl', shareurl);
store.removeStateItem('shareurl');
store.setStoreItem('pointsOfInterestComponent', pointsOfInterestComponent);
store.removeStateItem('pointsOfInterestComponent');

var homeloc = window.location.origin;
// handle gh pages dist folder.
if (homeloc === 'https://southfact.github.io') {
  homeloc += '/southfact-map-v2/dist';
}

// Creates a new Leaflet Map in the target DOM element
//
// @param selector - string DOM selector
// Closes over global import Map
function initMap(selector) {
  return new _map.Map(selector);
}

// Creates a new Leaflet Map in the target DOM element
//
// @param map - instantiated element of class Map
// @param selector - string DOM selector
// Closes over global import MapLayersList
function initMapLayerList(map, selector) {
  return new _maplayers_list.MapLayersList(selector, {
    mapComponent: map,
    events: {
      layerToggle: function layerToggle(event) {
        map.toggleLayer(event.detail);
      }
    }
  });
}

// set the state for items that could be working
// we will need this to make sure we do not stop the spinner befire the work
// is actually complete
function setworkingstates() {
  store.setStoreItem('working_basemap', false);
  store.setStoreItem('working_mapinfo', false);
  store.setStoreItem('working_search', false);
  store.setStoreItem('working_drawlayers', false);
}

// Creates the entire map component
//
// Closes over global import Map
function initMapComponent() {
  // add parameter for type of explore
  store.removeStateItem('mapClickPointsOfInterest');
  if (mapComponent === undefined) {
    mapComponent = initMap('map-holder');
    maplayersComponent = initMapLayerList(mapComponent, 'maplayers_list-holder');
    mapInfoComponent = new _mapinfo.MapInfo('', { mapComponent: mapComponent });
    setworkingstates();

    shareurl = new _shareurl.ShareUrl('', { mapComponent: mapComponent, URLCls: URLCls });
    // add switch for type of explore
    searchLocationsComponent = new _searchlocations.SearchLocations('', {
      mapComponent: mapComponent,
      mapInfoComponent: mapInfoComponent,
      hasShareURL: hasShareURL,
      theStartNav: theStartNav
    });

    // add points of interest
    pointsOfInterestComponent = new _pointsofinterest.PointsOfInterest('', { mapComponent: mapComponent });
  }

  // restore only if first render
  if (mapComponent.renderCount === 0) {
    mapComponent.restoreMapState();

    if ((0, _utilitys.checkValidObject)(mapInfoComponent)) {
      mapInfoComponent.restoreMapInfoState();
    }

    if ((0, _utilitys.checkValidObject)(searchLocationsComponent)) {
      searchLocationsComponent.restoreSearchLocationsState();
    }
  }

  mapComponent.renderCount += 1;

  // delay listners unitll after setup also needs slight time out so the map dose not move on start
  setTimeout(function () {
    mapComponent.addMapEventListners(mapComponent.map);
  }, 1000);
}

// deal with nav bars so back button is not broken
//
// @param selector - string DOM selector
// Closes over global import NavBar
function setNavBars(selector) {
  _navBar.NavBar.resetTabContent();

  var activeNav = store.getStateItem('activeNav');

  // this very hacky need better way to handle
  if (selector === 'main-nav-map-searchhubs' || selector === 'main-nav-map-searchNShubs' || selector === 'main-nav-map-examples') {
    _navBar.NavBar.toggleTabContent('main-nav-map');
  } else {
    _navBar.NavBar.toggleTabContent(selector);
  }

  if (activeNav) {
    if (activeNav === 'main-nav-map-searchhubs' || activeNav === 'main-nav-map-searchNShubs' || activeNav === 'main-nav-map-examples') {
      _navBar.NavBar.tabUpdate(activeNav);
    } else {
      _navBar.NavBar.tabUpdate(selector);
    }
  } else {
    _navBar.NavBar.tabUpdate(selector);
  }
}

// Initializes the static pages by inserting the rendered template into the selected DOM element
//
// @param selector - string DOM selector
// @param template - HTML template
function initStaticPage(selector, template) {
  var componentElem = document.getElementById(selector);
  componentElem.innerHTML = template;
}

var router = new _navigo2.default(homeloc, true);

(0, _utilitys.addMissingStateItems)();
if (window.screen.availWidth < 769) {
  store.setStoreItem('maplayerlist', 'close');
}

router.on({
  '/': function _(params, query) {
    initMapComponent();
    setNavBars('main-nav-map');
  },
  '/Home': function Home(params, query) {
    initMapComponent();
    setNavBars('main-nav-map');
  },
  '/Map': function Map(params, query) {
    initMapComponent();
    setNavBars('main-nav-map');
  }
});

// implement later need to make the tab content area dynamic also
router.notFound(function (query) {
  _navBar.NavBar.resetTabContent();
  _navBar.NavBar.toggleTabContent('main-nav-notfound');

  // initialize 404
  initStaticPage('notfound-holder', _notfound2.default);
});

router.resolve();

// only run if share url has different start nav
if ((0, _utilitys.checkValidObject)(theStartNav)) {
  var elemMain = document.getElementById('main-nav-map');
  if (elemMain) {
    elemMain.click();
  }
  var elemStartNav = document.getElementById(theStartNav);
  if (elemStartNav) {
    elemStartNav.click();
  }
}

/***/ }),

/***/ "./src/scripts/map.js":
/*!****************************!*\
  !*** ./src/scripts/map.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Map = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _leaflet = __webpack_require__(/*! leaflet */ "./node_modules/leaflet/dist/leaflet-src.js");

var _leaflet2 = _interopRequireDefault(_leaflet);

var _esriLeafletVector = __webpack_require__(/*! esri-leaflet-vector */ "./node_modules/esri-leaflet-vector/dist/esri-leaflet-vector-debug.js");

var Vector = _interopRequireWildcard(_esriLeafletVector);

var _booleanPointInPolygon = __webpack_require__(/*! @turf/boolean-point-in-polygon */ "./node_modules/@turf/boolean-point-in-polygon/dist/es/index.js");

var _booleanPointInPolygon2 = _interopRequireDefault(_booleanPointInPolygon);

var _booleanOverlap = __webpack_require__(/*! @turf/boolean-overlap */ "./node_modules/@turf/boolean-overlap/dist/es/index.js");

var _booleanOverlap2 = _interopRequireDefault(_booleanOverlap);

var _booleanWithin = __webpack_require__(/*! @turf/boolean-within */ "./node_modules/@turf/boolean-within/dist/es/index.js");

var _booleanWithin2 = _interopRequireDefault(_booleanWithin);

var _booleanContains = __webpack_require__(/*! @turf/boolean-contains */ "./node_modules/@turf/boolean-contains/dist/es/index.js");

var _booleanContains2 = _interopRequireDefault(_booleanContains);

var _bboxPolygon = __webpack_require__(/*! @turf/bbox-polygon */ "./node_modules/@turf/bbox-polygon/dist/es/index.js");

var _bboxPolygon2 = _interopRequireDefault(_bboxPolygon);

var _helpers = __webpack_require__(/*! @turf/helpers */ "./node_modules/@turf/helpers/dist/es/index.js");

var _components = __webpack_require__(/*! ./components */ "./src/scripts/components.js");

var _downloadbutton = __webpack_require__(/*! ./downloadbutton */ "./src/scripts/downloadbutton.js");

var _mapConfig = __webpack_require__(/*! ../config/mapConfig */ "./src/config/mapConfig.js");

__webpack_require__(/*! ../css/_custom_leaflet.scss */ "./src/css/_custom_leaflet.scss");

var _store = __webpack_require__(/*! ./store */ "./src/scripts/store.js");

var _utilitys = __webpack_require__(/*! ./utilitys */ "./src/scripts/utilitys.js");

var _map = __webpack_require__(/*! ../templates/map.html */ "./src/templates/map.html");

var _map2 = _interopRequireDefault(_map);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // dependencies

// import { basemapLayer } from 'esri-leaflet';

// may need feature layer latter if store the user generated shapefiles, drawon
// user drawn shapes somehere else if so add this
// import { basemapLayer, featureLayer } from 'esri-leaflet';


// SCSS


// Import custom classess


// import utilities


// Downloaded esri-leaflet-vector to utils directory so the package works with webpack es6
// Must update manually since there are custom changes to the component!
// vector layers not used yet will need to uncomment later
// See github issue https://github.com/Esri/esri-leaflet-vector/issues/31 from tgirgin23
// import * as vector from '../vendor/esri/esri-leaflet-vector/EsriLeafletVector';

// templates


var store = new _store.Store({});

// ESRI Vector base map apikey, should be limited by referer
var EsriVectorMapApiKey = 'AAPKb0069ca2667a401bbcce9543198c30bcaMklq1hJf8ec0M1GgELVjUq8FEOkeQZewv0Qibxj0ooxz5cMFNVLNwaY33tjDi4u';

/**
 * Leaflet Map Component
 * Render map items, and provide user interactivity.
 * @extends Component
 */

var Map = exports.Map = function (_Component) {
  _inherits(Map, _Component);

  /**
   * Map Component Constructor
   * @param { String } placeholderId Element ID to inflate the map into
   * @param { Object } props.events.click Map item click listener
   */
  function Map(mapPlaceholderId, props) {
    _classCallCheck(this, Map);

    var _this = _possibleConstructorReturn(this, (Map.__proto__ || Object.getPrototypeOf(Map)).call(this, mapPlaceholderId, props, _map2.default));

    _this.renderCount = 0;
    _this.basemaploaded = false;
    // set last storage object, it will be overwritten after map is intialized
    _this.restoreStateStore = store.getState();

    // Initialize Leaflet map
    _this.map = _leaflet2.default.map(_this.refs.mapContainer, _mapConfig.mapConfig.mapOptions);

    // adds download data button
    _this.downloadButton = new _downloadbutton.DownloadButton('', { mapComponent: _this.map });

    // not sure why but something changed and I can no longer use maptions for inital zoom
    if (Object.keys(_this.restoreStateStore).length === 0 && _this.restoreStateStore.constructor === Object) {
      _this.map.panTo(_mapConfig.mapConfig.mapDefaults.center);
      _this.map.setZoom(_mapConfig.mapConfig.mapDefaults.zoom);
      _this.saveZoomAndMapPosition();
      store.saveAction('moveend');
    }

    _this.map.zoomControl.setPosition('topleft'); // Position zoom control
    _this.overlayMaps = {}; // Map layer dict (key/value = title/layer)
    _this.value = null; // Store currently selected region
    _this.mapOverlayLayers = {}; // map overlay (wms layer)
    _this.mapStates = ['mapCenter', 'mapZoom', 'mapLayerDisplayStatus', 'mapContainerPoint', 'basemap']; // all the potential map states
    _this.basemap = null;
    _this.basemapLabels = null;

    // add base map
    _this.addBaseMap();

    // force map re-render
    _this.forceMapReRender();
    _this.forceMapReRender();

    _this.addWmsLayers();
    _this.addTileLayers();
    // set the state to manage initial display status of wms "overlay" layers
    store.setStoreItem('mapLayerDisplayStatus', _this.mapOverlayLayers);

    // add spinner element
    Map.addSpinnerElement();

    Map.addRegionNotDisplayedListner();
    return _this;
  }

  // add spinner element to leftlet map panes
  // any user action with map will show the site is working by
  // by displaying a working spinner


  _createClass(Map, [{
    key: 'mapCursorCrosshair',


    // make the map cursor a crosshair
    value: function mapCursorCrosshair() {
      var mapElement = this.map.getContainer();
      mapElement.style.cursor = 'crosshair';
    }

    // make the map cursor a default

  }, {
    key: 'mapCursorDefault',
    value: function mapCursorDefault() {
      var mapElement = this.map.getContainer();
      mapElement.style.cursor = '';
    }

    // saves the current map center and zoom level to state in locat storage

  }, {
    key: 'saveZoomAndMapPosition',
    value: function saveZoomAndMapPosition() {
      store.setStoreItem('mapCenter', this.map.getCenter());
      store.setStoreItem('mapZoom', this.map.getZoom());
    }

    // force map render and setup

  }, {
    key: 'forceMapReRender',
    value: function forceMapReRender() {
      // this ensures the map is full setup.
      // we have issues becuase the map height is 100% and is
      // explicitly set
      _leaflet2.default.Util.requestAnimFrame(this.map.invalidateSize, this.map, !1, this.map._container);
    }

    // change esri basemap

  }, {
    key: 'changeBaseMap',
    value: function changeBaseMap(basemapname) {
      var _this2 = this;

      if (this.basemap) {
        this.map.removeLayer(this.basemap);
      }

      this.basemap = Vector.vectorBasemapLayer('ArcGIS:' + basemapname, { apikey: EsriVectorMapApiKey });
      this.basemap.addTo(this.map);

      store.setStoreItem('basemap', basemapname);

      var labelElem = document.getElementById('btn-basemap-label');

      if (labelElem) {
        labelElem.innerHTML = Map.makeHumanBaseMapName(basemapname);
      }

      this.basemap.on('load', function () {
        _this2.map.fireEvent('basemaploaded');
        _this2.basemaploaded = true;
        store.setStoreItem('working_basemap', false);
        (0, _utilitys.spinnerOff)('load');
        _this2.hideLabelsZooomOut();
      });

      // add new event to fire when on base map is in process of loading
      this.basemap.on('loading', function () {
        _this2.map.fireEvent('basemaploading');
        store.setStoreItem('working_basemap', true);
      });
    }
  }, {
    key: 'addBaseMap',


    // adds leaflet base map defined in mapConfig.js
    value: function addBaseMap() {
      var _this3 = this;

      var basemap = _mapConfig.mapConfig.ESRIVectorBasemap.name;
      this.basemap = Vector.vectorBasemapLayer('ArcGIS:' + basemap, { apikey: EsriVectorMapApiKey });
      this.basemap.addTo(this.map);

      store.setStoreItem('basemap', basemap);

      // add new event to check on base map has completed uploading
      //  map will not initialize settings untill this has completed
      this.basemap.on('load', function () {
        _this3.map.fireEvent('basemaploaded');
        _this3.basemaploaded = true;
        store.setStoreItem('working_basemap', false);
        (0, _utilitys.spinnerOff)('load');
      });

      // add new event to fire when on base map is in process of loading
      this.basemap.on('loading', function () {
        _this3.map.fireEvent('basemaploading');
        store.setStoreItem('working_basemap', true);
      });
    }

    // iterate and add leaflet tile layers from  mapconfig.js
    // Iterate over each wms map layer and add them to the map

  }, {
    key: 'addTileLayers',
    value: function addTileLayers() {
      var _this4 = this;

      // Adds wms layers
      // May switch this out for tiled s3 layers or tile esri layers later
      var TMSLayers = _mapConfig.mapConfig.TMSLayers;

      // Iterate over each wms map layer and add them to the map

      TMSLayers.forEach(function (layer) {
        var tileLayer = _leaflet2.default.tileLayer(layer.url, {
          tms: layer.tms,
          id: layer.id,
          layers: layer.layer,
          crs: layer.crs,
          opacity: layer.opacity,
          attribution: layer.attribution,
          tileSize: layer.tileSize,
          transparent: layer.transparent,
          // zIndex: 10, // layer.zIndex,
          maxNativeZoom: layer.maxNativeZoom
        });

        // Current leaflet layer object
        var obj = _defineProperty({}, layer.id, tileLayer);

        // add all tile load handlers
        Map.handleAlllTileHanlders(tileLayer);

        // set inital display status
        var mapDisplayLayersObj = _defineProperty({}, layer.id, false);

        // merge map overlay (wms layers) objects display status
        Object.assign(_this4.mapOverlayLayers, mapDisplayLayersObj);

        // Merge current layer into overlayMaps layers object
        Object.assign(_this4.overlayMaps, obj);
      });
    }

    // iterate and add leaflet tile layers from  mapconfig.js
    // Iterate over each wms map layer and add them to the map

  }, {
    key: 'addWmsLayers',
    value: function addWmsLayers() {
      var _this5 = this;

      // Adds wms layers
      // May switch this out for tiled s3 layers or tile esri layers later
      var WMSLayers = _mapConfig.mapConfig.WMSLayers;

      // Iterate over each wms map layer and add them to the map

      WMSLayers.forEach(function (layer) {
        var tileLayer = _leaflet2.default.tileLayer.wms(layer.url, {
          id: layer.id,
          layers: layer.layer,
          crs: layer.crs,
          format: layer.format,
          opacity: layer.opacity,
          attribution: layer.attribution,
          tileSize: layer.tileSize,
          transparent: layer.transparent,
          zIndex: layer.zIndex
        });

        // Current leaflet layer object
        var obj = _defineProperty({}, layer.id, tileLayer);

        // add all tile load handlers
        Map.handleAlllTileHanlders(tileLayer);

        // set inital display status
        var mapDisplayLayersObj = _defineProperty({}, layer.id, false);

        // merge map overlay (wms layers) objects display status
        Object.assign(_this5.mapOverlayLayers, mapDisplayLayersObj);

        // Merge current layer into overlayMaps layers object
        Object.assign(_this5.overlayMaps, obj);
      });
    }

    // tile load handler
    // @param { Object } - tileLayer the leaflet tile layer to we adding a handler for

  }, {
    key: 'zoomInAndOut',


    // force the map to redraw by zooming in than out.
    // this ensurese leaflet will intialize all the tile layers
    // and ensures leaflet with align the tile layers properly
    value: function zoomInAndOut() {
      /**
       * Yes I am zooming in then zooming out. But leaflets tiles
       * do not setup with fully with a dynamic map container (set to 100% height.)
       * and the overlays are offset with intial draw. This zoom in zoom out
       * forces leaflet to Render everything correctly
       */
      this.map.zoomOut(1);
      this.map.zoomIn(1);
      return true;
    }

    // map move end map handler
    // https://leafletjs.com/reference-1.3.0.html#map-moveend

  }, {
    key: 'mapMoveEndHandler',
    value: function mapMoveEndHandler() {
      var _this6 = this;

      this.map.on('moveend', function (event) {
        _this6.saveZoomAndMapPosition();
        store.saveAction('moveend');
        _this6.hideLabelsZooomOut();
        // uncomment to get console of center and extent helpful for region extents
        // console.log('center',  [this.map.getCenter().wrap().lng,
        //   this.map.getCenter().wrap().lat] )
        // console.log('mapBBox',
        //   this.map.wrapLatLngBounds(this.map.getBounds()).toBBoxString().split(',').map(x => +x))
      });
    }

    // check if map's center is in a regions extent

  }, {
    key: 'inRegion',
    value: function inRegion() {
      // get mapconfig so we can check all regions
      var zoomRegions = _mapConfig.mapConfig.zoomRegions;

      var doit = true;

      // check if map is initializeing for the first time
      try {
        this.map.getBounds();
      } catch (err) {
        doit = false;
      }

      if (doit) {
        // the current map extent
        var mapBBox = (0, _bboxPolygon2.default)(this.map.wrapLatLngBounds(this.map.getBounds()).toBBoxString().split(',').map(function (x) {
          return +x;
        }));

        // the current map center point
        var mapCenterPoint = (0, _helpers.point)([this.map.getCenter().wrap().lng, this.map.getCenter().wrap().lat]);

        // iterate all regions from config and check if current map cetner
        // is within the regions extent
        zoomRegions.forEach(function (region) {
          // the regions extent
          var regionPoly = (0, _bboxPolygon2.default)(region.extent);

          // is the the current map cetner point within the regions extent
          // const isRegion = booleanPointInPolygon(mapCenterPoint, poly);
          var isRegion = (0, _booleanOverlap2.default)(regionPoly, mapBBox) || (0, _booleanContains2.default)(regionPoly, mapBBox) || (0, _booleanWithin2.default)(regionPoly, mapBBox) || (0, _booleanPointInPolygon2.default)(mapCenterPoint, regionPoly);

          // add boolean
          region.inregion = isRegion; // eslint-disable-line
        });
      }

      // return new regions object
      return zoomRegions;
    }

    // create messages for any region that is  within the curent map extent
    // and is not the current region, so the user knows the regional data exists

  }, {
    key: 'regionAwareMessages',
    value: function regionAwareMessages(regions) {
      //  get maps current region
      var currentRegion = store.getStateItem('region');
      var mapRegions = [];

      // this does nothing don't want lint static errors
      var cnt = this.renderCount;
      if (cnt) {
        this.renderCount = cnt;
      }

      // iterate all regions from config and check if current map cetner
      // is within the regions extent
      regions.map(function (region) {
        if (currentRegion !== region.region && region.inregion) {
          mapRegions.push(region.label);
        }
        return mapRegions;
      });

      // only trigger the an event if there are regions on the map that are not the current region
      if (mapRegions.length > 0) {
        var regionnotdisplayedEvent = new CustomEvent('regionnotdisplayed', { detail: mapRegions.join() });
        window.dispatchEvent(regionnotdisplayedEvent);
      }
    }

    // addds listener for when there is a region to be displayed.

  }, {
    key: 'hideLabelsZooomOut',


    // hides labels when users zoom out
    // hide area labels when user zooms out
    value: function hideLabelsZooomOut() {
      var _this7 = this;

      this.map.eachLayer(function (layer) {
        if (_this7.map.getZoom() <= 10) {
          document.querySelector('.leaflet-tooltip-pane').classList.add('d-none');
        } else {
          document.querySelector('.leaflet-tooltip-pane').classList.remove('d-none');
        }
      });
    }

    // map zoom end map handler
    // https://leafletjs.com/reference-1.3.0.html#map-zoomend

  }, {
    key: 'mapZoomEndHandler',
    value: function mapZoomEndHandler() {
      var _this8 = this;

      this.map.on('zoomend', function (event) {
        _this8.saveZoomAndMapPosition();
        store.saveAction('zoomend');
        _this8.hideLabelsZooomOut();
      });
    }

    // map double click map handler
    // https://leafletjs.com/reference-1.3.0.html#map-dblclick

  }, {
    key: 'mapDoubleClickHandler',
    value: function mapDoubleClickHandler() {
      var _this9 = this;

      this.map.on('dblclick', function (event) {
        _this9.saveZoomAndMapPosition();
        store.saveAction('dblclick');
      });
    }

    // map keypress map handler
    // https://leafletjs.com/reference-1.3.0.html#map-keypress

  }, {
    key: 'mapKeyPressHandler',
    value: function mapKeyPressHandler() {
      var _this10 = this;

      this.map.on('keypress', function (event) {
        _this10.saveZoomAndMapPosition();
        store.saveAction('keypress');
      });
    }

    // Add map listeners in function so we can call it from index or setup and we
    // only update state store after map is intialized.

  }, {
    key: 'addMapEventListners',
    value: function addMapEventListners() {
      // move end handler
      this.mapMoveEndHandler();

      // zoom end handler
      this.mapZoomEndHandler();

      // double click handler
      this.mapDoubleClickHandler();

      // key press handlers
      this.mapKeyPressHandler();
    }

    // check if should restore the map state

  }, {
    key: 'toggleVisLayerOff',


    // Toggle map layer visibility for nav swithcing
    value: function toggleVisLayerOff(layerName) {
      store.saveAction('maplayertoggle');
      store.setStoreItem('working_basemap', true);
      (0, _utilitys.spinnerOn)();
      var layer = this.overlayMaps[layerName];
      if (this.map.hasLayer(layer)) {
        this.map.removeLayer(layer);
      }
      store.setStoreItem('working_basemap', false);
    }

    // Toggle map layer visibility for nav swithcing

  }, {
    key: 'toggleVisLayerOn',
    value: function toggleVisLayerOn(layerName) {
      store.saveAction('maplayertoggle');
      store.setStoreItem('working_basemap', true);
      (0, _utilitys.spinnerOn)();
      var layer = this.overlayMaps[layerName];
      store.setStoreItem('working_basemap', false);
      (0, _utilitys.spinnerOn)();
      this.map.addLayer(layer);
    }

    // Toggle map layer visibility
    // this needs to be made more modular but not sure
    // ho do that yet

  }, {
    key: 'toggleLayer',
    value: function toggleLayer(layerName) {
      var dostat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      store.saveAction('maplayertoggle');
      store.setStoreItem('working_basemap', true);
      (0, _utilitys.spinnerOn)();
      var mapDisplayLayersObj = {};
      var layer = this.overlayMaps[layerName];
      if (this.map.hasLayer(layer)) {
        this.map.removeLayer(layer);
        if (dostat) {
          // ga event action, category, label
          (0, _utilitys.googleAnalyticsEvent)('click', 'maplayerlist', 'layerToggle off ' + layerName);
        }
        mapDisplayLayersObj = _defineProperty({}, layerName, false);
      } else {
        store.setStoreItem('working_basemap', true);
        (0, _utilitys.spinnerOn)();
        this.map.addLayer(layer);
        mapDisplayLayersObj = _defineProperty({}, layerName, true);
        // check region
        var region = this.inRegion();
        // create region location aware region messages
        this.regionAwareMessages(region);
        if (dostat) {
          // ga event action, category, label
          (0, _utilitys.googleAnalyticsEvent)('click', 'maplayerlist', 'layerToggle on ' + layerName);
        }
      }
      Object.assign(this.mapOverlayLayers, mapDisplayLayersObj);
      store.setStoreItem('mapLayerDisplayStatus', this.mapOverlayLayers);
    }

    /**
     *  recenters map accoring to a lat long
     *  @param { Object } - ex {lat: 32.76966654128219, lng: -79.93103027343751}
     *
     *  const ele.addEventListener('click', (e) => {
     *      this.setMapCenter({lat: 32.76966654128219, lng: -79.93103027343751});
     *   })
     */

  }, {
    key: 'setMapCenter',
    value: function setMapCenter(value) {
      if (!(0, _utilitys.checkValidObject)(value)) {
        return value;
      }
      this.map.panTo(value);
      return value;
    }

    /**
     *  zooms map into zoom level
     *  @param { integer }  integer usuall 1-18
     *
     *  const ele.addEventListener('click', (e) => {
     *      this.setMapZoom(5);
     *   })
     */

  }, {
    key: 'setMapZoom',
    value: function setMapZoom(value) {
      if (!(0, _utilitys.checkValidObject)(value)) {
        return value;
      }
      this.map.setZoom(value);
      return value;
    }

    /**
     *  Force a map click event without user interaction
     *  @param { Object }  {lat: 32.76966654128219, lng: -79.93103027343751}
     *
     *      this.setMapClick({lat: 32.76966654128219, lng: -79.93103027343751});
     *
     *
     */

  }, {
    key: 'setMapClick',
    value: function setMapClick(value) {
      if (!(0, _utilitys.checkValidObject)(value)) {
        return value;
      }
      var latlng = _leaflet2.default.latLng([value.lat, value.lng]);
      this.map.fireEvent('click', { latlng: latlng });
      return value;
    }

    /**
     *  Force a map layer toggle event without user interaction
     *  @param { string }  layer id examples are SA_ExposureIndex, SA_AssetIndex, SA_ThreatIndex
     *
     *  const ele.addEventListener('click', (e) => {
     *      this.setLayerStatus('SA_ThreatIndex');
     *   })
     *
     */

  }, {
    key: 'restoreMapZoom',


    // restores map zoom level
    // @param { integer }  zoomLevel integer values depends on min and max zoom defined
    // in mapConfig.js  usually 1-20 I am setting to   4 -16
    value: function restoreMapZoom(zoomLevel) {
      // check the mapdisplay variable and toggle layers on when state
      if ((0, _utilitys.checkValidObject)(zoomLevel)) {
        // handle zoom when only zoom object set
        this.setMapZoom(zoomLevel);
        return true;
      }
      return false;
    }

    // restores map center
    // @param { object }  mapCenter  {lat: 32.76966654128219, lng: -79.93103027343751}

  }, {
    key: 'restoreMapCenter',
    value: function restoreMapCenter(mapCenter) {
      // check the mapdisplay variable and toggle layers on when state
      if ((0, _utilitys.checkValidObject)(mapCenter)) {
        // handle zoom when only mapCenter object set
        this.setMapCenter(mapCenter);
        return true;
      }
      return false;
    }

    /**
     *  restore mapComponent when state exists
     *
     *  const ele.addEventListener('click', (e) => {
     *      this.restoreState();
     *   })
     *
     */

  }, {
    key: 'restoreMapState',
    value: function restoreMapState() {
      // check if last storage object exists and is not empty
      if (Object.keys(this.restoreStateStore).length === 0 && this.restoreStateStore.constructor === Object) {
        return false;
      }

      // get last storage object
      store.setStateFromObject(this.restoreStateStore);
      var state = store.getState();

      // Instantiate store variables. Otherwise the order will cause
      // the startup position to shift occasionally
      var mapZoom = null;
      var mapCenter = null;
      var mapLayerDisplayStatus = null;
      var basemap = null;

      // iterate over the state objects and set the store variables
      // iterating so we can run checkes that the object exists in
      // the state (local storage)
      this.mapStates.forEach(function (stateItem) {
        var stateObj = state[stateItem];
        if (stateItem === 'mapCenter') {
          mapCenter = stateObj;
        } // recenter from store
        if (stateItem === 'mapZoom') {
          mapZoom = stateObj;
        } // reset map zoom from store
        if (stateItem === 'mapLayerDisplayStatus') {
          mapLayerDisplayStatus = stateObj;
        } // set layer display
        if (stateItem === 'basemap') {
          basemap = stateObj;
        } // set basemap
      });

      // ensure basemap is set use default fromn config
      if (!basemap) {
        basemap = _mapConfig.mapConfig.ESRIVectorBasemap.name;
      }
      // restore or set the Display status of tile layers
      Map.restoreMapDisplayStatus(mapLayerDisplayStatus);

      this.restoreMapZoom(mapZoom);
      this.restoreMapCenter(mapCenter);
      this.changeBaseMap(basemap);
      store.setStoreItem('mapZoom', mapZoom);
      store.setStoreItem('mapCenter', mapCenter);
      store.setStoreItem('basemap', basemap);

      return true;
    }
  }], [{
    key: 'addSpinnerElement',
    value: function addSpinnerElement() {
      var workingElement = _leaflet2.default.DomUtil.create('div', 'position-relative d-flex align-items-center justify-content-center leaflet-working d-none', _leaflet2.default.DomUtil.get('map'));
      workingElement.innerHTML = '<i id="map-working" class="fa fa-spinner fa-spin d-none"></i>';
      _leaflet2.default.DomUtil.toFront(workingElement);
      _leaflet2.default.DomEvent.disableClickPropagation(workingElement);
    }
  }, {
    key: 'makeHumanBaseMapName',
    value: function makeHumanBaseMapName(baseMapName) {
      if (baseMapName === 'DarkGray') {
        return 'Dark Gray';
      }
      if (baseMapName === 'Terrain') {
        return 'Terrain';
      }
      if (baseMapName === 'Imagery') {
        return 'Imagery';
      }
      if (baseMapName === 'Topographic') {
        return 'Topographic';
      }
      if (baseMapName === 'Streets') {
        return 'Streets';
      }
      return 'Dark Gray';
    }
  }, {
    key: 'handleWMSLoad',
    value: function handleWMSLoad(tileLayer) {
      tileLayer.on('load', function () {
        store.setStoreItem('working_basemap', false);
        (0, _utilitys.spinnerOff)('handleWMSLoad');
      });
    }

    // tile unload handler
    // @param { Object } - tileLayer the leaflet tile layer to we adding a handler for

  }, {
    key: 'handleWMSUnload',
    value: function handleWMSUnload(tileLayer) {
      tileLayer.on('unload', function () {
        store.setStoreItem('working_basemap', false);
        (0, _utilitys.spinnerOff)('handleWMSUnload');
      });
    }

    // tile load error handler
    // @param { Object } - tileLayer the leaflet tile layer to we adding a handler for

  }, {
    key: 'handleWMSError',
    value: function handleWMSError(tileLayer) {
      tileLayer.on('error', function () {
        store.setStoreItem('working_basemap', false);
        (0, _utilitys.spinnerOff)('handleWMSError');
      });
    }

    // there are two types of unloads with tile layers
    // see leaflet documenation for differences
    // https://leafletjs.com/reference-1.3.0.html#gridlayer-tileunload
    // tile load error handler
    // @param { Object } - tileLayer the leaflet tile layer to we adding a handler for

  }, {
    key: 'handleTileUnload',
    value: function handleTileUnload(tileLayer) {
      tileLayer.on('tileunload', function () {
        store.setStoreItem('working_basemap', false);
        (0, _utilitys.spinnerOff)('handleTileUnload');
      });
    }

    // there are two types of errors with tile layers
    // see leaflet documenation for differences
    // https://leafletjs.com/reference-1.3.0.html#gridlayer-tileerror
    // tile load error handler
    // @param { Object } - tileLayer the leaflet tile layer to we adding a handler for

  }, {
    key: 'handleTileError',
    value: function handleTileError(tileLayer) {
      tileLayer.on('tileerror', function () {
        store.setStoreItem('working_basemap', false);
        (0, _utilitys.spinnerOff)('handleTileError');
      });
    }

    // add handler for loading for tile layer
    // @param { Object } - tileLayer the leaflet tile layer to we adding a handler for

  }, {
    key: 'handleAlllTileHanlders',
    value: function handleAlllTileHanlders(tileLayer) {
      // add seperate map layer handlers
      Map.handleWMSLoad(tileLayer);
      Map.handleWMSUnload(tileLayer);
      Map.handleWMSError(tileLayer);
      Map.handleTileUnload(tileLayer);
      Map.handleTileError(tileLayer);
    }
  }, {
    key: 'addRegionNotDisplayedListner',
    value: function addRegionNotDisplayedListner() {
      window.addEventListener('regionnotdisplayed', function (e) {
        // // add tool tip
        // document.getElementById('btn-zoomregion').setAttribute('title', '');
        // $(() => {
        //   $('#btn-zoomregion').popover({
        //     trigger: 'manual',
        //     placement: 'bottom',
        //     content: `The map boundaries include ${e.detail}.
        // If you want to view data associated with ${e.detail} you will need to switch the region.`,
        //     title: '',
        //     template: '<div class="popover location-aware-messsage" role="tooltip">
        // <div class="arrow"></div><h3 class="popover-header"></h3>
        // <div class="popover-body"></div></div>'
        //   });
        //
        //   // show the a loation aware message saying the region available but not activated
        //   $('#btn-zoomregion').popover('show');
        //   // dismiss on click anywhere or after 5 seconds
        //   window.addEventListener('click', clicke => $('#btn-zoomregion').popover('dispose'));
        //   setTimeout(() => { $('#btn-zoomregion').popover('dispose'); }, 5000);
        // });
      });
    }
  }, {
    key: 'shouldRestore',
    value: function shouldRestore(props) {
      if (props === undefined || props.restore === undefined) {
        return false;
      }

      return props.restore;
    }
  }, {
    key: 'setLayerStatus',
    value: function setLayerStatus(value) {
      var layerToggleElement = document.getElementById(value + '-toggle');
      if (layerToggleElement) {
        var event = new Event('click');
        layerToggleElement.dispatchEvent(event);
        layerToggleElement.checked = !layerToggleElement.checked;
      }
    }

    // restores map display status..
    // ensures the vissibility of each tile layer (wms)
    // matches the last state the user set
    // @param { string }  layer id examples are SA_ExposureIndex, SA_AssetIndex, SA_ThreatIndex

  }, {
    key: 'restoreMapDisplayStatus',
    value: function restoreMapDisplayStatus(mapLayerDisplayStatus) {
      // check the mapdisplay variable and toggle layers on when state
      // says to display = true
      if (mapLayerDisplayStatus !== undefined) {
        if (mapLayerDisplayStatus !== null) {
          Object.keys(mapLayerDisplayStatus).forEach(function (key) {
            if (mapLayerDisplayStatus[key]) {
              Map.setLayerStatus(key);
            }
          });
          return true;
        }
      }
      return false;
    }
  }]);

  return Map;
}(_components.Component);

/***/ }),

/***/ "./src/scripts/mapinfo.js":
/*!********************************!*\
  !*** ./src/scripts/mapinfo.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapInfo = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _leaflet = __webpack_require__(/*! leaflet */ "./node_modules/leaflet/dist/leaflet-src.js");

var _leaflet2 = _interopRequireDefault(_leaflet);

var _mapinfo = __webpack_require__(/*! ../templates/mapinfo.html */ "./src/templates/mapinfo.html");

var _mapinfo2 = _interopRequireDefault(_mapinfo);

var _components = __webpack_require__(/*! ./components */ "./src/scripts/components.js");

var _store = __webpack_require__(/*! ./store */ "./src/scripts/store.js");

var _identifyAPI = __webpack_require__(/*! ./identifyAPI */ "./src/scripts/identifyAPI.js");

var _utilitys = __webpack_require__(/*! ./utilitys */ "./src/scripts/utilitys.js");

var _zonalStats = __webpack_require__(/*! ./zonalStats */ "./src/scripts/zonalStats.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // dependencies


// default map template


var config = {
  fieldMaps: {
    exposure: 'ns_exposure',
    asset: 'ns_asset',
    threat: 'ns_threat',
    fishandwildlife: 'ns_fishandwildlife',
    hubs: 'ns_hubs'
  },
  agolOutFields: ['TARGET_FID', 'exposure', 'asset', 'threat', 'aquatic', 'hubs']
};

// required for bootstrap
window.$ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
// required for tooltip, popup...
window.Popper = __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js");

window.jQuery = window.$;

// // tooltip and popover require javascript side modification to enable them (new in Bootstrap 4)
// // use tooltip and popover components everywhere
// $(() => {
//   $('[data-toggle="tooltip"]').tooltip({
//     trigger: 'hover focus'
//   });
//
//   $('[data-toggle="popover"]').popover();
// });

var store = new _store.Store({});

/**
* handles the identify interactions on the map
* dosen't not deal with lambda api call but it does make that call
* it does deal with the response information
* and generally handles adding any shapes to the map.
*/

var MapInfo = exports.MapInfo = function (_Component) {
  _inherits(MapInfo, _Component);

  function MapInfo(placeholderId, props) {
    _classCallCheck(this, MapInfo);

    var _this = _possibleConstructorReturn(this, (MapInfo.__proto__ || Object.getPrototypeOf(MapInfo)).call(this, placeholderId, props, _mapinfo2.default));

    var mapComponent = props.mapComponent;


    _this.map = mapComponent.map;
    _this.mapComponent = mapComponent;

    // this.addMapInformationControl(this.map);

    _this.IdentifyAPI = new _identifyAPI.IdentifyAPI();

    // setup marker layer which is not set yet.
    _this.marker = undefined;

    // $(() => {
    //   $('#mapinfodata [data-toggle="tooltip"]').tooltip({ trigger: 'hover focus' });
    // });

    window.addEventListener('aboutNavChange', function (e) {
      // remove from state
      var activeNav = store.getStateItem('activeNav');
      var mapclick = {};
      var mapinfo = {};

      if (activeNav === 'main-nav-map-searchNShubs') {
        // check the mapclick v
        mapclick = store.getStateItem('mapClickns');
        mapinfo = store.getStateItem('mapinfons');
      } else {
        // check the mapclick v
        mapclick = store.getStateItem('mapClick');
        mapinfo = store.getStateItem('mapinfo');
      }

      _this.removeMapMarker();

      if (activeNav === 'main-nav-map-searchNShubs') {
        // check the mapclick v
        store.setStoreItem('mapClickns', mapclick);
        store.setStoreItem('mapinfons', mapinfo);
      } else {
        // check the mapclick v
        store.setStoreItem('mapClick', mapclick);
        store.setStoreItem('mapinfo', mapinfo);
      }

      _this.restoreMapInfoState();
    });
    return _this;
  }

  // add Identify control to leaflet map


  _createClass(MapInfo, [{
    key: 'addMapInformationControl',
    value: function addMapInformationControl(leafletmap) {
      _leaflet2.default.Control.Watermark = _leaflet2.default.Control.extend({
        onAdd: MapInfo.mapInfoMakerOnAddHandler,

        // Nothing to do here
        onRemove: MapInfo.mapInfoMakerOnRemoveHandler
      });

      _leaflet2.default.control.watermark = function (opts) {
        return new _leaflet2.default.Control.Watermark(opts);
      };

      _leaflet2.default.control.watermark({ position: 'topleft' }).addTo(leafletmap);

      // get btn for mapinfo add click event
      var leafletControlElement = document.querySelector('.btn-mapinfo-holder');
      leafletControlElement.addEventListener('click', this.mapInformationClickHandler.bind(this));
    }

    // mapinfo (identify) control (button) on add function.
    // fires when the control (button) is removed

  }, {
    key: 'mapInformationClickHandler',


    // map info click handler
    value: function mapInformationClickHandler(ev) {
      this.addMapClickIdentifyClickHandler();
      // ga event action, category, label
      (0, _utilitys.googleAnalyticsEvent)('click', 'button', 'mapinfo');

      // remove previous marker point
      if (this.marker !== undefined) {
        this.mapComponent.map.removeLayer(this.marker);
      }

      // make the map cursor cross hairs
      // this.mapComponent.mapCursorCrosshair();

      // // remove from state
      // const activeNav = store.getStateItem('activeNav');
      // if (activeNav === 'main-nav-map-searchNShubs') {
      //   // check the mapclick v
      //   store.removeStateItem('mapinfons');
      // } else {
      //   // check the mapclick v
      //   store.removeStateItem('mapinfo');
      // }
    }

    // mapinfo (identify) control (button) on add function.
    // fires when the control (button) is added

  }, {
    key: 'restoreMapInfoState',


    // restore the state form map info/identify
    value: function restoreMapInfoState() {
      var activeNav = store.getStateItem('activeNav');

      // check the mapclick variable. if map clicked restore the state
      var mapClick = {};
      if (activeNav === 'main-nav-map-searchNShubs') {
        mapClick = store.getStateItem('mapClickns');
      } else {
        mapClick = store.getStateItem('mapClick');
      }

      // ensure the mapclick state is a valid object
      if ((0, _utilitys.checkValidObject)(mapClick)) {
        this.mapComponent.setMapClick(mapClick);
        var IdentifyJsonFromStore = {};
        if (activeNav === 'main-nav-map-searchNShubs') {
          IdentifyJsonFromStore = store.getStateItem('mapinfons');
        } else {
          IdentifyJsonFromStore = store.getStateItem('mapinfo');
        }
        // check if mapinfo data is store use
        // data in store over going to api again
        this.retreiveMapClick((0, _utilitys.checkValidObject)(IdentifyJsonFromStore));
      }
    }

    // remove the map maker, Identify
    // point.

  }, {
    key: 'removeMapMarker',
    value: function removeMapMarker() {
      // remove previous marker point
      if (this.marker !== undefined) {
        this.map.removeLayer(this.marker);
      }
    }

    // re-instiate mapClick indentify
    // adding not as hanlder callback so I can use this (class) calls
    // would be better to handle this as a traditional callback

  }, {
    key: 'addMapClickIdentifyClickHandler',
    value: function addMapClickIdentifyClickHandler() {
      var _this2 = this;

      // click
      this.map.on('click', function (ev) {
        return null; // eslint-disable-line
        // remove old maker if it exists
        // this.marker is defined at class creation
        _this2.removeMapMarker(); // eslint-disable-line

        // save the map action to state store
        store.saveAction('click');

        // save the mapclick location to the state store
        var activeNav = store.getStateItem('activeNav');
        if (activeNav === 'main-nav-map-searchNShubs') {
          // check the mapclick v
          store.setStoreItem('mapClickns', ev.latlng);
        } else {
          // check the mapclick v
          store.setStoreItem('mapClick', ev.latlng);
        }

        // ga event action, category, label
        (0, _utilitys.googleAnalyticsEvent)('click', 'map', 'mapinfo');

        // if there was a point retrieve the information from the
        // lambda api function
        if (ev.containerPoint !== undefined) {
          _this2.retreiveMapClick(false);
        }
      });
    }
  }, {
    key: 'retreiveMapClick',


    // Load map data from the API
    // todo what else can be seperated out to make functions more
    // testable.
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(restore) {
        var activeNav, mapClick, IdentifyJson, RemapedIdentifyJson, myIcon, doc, region, popup;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt('return', null);

              case 9:
                activeNav = store.getStateItem('activeNav');
                // get the map click location from the store

                mapClick = {};

                if (activeNav === 'main-nav-map-searchNShubs') {
                  mapClick = store.getStateItem('mapClickns');
                } else {
                  mapClick = store.getStateItem('mapClick');
                }

                // ensure the mapclick is valid has information we can use

                if ((0, _utilitys.checkValidObject)(mapClick)) {
                  _context.next = 18;
                  break;
                }

                store.setStoreItem('working_mapinfo', false);
                (0, _utilitys.spinnerOff)('retreiveMapClick checkValidObject mapClick');
                this.mapComponent.mapCursorDefault();
                // must click the i button to do this action we will have to remove this
                // if we want users to always be able to click the map and do mapinfo
                this.mapComponent.map.off('click');
                return _context.abrupt('return', false);

              case 18:
                IdentifyJson = {};
                RemapedIdentifyJson = {};
                // use store data if exists otherwise use lambda function

                if (!restore) {
                  _context.next = 25;
                  break;
                }

                // store data
                if (activeNav === 'main-nav-map-searchNShubs') {
                  RemapedIdentifyJson = store.getStateItem('mapinfons');
                } else {
                  RemapedIdentifyJson = store.getStateItem('mapinfo');
                }
                // ga event action, category, label
                (0, _utilitys.googleAnalyticsEvent)('call', 'store', 'IdentifyAPI');
                _context.next = 30;
                break;

              case 25:
                _context.next = 27;
                return this.IdentifyAPI.getIdentifySummary(mapClick.lat, mapClick.lng);

              case 27:
                IdentifyJson = _context.sent;


                if (activeNav === 'main-nav-map-searchNShubs') {
                  RemapedIdentifyJson = MapInfo.remapFields(IdentifyJson);
                  store.setStoreItem('mapinfons', RemapedIdentifyJson);
                } else {
                  RemapedIdentifyJson = IdentifyJson;
                  store.setStoreItem('mapinfo', RemapedIdentifyJson);
                }

                // ga event action, category, label
                (0, _utilitys.googleAnalyticsEvent)('call', 'lambda', 'IdentifyAPI');

              case 30:

                // get the custom map marker icon
                myIcon = MapInfo.createMapInfoIcon();

                // add the marker at the clicked point

                this.addMaker(mapClick, myIcon);

                // get the mapinfo (identify) html document and udpate
                // the content with returned values
                doc = MapInfo.getDocument();
                region = store.getStateItem('region');

                // build the map info (identify) data

                MapInfo.buildMapInfoConent(RemapedIdentifyJson, doc, region);

                // bind the html to the leaflet marker and open as leaflet popup
                popup = this.bindPopup(this.marker, doc);

                // toggle spinner css from utility.js

                store.setStoreItem('working_mapinfo', false);

                // add the a click handler to popup to remove the
                // the point marker from the map and state
                this.addRemoveMarkerOnClick(popup);
                (0, _utilitys.spinnerOff)('retreiveMapClick complete');
                this.mapComponent.mapCursorDefault();
                // must click the i button to do this action we will have to remove this
                // if we want users to always be able to click the map and do mapinfo
                this.mapComponent.map.off('click');
                return _context.abrupt('return', true);

              case 42:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function retreiveMapClick(_x) {
        return _ref.apply(this, arguments);
      }

      return retreiveMapClick;
    }()

    // build content from identify api (lamda function)
    // @param { Object } IdentifyJson is json data returned from api
    // @param { Object } doc is html document (identify/mapinfo html element)
    //

  }, {
    key: 'bindPopup',


    // bind popup to marker
    // @param { Object } doc is html document (identify/mapinfo html element)
    value: function bindPopup(marker, doc) {
      var mapinformationel = doc.getElementById('map_info_list');
      var tooltipContent = _leaflet2.default.Util.template('');
      if (mapinformationel) {
        tooltipContent = _leaflet2.default.Util.template(mapinformationel.outerHTML);
      }

      var popup = marker.bindPopup(tooltipContent, {
        autoClose: false,
        closeOnClick: false,
        opacity: 0.9,
        autoPan: false,
        className: 'map-information-popup'
      }).openPopup().setLatLng(marker.getLatLng());

      // add labels for assessabbility
      var SearchLocationsCloseButtonElement = document.querySelector('.map-information-popup .leaflet-popup-close-button');
      SearchLocationsCloseButtonElement.setAttribute('aria-label', 'Close Map Information');
      SearchLocationsCloseButtonElement.setAttribute('title', 'Close Map Information');

      this.map.addEventListener('popupopen', function (e) {
        var removeUserAreaEvent = new CustomEvent('leafletpopupopen');
        window.dispatchEvent(removeUserAreaEvent);
      });

      return popup;
    }

    // creates custom icon and adds css class for styling

  }, {
    key: 'addMaker',


    // add maker for identify/mapInfo
    // @param { Object } mapclick object lat long
    // @param { Object } icon leaflet icon used as maker on map
    value: function addMaker(mapClick, icon) {
      this.marker = _leaflet2.default.marker([mapClick.lat, mapClick.lng], { icon: icon });
      this.map.addLayer(this.marker);
    }

    // add remove popup when use closes the popup
    // adding not as hanlder callback so I can use this (class) calls
    // would be better to handle this as a traditional callback
    // @param { Object } popup to add popupclose event too.

  }, {
    key: 'addRemoveMarkerOnClick',
    value: function addRemoveMarkerOnClick(popup) {
      var _this3 = this;

      popup.on('popupclose', function () {
        // remove previous marker point
        if (_this3.marker !== undefined) {
          _this3.map.removeLayer(_this3.marker);
        }

        // remove from state
        var activeNav = store.getStateItem('activeNav');
        if (activeNav === 'main-nav-map-searchNShubs') {
          // check the mapclick v
          store.removeStateItem('mapClickns');
          store.removeStateItem('mapinfons');
        } else {
          // check the mapclick v
          store.removeStateItem('mapClick');
          store.removeStateItem('mapinfo');
        }
      });
    }

    // create a html dom element for the mapinfo html template

  }], [{
    key: 'mapInfoMakerOnRemoveHandler',
    value: function mapInfoMakerOnRemoveHandler(map) {
      // Nothing to do here yet
      return null;
    }
  }, {
    key: 'mapInfoMakerOnAddHandler',
    value: function mapInfoMakerOnAddHandler() {
      // setup custom style for mapinfo indentify control (button)
      var fa = _leaflet2.default.DomUtil.create('div', 'btn-mapinfo-holder leaflet-bar');
      fa.setAttribute('id', 'btn-mapinfo-holder');
      fa.innerHTML = '<a class="btn btn-light btn-leaflet-small btn-mapinfo" title="Click Map for Summary Data" ' + 'role="button" aria-label="Click Map for Summary Data" ' + 'data-toggle="tooltip" data-placement="right" data-original-title="Click Map for Summary Data."> ' + '<i class="fas fa-info i-mapinfo"></a>';
      _leaflet2.default.DomEvent.disableClickPropagation(fa);
      // initalize new tooltips
      $(function () {
        $('#btn-mapinfo-holder [data-toggle="tooltip"]').tooltip({ trigger: 'hover focus' });
      });
      return fa;
    }
  }, {
    key: 'remapFields',
    value: function remapFields(json) {
      var props = {};
      Object.keys(json).forEach(function (agolField) {
        var fieldName = void 0;
        var val = json[agolField];
        if (agolField in config.fieldMaps) {
          fieldName = config.fieldMaps[agolField];
        } else {
          fieldName = agolField;
        }
        props[fieldName] = val;
      });
      return props;
    }
  }, {
    key: 'buildMapInfoConent',
    value: function buildMapInfoConent() {
      (0, _zonalStats.drawMapInfoStats)();
    }
  }, {
    key: 'createMapInfoIcon',
    value: function createMapInfoIcon() {
      return _leaflet2.default.divIcon({ className: 'map-info-point' });
    }
  }, {
    key: 'getDocument',
    value: function getDocument() {
      var parser = new DOMParser();
      return parser.parseFromString(_mapinfo2.default, 'text/html');
    }
  }]);

  return MapInfo;
}(_components.Component);

/***/ }),

/***/ "./src/scripts/maplayers_list.js":
/*!***************************************!*\
  !*** ./src/scripts/maplayers_list.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapLayersList = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _maplayers_list = __webpack_require__(/*! ../templates/maplayers_list.html */ "./src/templates/maplayers_list.html");

var _maplayers_list2 = _interopRequireDefault(_maplayers_list);

var _components = __webpack_require__(/*! ./components */ "./src/scripts/components.js");

var _mapConfig = __webpack_require__(/*! ../config/mapConfig */ "./src/config/mapConfig.js");

var _store = __webpack_require__(/*! ./store */ "./src/scripts/store.js");

__webpack_require__(/*! ../css/maplayers_list.scss */ "./src/css/maplayers_list.scss");

var _utilitys = __webpack_require__(/*! ./utilitys */ "./src/scripts/utilitys.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // default map template


// scss


var store = new _store.Store({});
// required for bootstrap
window.$ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
// required for tooltip, popup...
window.Popper = __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js");

window.jQuery = window.$;

/**
 * MapLayersList Component
 * Render and control map layer control
 */

var MapLayersList = exports.MapLayersList = function (_Component) {
  _inherits(MapLayersList, _Component);

  function MapLayersList(placeholderId, props) {
    _classCallCheck(this, MapLayersList);

    var _this = _possibleConstructorReturn(this, (MapLayersList.__proto__ || Object.getPrototypeOf(MapLayersList)).call(this, placeholderId, props, _maplayers_list2.default));

    var WMSLayers = _mapConfig.mapConfig.WMSLayers;
    var TMSLayers = _mapConfig.mapConfig.TMSLayers;
    var zoomRegions = _mapConfig.mapConfig.zoomRegions;


    MapLayersList.addToggleMapLayerListener();

    // Add a toggle button for each layer
    WMSLayers.forEach(function (layerProps) {
      _this.updateMapLayer(layerProps);
    });
    TMSLayers.forEach(function (layerProps) {
      _this.updateMapLayer(layerProps);
    });
    WMSLayers.forEach(function (layerProps) {
      MapLayersList.addLegendHTML(layerProps);
    });
    TMSLayers.forEach(function (layerProps) {
      MapLayersList.addLegendHTML(layerProps);
    });

    MapLayersList.ListHolderToggle();
    MapLayersList.ToggleLayerListToggle();
    MapLayersList.mapListToggleToggle();

    MapLayersList.addBaseMapListeners(props.mapComponent);
    MapLayersList.addZoomregionListeners(props.mapComponent, zoomRegions);
    MapLayersList.zoomRegionQuickLinkListener(props.mapComponent, zoomRegions);

    MapLayersList.addLegendListeners();

    _this.LayerDescriptionTemplate = '<div class="tooltip layerlist" role="popover">' + '  <div class="arrow"></div><div class="tooltip-inner"></div>' + '  <div class="close-layerlist"><i class="fa fa-times" aria-hidden="true"></i></div>' + '</div>';

    MapLayersList.addToolTipListners();
    MapLayersList.resizeMapList();
    window.addEventListener('resize', MapLayersList.resizeMapList);

    window.addEventListener('toggle-layerlist', function (e) {
      // timeout for css transition to happen
      setTimeout(function () {
        props.mapComponent.map.invalidateSize();
      }, 775);
    });

    window.addEventListener('aboutNavChange', function (e) {
      var activeNav = store.getStateItem('activeNav');
      var defaultLayerList = document.getElementById('defaultLayerList');
      var btnZoomRegion = document.getElementById('btn-zoomregion');

      if (activeNav === 'main-nav-map-searchNShubs') {
        defaultLayerList.classList.add('d-none');
        if (btnZoomRegion) {
          btnZoomRegion.classList.add('d-none');
        }
      } else {
        defaultLayerList.classList.remove('d-none');
        if (btnZoomRegion) {
          btnZoomRegion.classList.remove('d-none');
        }
      }
    });

    // change region is state changes
    window.addEventListener('platformChanged', function (e) {
      MapLayersList.togglePlatformLayerList();
      MapLayersList.togglePlatformLayers(props.mapComponent);
    });

    // run at startup to capture platform in current state
    MapLayersList.addPlatformListener();
    MapLayersList.addtoggleLayerListListener();

    // run at startup to capture platform in current state
    var platform = store.getStateItem('platform');
    var elem = document.getElementById('btn-platform-' + platform);
    setTimeout(function () {
      if (elem) {
        elem.click();
      }
    }, 5);
    return _this;
  }

  // handles toggle layer list click


  _createClass(MapLayersList, [{
    key: 'updateMapLayer',


    /** Create and append new layer button DIV */
    value: function updateMapLayer(layerProps) {
      // add listener
      this.addLayerListListener(layerProps.id, layerProps.label);

      // update label
      MapLayersList.updateLayerListName(layerProps.id, layerProps.label);
    }

    // Gets the HTML wrapper of layer controls by id
    //
    // @param id | String
    // @return DOM Element

  }, {
    key: 'addLayerListListener',


    /**
     *  adds an event listner to the maplayer list.
     *    The listner fires when a user clicks and toggles the display of the map layer
     *  @param { string }  layer id.
     *
     */
    value: function addLayerListListener(layerId, layerName) {
      var _this2 = this;

      // get and update the layer's checkbox
      var checkBox = document.getElementById(layerId + '-toggle');

      // ensure the html dom element exists
      if (checkBox !== undefined) {
        if (checkBox != null) {
          checkBox.setAttribute('title', 'Toggles the layer ' + layerName + ' on or off');
          checkBox.setAttribute('aria-label', 'Toggles the layer ' + layerName + ' on or off');

          // add the listner
          checkBox.addEventListener('click', function (e) {
            _this2.toggleMapLayer(layerId);
          });
        }
      }
    }

    /** Toggle map layer visibility */

  }, {
    key: 'toggleMapLayer',
    value: function toggleMapLayer(layerName) {
      // Trigger layer toggle callback
      this.triggerEvent('layerToggle', layerName);
    }
  }], [{
    key: 'addtoggleLayerListListener',
    value: function addtoggleLayerListListener() {
      var elem = document.getElementById('hide-show-layerlist');
      if (elem) {
        elem.addEventListener('click', MapLayersList.toggleLayerListClickHandler);
      }
    }

    // toggle layer list click handler

  }, {
    key: 'toggleLayerListClickHandler',
    value: function toggleLayerListClickHandler(e) {
      var elem = document.querySelector('.map-list-column');
      var elemMap = document.querySelector('.map-holder');
      var eleLeft = document.querySelector('.fa-angle-left');
      var eleRight = document.querySelector('.fa-angle-right');

      // toggle all the elements TODO clean this up? handel it better?
      if (elem && elemMap && eleLeft && eleRight) {
        var navChangeEvent = new CustomEvent('toggle-layerlist');
        window.dispatchEvent(navChangeEvent);
        var isMapLayerListVisible = elem.classList.contains('hide-list');
        if (isMapLayerListVisible) {
          elem.classList.remove('hide-list');
          elemMap.classList.remove('hide-list');
          elem.classList.add('show-list');
          elemMap.classList.add('show-list');
          eleLeft.classList.remove('d-none');
          eleRight.classList.add('d-none');
        } else {
          elem.classList.add('hide-list');
          elemMap.classList.add('hide-list');
          elem.classList.remove('show-list');
          elemMap.classList.remove('show-list');
          eleLeft.classList.add('d-none');
          eleRight.classList.remove('d-none');
        }
      }
    }

    // removes selected class from all satellite platform button click

  }, {
    key: 'platformRemoveSelectAll',
    value: function platformRemoveSelectAll() {
      var elems = document.querySelectorAll('.btn-platform');
      elems.forEach(function (elem) {
        elem.classList.remove('selected');
      });
    }

    // handles satellite platform button click

  }, {
    key: 'platformClickHandler',
    value: function platformClickHandler(e) {
      MapLayersList.platformRemoveSelectAll();
      e.target.classList.add('selected');
      store.setStoreItem('platform', e.target.value);

      var navChangeEvent = new CustomEvent('platformChanged');
      window.dispatchEvent(navChangeEvent);

      // get platform state
      var defaultLayerList = document.getElementById('defaultLayerList');
      var sentinel2tLayerList = document.getElementById('sentinel2defaultLayerList');

      switch (e.target.value) {
        case 'landsat8':
          defaultLayerList.classList.remove('d-none');
          sentinel2tLayerList.classList.add('d-none');
          break;
        case 'sentinel2':
          defaultLayerList.classList.add('d-none');
          sentinel2tLayerList.classList.remove('d-none');
          break;
        default:
          defaultLayerList.classList.remove('d-none');
          break;
      }
    }

    // handles satellite platform button click

  }, {
    key: 'addPlatformListener',
    value: function addPlatformListener() {
      var elem = document.querySelector('.btn-group.platform');
      if (elem) {
        elem.addEventListener('click', MapLayersList.platformClickHandler);
      }
    }

    // tooltip and popover require javascript side modification to enable them (new in Bootstrap 4)
    // use tooltip and popover components everywhere
    // initalize new tooltips

  }, {
    key: 'addToolTipListners',
    value: function addToolTipListners() {
      $(function () {
        $('#maplayers_list [data-toggle="popover"]').popover({
          boundary: 'window',
          html: true
        });
      });
    }

    // if parent is tooltip get id so we can hide it.

  }, {
    key: 'ParentTooltip',
    value: function ParentTooltip(target, id) {
      for (var p = target && target.parentElement; p; p = p.parentElement) {
        if (p.id.substring(0, 7) === id) {
          return p;
        }
      }
      return null;
    }
  }, {
    key: 'resizeMapList',
    value: function resizeMapList() {
      // const offset = 220;
      // if (window.innerHeight < 1024) {
      //   document.querySelector('#maplayers_list-holder').style.maxHeight
      // = `${window.innerHeight - offset}px`;
      // document.querySelector('#maplayers_list-holder').style.height
      // = `${window.innerHeight - offset}px`;
      //   document.querySelector('#maplayers_list').style.maxHeight
      // = `${window.innerHeight - offset}px`;
      //   document.querySelector('#maplayers_list').style.height
      // = `${window.innerHeight - offset}px`;
      // } else {
      //   document.querySelector('#maplayers_list-holder').style.maxHeight = 'none';
      //   document.querySelector('#maplayers_list-holder').style.height = 'none';
      //   document.querySelector('#maplayers_list').style.maxHeight = 'none';
      //   document.querySelector('#maplayers_list').style.height = 'none';
      // }
      //
      // document.querySelector('#maplayers_list-holder').style.maxHeight
      // = `${window.innerHeight - offset}px`;
      // document.querySelector('#maplayers_list').style.maxHeight
      // = `${window.innerHeight - offset}px`;
    }
  }, {
    key: 'togglePlatformLayers',
    value: function togglePlatformLayers(mapComponent) {
      // get the region
      var platform = store.getStateItem('platform');

      // get the layer list from the config file
      var TMSLayers = _mapConfig.mapConfig.TMSLayers;

      var layers = store.getStateItem('mapLayerDisplayStatus');

      TMSLayers.forEach(function (layerProps) {
        mapComponent.toggleVisLayerOff(layerProps.id);
      });

      // filter the layers based on current source
      Object.keys(layers).forEach(function (layer) {
        var asource = TMSLayers.filter(function (TMSlayer) {
          return TMSlayer.id === layer && TMSlayer.platform === platform;
        });

        // layer is on and not part of the tabs data so it needs to be off
        if (layers[layer] && asource.length === 0) {
          mapComponent.toggleVisLayerOff(layer);
        }

        // layer is on IS part of the tabs data os it needs to be on
        if (layers[layer] && asource.length > 0) {
          mapComponent.toggleVisLayerOn(layer);
        }
      });

      return null;
    }
  }, {
    key: 'toggleRegionsLayers',
    value: function toggleRegionsLayers(mapComponent) {
      // get the region
      var region = store.getStateItem('region');
      var activeNav = store.getStateItem('activeNav');

      // make sure region list are not displaying when targetedwatershed Nature Server data
      // nav is current location
      if (activeNav === 'main-nav-map-searchNShubs') {
        return null;
      }

      // get the layer list from the config file
      var TMSLayers = _mapConfig.mapConfig.TMSLayers;

      var layers = store.getStateItem('mapLayerDisplayStatus');

      // filter the layers based on current source
      Object.keys(layers).forEach(function (layer) {
        var asource = TMSLayers.filter(function (TMSlayer) {
          return TMSlayer.id === layer && TMSlayer.region === region;
        });

        // layer is on and not part of the tabs data so it needs to be off
        if (layers[layer] && asource.length === 0) {
          mapComponent.toggleVisLayerOff(layer);
        }

        // layer is on IS part of the tabs data os it needs to be on
        if (layers[layer] && asource.length > 0) {
          mapComponent.toggleVisLayerOn(layer);
        }
      });

      return null;
    }
  }, {
    key: 'zoomRegionQuickLinkListener',
    value: function zoomRegionQuickLinkListener(mapComponent, zoomRegions) {
      window.addEventListener('zoomRegionQuikLink', function (e) {
        var region = store.getStateItem('region');
        var regionInfo = zoomRegions.filter(function (regions) {
          return regions.region === region;
        });
        MapLayersList.zoomToRegion(mapComponent, regionInfo[0]);
      });
    }
  }, {
    key: 'addZoomregionListeners',
    value: function addZoomregionListeners(mapComponent, zoomRegions) {
      var btnzoomregionElem = document.getElementById('btn-zoomregion');
      if (btnzoomregionElem) {
        btnzoomregionElem.addEventListener('click', function (e) {
          MapLayersList.zoomRegionListToggle(e);
        });
      }

      var btnzoomregionList = document.getElementById('zoomregionlist');
      if (btnzoomregionList) {
        btnzoomregionList.addEventListener('click', function (e) {
          MapLayersList.zoomRegionListToggle(e);
        });
      }

      // uncomment of using region zooming
      // document.getElementById('zoomregion-seus').addEventListener('click', (e) => {
      //   const region = zoomRegions.filter(regions => regions.region === 'southeast');
      //   MapLayersList.zoomToRegion(mapComponent, region[0]);
      //   MapLayersList.updateZoomRegionLabel('Southeast U.S.');
      //
      //   // set region to conus
      //   store.setStoreItem('region', 'southeast');
      //   const navChangeEvent = new CustomEvent('regionChanged');
      //   window.dispatchEvent(navChangeEvent);
      //
      //   // ga event action, category, label
      //   googleAnalyticsEvent('click', 'zoomregion', 'southeast');
      // });
    }

    // zppm to region

  }, {
    key: 'zoomToRegion',
    value: function zoomToRegion(mapComponent, region) {
      mapComponent.map.setView({ lat: region.center[0], lng: region.center[1] }, region.zoom);
    }
  }, {
    key: 'addBaseMapListeners',
    value: function addBaseMapListeners(mapComponent) {
      document.getElementById('basemap-DarkGray').addEventListener('click', function (e) {
        mapComponent.changeBaseMap('DarkGray');
        MapLayersList.updateBaseMapLabel('Dark Gray');
        // ga event action, category, label
        (0, _utilitys.googleAnalyticsEvent)('click', 'basemap', 'Dark Gray');
      });

      document.getElementById('basemap-Imagery').addEventListener('click', function (e) {
        mapComponent.changeBaseMap('Imagery');
        MapLayersList.updateBaseMapLabel('Imagery');
        // ga event action, category, label
        (0, _utilitys.googleAnalyticsEvent)('click', 'basemap', 'Imagery Gray');
      });

      document.getElementById('basemap-Topographic').addEventListener('click', function (e) {
        mapComponent.changeBaseMap('Topographic');
        MapLayersList.updateBaseMapLabel('Topographic');
        // ga event action, category, label
        (0, _utilitys.googleAnalyticsEvent)('click', 'basemap', 'Topographic');
      });

      document.getElementById('basemap-Streets').addEventListener('click', function (e) {
        mapComponent.changeBaseMap('Streets');
        MapLayersList.updateBaseMapLabel('Streets');
        // ga event action, category, label
        (0, _utilitys.googleAnalyticsEvent)('click', 'basemap', 'Streets');
      });

      var btnBaseMapElem = document.getElementById('btn-basemap');
      if (btnBaseMapElem) {
        btnBaseMapElem.addEventListener('click', function (e) {
          MapLayersList.baseMapListToggle(e);
        });
      }

      var btnBaseMapList = document.getElementById('basemaplist');
      if (btnBaseMapList) {
        btnBaseMapList.addEventListener('click', function (e) {
          MapLayersList.baseMapListToggle(e);
        });
      }
    }

    // toggle layer list for regions some other region

  }, {
    key: 'togglePlatformLayerList',
    value: function togglePlatformLayerList() {
      // get region state
      var platform = store.getStateItem('platform');

      // get platform state
      var defaultLayerList = document.getElementById('defaultLayerList');
      var sentinel2tLayerList = document.getElementById('sentinel2defaultLayerList');

      switch (platform) {
        case 'landsat8':
          defaultLayerList.classList.remove('d-none');
          sentinel2tLayerList.classList.add('d-none');
          break;
        case 'sentinel2':
          defaultLayerList.classList.add('d-none');
          sentinel2tLayerList.classList.remove('d-none');
          break;
        default:
          defaultLayerList.classList.remove('d-none');
          break;
      }

      return null;
    }

    // toggle layer list for regions some other region

  }, {
    key: 'toggleRegionLayerList',
    value: function toggleRegionLayerList() {
      return null;
    }
  }, {
    key: 'updateBaseMapLabel',
    value: function updateBaseMapLabel(basemapname) {
      var labelElem = document.getElementById('btn-basemap-label');
      if (labelElem) {
        labelElem.innerHTML = basemapname;
      }
    }
  }, {
    key: 'updateZoomRegionLabel',
    value: function updateZoomRegionLabel(basemapname) {
      var labelElem = document.getElementById('btn-zoomregion-label');
      if (labelElem) {
        labelElem.innerHTML = basemapname;
      }
    }

    // toggle basemap list on

  }, {
    key: 'baseMapListToggle',
    value: function baseMapListToggle(e) {
      // ga event action, category, label
      (0, _utilitys.googleAnalyticsEvent)('click', 'button', 'basemaplist');

      var baseMapListElem = document.getElementById('basemaplist');
      var isBaseMapListVissible = baseMapListElem.classList.contains('closed');

      if (isBaseMapListVissible) {
        baseMapListElem.classList.remove('closed');
        // baseMapListElem.classList.remove('active');
      } else {
        baseMapListElem.classList.add('closed');
        // baseMapListElem.classList.add('active');
      }
    }

    // toggle zoom region list on

  }, {
    key: 'zoomRegionListToggle',
    value: function zoomRegionListToggle(e) {
      // ga event action, category, label
      (0, _utilitys.googleAnalyticsEvent)('click', 'button', 'zoomregionlist');

      var zoomRegionListElem = document.getElementById('zoomregionlist');
      var iszoomRegionListVissible = zoomRegionListElem.classList.contains('closed');

      if (iszoomRegionListVissible) {
        zoomRegionListElem.classList.remove('closed');
        // baseMapListElem.classList.remove('active');
      } else {
        zoomRegionListElem.classList.add('closed');
        // baseMapListElem.classList.add('active');
      }
    }
  }, {
    key: 'toggleMapLayerListState',
    value: function toggleMapLayerListState() {
      var mapLayerListState = store.getStateItem('maplayerlist');
      if (mapLayerListState === 'open') {
        store.setStoreItem('lastaction', 'maplayerlistclose');
        store.setStoreItem('maplayerlist', 'close');
        // ga event action, category, label
        (0, _utilitys.googleAnalyticsEvent)('click', 'maplayerlist', 'close');
      } else {
        store.setStoreItem('lastaction', 'maplayerlistopen');
        store.setStoreItem('maplayerlist', 'open');
        // ga event action, category, label
        (0, _utilitys.googleAnalyticsEvent)('click', 'maplayerlist', 'open');
      }

      MapLayersList.ListHolderToggle();
      MapLayersList.ToggleLayerListToggle();
      MapLayersList.mapListToggleToggle();
    }
  }, {
    key: 'ListHolderToggle',
    value: function ListHolderToggle() {
      var maplayersHolder = document.getElementById('maplayers_list-holder');
      var mapLayerListState = store.getStateItem('maplayerlist');
      if (maplayersHolder) {
        if (mapLayerListState === 'open') {
          maplayersHolder.classList.add('h-100');
          // maplayersHolder.classList.remove('h-0');
        } else {
          maplayersHolder.classList.add('h-100');
          // maplayersHolder.classList.remove('h-100');
          // maplayersHolder.classList.add('h-0');
        }
      }
    }
  }, {
    key: 'mapListToggleToggle',
    value: function mapListToggleToggle() {
      var mapListToggle = document.getElementById('mapListToggle');
      var mapLayerListState = store.getStateItem('maplayerlist');
      if (mapListToggle) {
        if (mapLayerListState === 'open') {
          mapListToggle.classList.add('show');
        } else {
          mapListToggle.classList.remove('show');
        }
      }
    }
  }, {
    key: 'ToggleLayerListToggle',
    value: function ToggleLayerListToggle() {
      var layerList = document.getElementById('ToggleLayerList');
      var mapLayerListState = store.getStateItem('maplayerlist');
      if (layerList) {
        if (mapLayerListState === 'open') {
          layerList.classList.remove('closed');
        } else {
          layerList.classList.add('closed');
        }
      }
    }
  }, {
    key: 'removeListners',
    value: function removeListners() {
      var layerListClose = document.querySelector('.bnt-MapLayersListToggle');
      if (layerListClose) {
        var newLayerListClose = layerListClose.cloneNode(true);
        layerListClose.parentNode.replaceChild(newLayerListClose, layerListClose);
        return newLayerListClose;
      }
      return layerListClose;
    }
  }, {
    key: 'addToggleMapLayerListener',
    value: function addToggleMapLayerListener() {
      var layerListClose = document.querySelector('.bnt-MapLayersListToggle');
      if (layerListClose) {
        // add the listener
        layerListClose.addEventListener('click', function (ev) {
          MapLayersList.toggleMapLayerListState();
        });
      }
    }
  }, {
    key: 'getLayerWrapperFromString',
    value: function getLayerWrapperFromString(id) {
      return document.getElementById(id + '-layerToggle');
    }

    // Gets the HTML wrapper of layer controls by child elem
    //
    // @param elem | DOM Element
    // @return DOM Element

  }, {
    key: 'getLayerWrapperFromElem',
    value: function getLayerWrapperFromElem(elem) {
      return elem.closest('.custom-control');
    }

    // Multiple functions need to get the wrapper but have different parameters available in their
    // closure, so this gets the wrapper based on what they have.
    //
    // @param param | String || DOM Element
    // @return DOM Element

  }, {
    key: 'getLayerWrapper',
    value: function getLayerWrapper(param) {
      return typeof param === 'string' ? MapLayersList.getLayerWrapperFromString(param) : MapLayersList.getLayerWrapperFromElem(param);
    }

    // Gets the HTML wrapper of a layers legend and description
    //
    // @param elem | DOM Element
    // @return DOM Element

  }, {
    key: 'getLegendWrapper',
    value: function getLegendWrapper(elem) {
      return elem.querySelector('.layer-legend');
    }

    // Gets the HTML wrapper of a layers description
    //
    // @param elem | DOM Element
    // @return DOM Element

  }, {
    key: 'getDescriptionWrapper',
    value: function getDescriptionWrapper(elem) {
      return elem.querySelector('.layer-description-text');
    }

    // Opens and closes the legend area
    //
    // @param elem | DOM Element

  }, {
    key: 'toggleLegendHtml',
    value: function toggleLegendHtml(elem) {
      elem.classList.toggle('closed');
      elem.classList.toggle('open');
      MapLayersList.getLayerWrapper(elem).querySelector('.layer-legend-wrapper').classList.toggle('closed');
      MapLayersList.getLayerWrapper(elem).querySelector('.layer-legend-wrapper').classList.toggle('open');
    }

    // Gets the id of the legend to be used in the store
    //
    // @param elem | DOM Element

  }, {
    key: 'getLegendId',
    value: function getLegendId(elem) {
      return MapLayersList.getLayerWrapper(elem).id.replace('-layerToggle', '') + '-legend';
    }

    // Adds or removes the legend from the store
    //
    // @param elem | DOM Element

  }, {
    key: 'toggleLegendState',
    value: function toggleLegendState(elem) {
      var legendId = MapLayersList.getLegendId(elem);
      var legendstate = false;
      if (store.checkItem(legendId)) {
        store.removeStateItem(legendId);
        // ga event action, category, label
        (0, _utilitys.googleAnalyticsEvent)('click', 'maplayerlist', 'close legend ' + elem.id);
        legendstate = false;
      } else {
        // ga event action, category, label
        (0, _utilitys.googleAnalyticsEvent)('click', 'maplayerlist', 'open legend ' + elem.id);
        store.addStateItem(legendId, 'true');
        legendstate = true;
      }
      return legendstate;
    }

    // Opens the legend block if the legend id is in the store
    //
    // @param elem | DOM Element

  }, {
    key: 'setInitialLegendStatus',
    value: function setInitialLegendStatus(elem) {
      var legendId = MapLayersList.getLegendId(elem);
      if (store.checkItem(legendId)) {
        MapLayersList.toggleLegendHtml(elem);
      }
    }

    // Inserts the legend and layer description
    //
    // @param layerProps | Object

  }, {
    key: 'addLegendHTML',
    value: function addLegendHTML(layerProps) {
      var layerElem = MapLayersList.getLayerWrapper(layerProps.id);

      if (layerElem) {
        // get the legend html based on the number of breaks supports 1-10 breaks
        MapLayersList.getLegendWrapper(layerElem).innerHTML = (0, _utilitys.getLegendHtml)(layerProps.chartLegendValues);

        // get the color palette for layer, each layer can have its own
        var colorPalette = layerProps.chartCSSColor;

        // iterate the color palette for layer so we can assing apporaite css color to element
        Object.keys(colorPalette).forEach(function (color) {
          // convert the color number to number word 2 - two
          // this is how html elments are named.
          var colorlueWord = (0, _utilitys.numberToWord)(Number(color));

          // get the element based on the color word
          var valueELem = layerElem.querySelector('.value-' + colorlueWord);

          // if the element exists add css color values
          if (valueELem) {
            // set background based on mapconfig values
            valueELem.style.background = colorPalette[color];

            // set font color
            valueELem.style.color = '#000';

            // // last color tends to be to dark for dark font
            // if (parseInt(color) >= layerProps.chartLegendValues ) {
            //   valueELem.style.color = '#fff';
            // }
            // hide legend numbers for now will anyone notice?
            valueELem.style.color = 'transparent';

            // add classes for region, chartCSSSelector, and source in case we want to find it later
            valueELem.classList.add(layerProps.chartCSSSelector);
            valueELem.classList.add(layerProps.region);
            valueELem.classList.add(layerProps.source);
          }

          // set attributes for popups
          if (layerProps.description.length > 0) {
            MapLayersList.getDescriptionWrapper(layerElem).setAttribute('data-content', layerProps.description);
            MapLayersList.getDescriptionWrapper(layerElem).setAttribute('title', layerProps.label);
          }
          MapLayersList.setInitialLegendStatus(layerElem.getElementsByClassName('layer-legend-toggler')[0]);
        });
      }
      var legendElem = document.getElementById('legend-' + layerProps.id);
      if (legendElem) {
        legendElem.setAttribute('title', 'Legend for ' + layerProps.label);
        legendElem.setAttribute('aria-label', 'Legend for ' + layerProps.label);
      }

      var legendShowElem = document.getElementById('show-legend-' + layerProps.id);
      if (legendShowElem) {
        legendShowElem.setAttribute('title', 'Show legend for ' + layerProps.label);
        legendShowElem.setAttribute('aria-label', 'Show legend for ' + layerProps.label);
      }

      var legendHideElem = document.getElementById('hide-legend-' + layerProps.id);
      if (legendHideElem) {
        legendHideElem.setAttribute('title', 'Hide legend for ' + layerProps.label);
        legendHideElem.setAttribute('aria-label', 'Hide legend for ' + layerProps.label);
      }
    }

    // Handles the toggle legend button being interacted with
    // `this` is the button dom element.

  }, {
    key: 'handleLegendChange',
    value: function handleLegendChange(e) {
      MapLayersList.toggleLegendHtml(this);
      MapLayersList.toggleLegendState(this);
    }

    // Adds listeners to the legend buttons

  }, {
    key: 'addLegendListeners',
    value: function addLegendListeners() {
      var legendButtons = document.getElementsByClassName('layer-legend-toggler');
      var i = void 0;
      var l = void 0;
      for (i = 0, l = legendButtons.length; i < l; i += 1) {
        legendButtons[i].addEventListener('click', MapLayersList.handleLegendChange);
      }
    }

    /**
     *  update the label text from the mapConfig.js file
     *    this is an overide so we can overide the default layer list text
     *  @param { string }  layer id for selecting the dom element.
     *   @param { string }  layer iname the layers name for the label text.
     *
     */

  }, {
    key: 'updateLayerListName',
    value: function updateLayerListName(layerId, layerName) {
      // get and update the layer's label
      var label = document.getElementById(layerId + '-label');

      // ensure the html dom element exists
      if (label !== undefined) {
        if (label != null) {
          // update the label
          label.textContent = layerName;
          label.setAttribute('title', 'Toggles the layer ' + layerName + ' on or off');
          label.setAttribute('aria-label', 'Toggles the layer ' + layerName + ' on or off');
        }
      }
    }
  }]);

  return MapLayersList;
}(_components.Component);

if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
}

if (!Element.prototype.closest) {
  Element.prototype.closest = function (s) {
    var el = undefined;
    if (!document.documentElement.contains(el)) {
      return null;
    }
    do {
      if (el.matches(s)) {
        return el;
      }
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1);
    return null;
  };
}

/***/ }),

/***/ "./src/scripts/navBar.js":
/*!*******************************!*\
  !*** ./src/scripts/navBar.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavBar = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nav_bar = __webpack_require__(/*! ../templates/nav_bar.html */ "./src/templates/nav_bar.html");

var _nav_bar2 = _interopRequireDefault(_nav_bar);

var _nav_bar_nav = __webpack_require__(/*! ../templates/nav_bar_nav.html */ "./src/templates/nav_bar_nav.html");

var _nav_bar_nav2 = _interopRequireDefault(_nav_bar_nav);

var _components = __webpack_require__(/*! ./components */ "./src/scripts/components.js");

var _store = __webpack_require__(/*! ./store */ "./src/scripts/store.js");

var _navConfig = __webpack_require__(/*! ../config/navConfig */ "./src/config/navConfig.js");

var _utilitys = __webpack_require__(/*! ./utilitys */ "./src/scripts/utilitys.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // default map template


var store = new _store.Store({});

/**
 * NavBar Component
 * Render and control map layer control
 */

var NavBar = exports.NavBar = function (_Component) {
  _inherits(NavBar, _Component);

  function NavBar(placeholderId, props) {
    _classCallCheck(this, NavBar);

    /**
     * get nav configuration
     */
    var _this = _possibleConstructorReturn(this, (NavBar.__proto__ || Object.getPrototypeOf(NavBar)).call(this, placeholderId, props, _nav_bar2.default));

    _this.navConfig = _navConfig.navConfig;

    _this.activeNav = '';

    // get the main nav element
    var navHeaderElement = document.getElementById('main-nav');

    var cnt = 1;
    /**
     *  iterate each nav and add it to the ui
     */
    if (navHeaderElement) {
      _navConfig.navConfig.navs.forEach(function (nav) {
        var navInnerHTML = navHeaderElement.innerHTML;
        navHeaderElement.innerHTML = navInnerHTML + _nav_bar_nav2.default;

        var navElement = document.getElementById('main-nav-page');

        // first tab is always active
        if (cnt === 1) {
          navElement.className += ' active';
        }

        navElement.setAttribute('ref', nav.ref); // nav ref
        navElement.setAttribute('href', nav.href); // nav href
        navElement.setAttribute('id', nav.id); // nav id
        navElement.setAttribute('aria-label', nav.text); // aria-label
        navElement.setAttribute('title', nav.text); // title
        navElement.setAttribute('target', nav.target); // title
        navElement.textContent = nav.text; // nav text

        cnt += 1;
      });

      var activeNav = store.getStateItem('activeNav');

      if (activeNav) {
        NavBar.deactivateAllNavs();
        NavBar.toggleTabContent(activeNav);
        var el = document.getElementById(activeNav);
        if (el) {
          el.className += ' active';
        }
      }

      // add click event for active toggle
      _this.addTabClick();
    }
    return _this;
  }

  _createClass(NavBar, [{
    key: 'addTabClick',
    value: function addTabClick() {
      var _this2 = this;

      _navConfig.navConfig.navs.forEach(function (nav) {
        var el = document.getElementById(nav.id);
        el.addEventListener('click', function (e) {
          NavBar.deactivateAllNavs();

          // this very hacky need better way to handle
          if (nav.id === 'main-nav-map-searchhubs' || nav.id === 'main-nav-map-searchNShubs' || nav.id === 'main-nav-map-examples') {
            NavBar.toggleTabContent('main-nav-map');
          } else {
            NavBar.toggleTabContent(e.target.id);
          }

          // ga event action, category, label
          (0, _utilitys.googleAnalyticsEvent)('click', 'navbar', e.target.id);

          // make tab style active
          NavBar.tabUpdate(e.target.id);

          _this2.activeNav = nav.id;
          store.setStoreItem('activeNav', nav.id);

          // this is repative with router?
          var navChangeEvent = new CustomEvent('aboutNavChange');
          window.dispatchEvent(navChangeEvent);
        });
      });
    }

    // clear the url after a tab nav when not from UI
    // for example share url or browser refresh

  }], [{
    key: 'setTab',
    value: function setTab(activeNav) {
      if (activeNav) {
        NavBar.deactivateAllNavs();
        NavBar.toggleTabContent(activeNav);
        var el = document.getElementById(activeNav);
        if (el) {
          el.className += ' active';
        }
      }
    }
  }, {
    key: 'UpdateRouteURL',
    value: function UpdateRouteURL(id) {
      var fullurl = window.location;
      var urlParams = window.location.search;
      var hash = window.location.hash.substr(1);
      var urlwithoutquery = fullurl.href.replace(urlParams, '');

      // this very hacky need better way to handle
      if (id === 'main-nav-map-searchhubs' || id === 'main-nav-map-searchNShubs' || id === 'main-nav-map-examples') {
        if (window.history && window.history.replaceState) {
          if (!hash) {
            window.history.replaceState({}, '', urlwithoutquery + 'SearchHubs');
          }
        }
      } else if (!hash) {
        window.history.replaceState({}, '', urlwithoutquery + 'Home');
      }
    }
  }, {
    key: 'tabUpdate',
    value: function tabUpdate(id) {
      NavBar.deactivateAllNavs();
      var el = document.getElementById(id);
      if (el) {
        el.className = el.className + ' active';
      }
      store.setStoreItem('activeNav', id);

      NavBar.UpdateRouteURL(id);
    }
  }, {
    key: 'deactivateAllNavs',
    value: function deactivateAllNavs() {
      _navConfig.navConfig.navs.forEach(function (nav) {
        var el = document.getElementById(nav.id);
        if (el) {
          el.className = el.className.replace(' active', '');
        }
      });
    }
  }, {
    key: 'toggleTabContent',
    value: function toggleTabContent(id) {
      NavBar.resetTabContent();
      var el = document.getElementById('tab-' + id);
      if (el) {
        el.className = el.className.replace(' d-none', '');
      }
    }
  }, {
    key: 'resetTabContent',
    value: function resetTabContent() {
      _navConfig.navConfig.navs.forEach(function (nav) {
        var el = document.getElementById('tab-' + nav.id);
        if (el) {
          el.className = el.className.replace(' d-none', '');
          el.className += ' d-none';
        }
      });

      // not found in case it was revealed.
      var el = document.getElementById('tab-main-nav-notfound');
      el.className = el.className.replace(' d-none', '');
      el.className += ' d-none';
    }
  }]);

  return NavBar;
}(_components.Component);

/***/ }),

/***/ "./src/scripts/pointsofinterest.js":
/*!*****************************************!*\
  !*** ./src/scripts/pointsofinterest.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PointsOfInterest = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _leaflet = __webpack_require__(/*! leaflet */ "./node_modules/leaflet/dist/leaflet-src.js");

var _leaflet2 = _interopRequireDefault(_leaflet);

var _fileSaver = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");

var _components = __webpack_require__(/*! ./components */ "./src/scripts/components.js");

var _store = __webpack_require__(/*! ./store */ "./src/scripts/store.js");

var _utilitys = __webpack_require__(/*! ./utilitys */ "./src/scripts/utilitys.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // dependencies

// import utilities


// required for bootstrap
window.$ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
// required for tooltip, popup...
window.Popper = __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js");

window.jQuery = window.$;

var store = new _store.Store({});
/**
* handles adding of points the pointsofinterest of points. Designed to allow
* users to create a set of points to visit. - pointsofinterest or create a google map
* route
*/

var PointsOfInterest = exports.PointsOfInterest = function (_Component) {
  _inherits(PointsOfInterest, _Component);

  function PointsOfInterest(placeholderId, props) {
    _classCallCheck(this, PointsOfInterest);

    var _this = _possibleConstructorReturn(this, (PointsOfInterest.__proto__ || Object.getPrototypeOf(PointsOfInterest)).call(this, placeholderId, props));

    var mapComponent = props.mapComponent;


    _this.map = mapComponent.map;
    _this.mapComponent = mapComponent;

    // setup marker layer which is not set yet.
    _this.marker = undefined;
    _this.markersLayer = new _leaflet2.default.LayerGroup();

    _this.addPointsOfInterestControl(_this.map);

    var elem = document.getElementById('btn-pointsofinterest-download-holder');
    if (elem) {
      elem.addEventListener('click', PointsOfInterest.exportCSV.bind(_this));
    }

    var cancelelem = document.getElementById('btn-pointsofinterest-cancel-holder');
    if (cancelelem) {
      cancelelem.addEventListener('click', _this.cancelPointsOfInterest.bind(_this));
    }

    window.addEventListener('added-pointofinterest', function (e) {
      if (elem) {
        elem.classList.remove('d-none');
      }

      if (cancelelem) {
        cancelelem.classList.remove('d-none');
      }
    });

    window.addEventListener('removed-pointofinterest', function (e) {
      if (elem) {
        elem.classList.add('d-none');
        elem.removeEventListener('click', PointsOfInterest.exportCSV, true);
        _this.map.off('click');
        _this.mapComponent.mapCursorDefault();
      }

      if (cancelelem) {
        cancelelem.classList.add('d-none');
      }
    });
    return _this;
  }

  _createClass(PointsOfInterest, [{
    key: 'cancelPointsOfInterest',
    value: function cancelPointsOfInterest() {
      this.map.off('click');
      this.mapComponent.mapCursorDefault();
      this.removeMapMarker();
    }
  }, {
    key: 'addPointsOfInterestControl',


    // add  points of interest Button control to leaflet map
    value: function addPointsOfInterestControl(leafletmap) {
      _leaflet2.default.Control.Watermark = _leaflet2.default.Control.extend({
        onAdd: PointsOfInterest.PointsOfInterestControlOnAddHandler,

        // Nothing to do here
        onRemove: PointsOfInterest.PointsOfInterestOnRemoveHandler
      });

      _leaflet2.default.control.watermark = function (opts) {
        return new _leaflet2.default.Control.Watermark(opts);
      };
      _leaflet2.default.control.watermark({ position: 'topleft' }).addTo(leafletmap);

      // get btn for points of interest add click event
      var leafletControlElement = document.querySelector('.btn-pointsofinterest');
      leafletControlElement.addEventListener('click', this.pointsOfInteresClickHandler.bind(this));
    }

    // points of interest control (button) on add function.
    // fires when the control (button) is removed

  }, {
    key: 'removeMapMarker',


    // static PointsOfInterestHandler() {
    //   console.log('Add points of interest to map click');
    //   // ga event action, category, label
    //   googleAnalyticsEvent('click', 'PointsOfInterest', 'pointsofinterest');
    // }

    // remove the map maker layer group, points of interest
    // point.
    value: function removeMapMarker() {
      var trigger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this.markersLayer.clearLayers();
      // reset points of interest on new click
      store.removeStateItem('mapClickPointsOfInterest');
      if (trigger) {
        var navChangeEvent = new CustomEvent('removed-pointofinterest');
        window.dispatchEvent(navChangeEvent);
      }
    }

    // converts the the multple record object to csv and renames headers (field names)
    //
    // @param name | String - data object from state that is properties.mean

  }, {
    key: 'pointsOfInterestClickHandler',


    // point of interest point click handler
    value: function pointsOfInterestClickHandler(ev) {
      // save the map action to state store
      store.saveAction('click');

      // get current points if there are any and concateanate the points
      // keep doing this to user clears the points - which we need to figure out...
      var currentPointsOfInterest = store.getStateItem('mapClickPointsOfInterest');
      var newPointOfInterest = [ev.latlng];
      var updatePointsOfInterests = [].concat(_toConsumableArray(currentPointsOfInterest), newPointOfInterest);

      // de-dup the array of point objects (avoids double clicks and such)
      var uniq = new Set(updatePointsOfInterests.map(function (e) {
        return JSON.stringify(e);
      }));
      var uniquePointsOfInterests = Array.from(uniq).map(function (e) {
        return JSON.parse(e);
      });

      // get the custom map marker icon
      var myIcon = PointsOfInterest.createPointsOfInterestIcon();

      // add the marker at the clicked point
      this.addPointsOfInterestMarker(ev.latlng, myIcon);

      // save the mapclick location to the state store
      store.setStoreItem('mapClickPointsOfInterest', uniquePointsOfInterests);
      var navChangeEvent = new CustomEvent('added-pointofinterest');
      window.dispatchEvent(navChangeEvent);
      // PointsOfInterest.exportCSV();

      // ga event action, category, label
      (0, _utilitys.googleAnalyticsEvent)('click', 'map', 'pointsofinterest');
    }

    // add maker for points of interest points to leaflet layer group
    // @param { Object } mapclick object lat long
    // @param { Object } icon leaflet icon used as maker on map

  }, {
    key: 'addPointsOfInterestMarker',
    value: function addPointsOfInterestMarker(mapClick, icon) {
      var markersLayer = _leaflet2.default.marker([mapClick.lat, mapClick.lng], {
        icon: icon,
        alt: 'Point of interest'
      });
      this.markersLayer.addLayer(markersLayer);
      this.map.addLayer(this.markersLayer);
    }

    // re-instiate mapClick Points Of Interest
    // adding not as hanlder callback so I can use this (class) calls
    // would be better to handle this as a traditional callback

  }, {
    key: 'addPointsOfInteresClickHandler',
    value: function addPointsOfInteresClickHandler() {
      // reset points of interest on new click
      // store.removeStateItem('mapClickPointsOfInterest');

      var elem = document.getElementById('btn-pointsofinterest-download-holder');
      var isVisible = elem.classList.contains('d-none');

      if (elem) {
        if (isVisible) {
          elem.classList.remove('d-none');
          // add map click
          this.map.on('click', this.pointsOfInterestClickHandler.bind(this));
          this.mapComponent.mapCursorCrosshair();
        } else {
          this.mapComponent.mapCursorDefault();
          elem.classList.add('d-none');
          // remove map click
          this.map.off('click');
        }
      }

      var cancelelem = document.getElementById('btn-pointsofinterest-cancel-holder');
      if (cancelelem) {
        if (isVisible) {
          cancelelem.classList.remove('d-none');
          this.mapComponent.mapCursorCrosshair();
        } else {
          this.mapComponent.mapCursorDefault();
          cancelelem.classList.add('d-none');
          this.map.off('click');
        }
      }

      // remove old maker if it exists
      // this.marker is defined at class creation
      // this.removeMapMarker(false);
    }

    // points of interest click handler

  }, {
    key: 'pointsOfInteresClickHandler',
    value: function pointsOfInteresClickHandler(ev) {
      this.addPointsOfInteresClickHandler();
      // ga event action, category, label
      (0, _utilitys.googleAnalyticsEvent)('click', 'button', 'pointsofinterest');

      // remove previous marker point
      if (this.marker !== undefined) {
        this.mapComponent.map.removeLayer(this.marker);
      }

      // make the map cursor cross hairs
      // this.mapComponent.mapCursorCrosshair();

      // remove from state
      store.removeStateItem('pointsofinterest');
    }
  }], [{
    key: 'pointHTML',
    value: function pointHTML() {
      var elem = _leaflet2.default.DomUtil.create('div', 'btn-pointsofinterest-holder leaflet-bar');
      elem.setAttribute('id', 'btn-pointsofinterest-holder');
      elem.classList.add('btn-pointsofinterest-holder');
      elem.innerHTML = '<a id="pointsofinterest" class="btn btn-light btn-leaflet-small btn-pointsofinterest" title="Add points of interest to map" ' + 'role="button" aria-label="Add points of interest to map" ' + 'data-toggle="tooltip" data-placement="bottom" data-original-title="Add points of interest to map"> ' + '<i class="fas fa-map-marker-alt i-pointsofinterest"></a>';
      return elem;
    }
  }, {
    key: 'pointDownloadHTML',
    value: function pointDownloadHTML() {
      var elem = _leaflet2.default.DomUtil.create('div', 'btn-pointsofinterest-download-holder leaflet-bar');
      elem.setAttribute('id', 'btn-pointsofinterest-download-holder');
      elem.classList.add('btn-pointsofinterest-download-holder');
      elem.classList.add('d-none');
      elem.innerHTML = '<a id="pointsofinterest-download" class="btn btn-light btn-leaflet-small btn-pointsofinterest-download" title="Download points of interest" ' + 'role="button" aria-label="Download points of interest" ' + 'data-toggle="tooltip" data-placement="bottom" data-original-title="Download points of interest"> ' + '<i class="fas fa-download i-pointsofinterest-download"></a>';

      return elem;
    }
  }, {
    key: 'pointCancelHTML',
    value: function pointCancelHTML() {
      var elem = _leaflet2.default.DomUtil.create('div', 'btn-pointsofinterest-cancel-holder leaflet-bar');
      elem.setAttribute('id', 'btn-pointsofinterest-cancel-holder');
      elem.classList.add('btn-pointsofinterest-cancel-holder');
      elem.classList.add('d-none');
      elem.innerHTML = '<a id="pointsofinterest-cancel" class="btn btn-light btn-leaflet-small btn-pointsofinterest-cancel" title="Cancel and remove all points" ' + 'role="button" aria-label="Cancel and remove all points" ' + 'data-toggle="tooltip" data-placement="bottom" data-original-title="Cancel and remove all points"> ' + '<i class="fas fa-times-circle i-pointsofinterest-cancel"></a>';

      return elem;
    }
  }, {
    key: 'PointsOfInterestControlOnAddHandler',
    value: function PointsOfInterestControlOnAddHandler() {
      // add points button
      var pointsofinterestBtn = PointsOfInterest.pointHTML();
      // download points button
      var pointsofinterestDownloadBtn = PointsOfInterest.pointDownloadHTML();
      // cancel points button
      var pointsofinterestCancelBtn = PointsOfInterest.pointCancelHTML();

      var pointsofinterestBtns = _leaflet2.default.DomUtil.create('div', 'btn-pointsofinterest-all-holder');
      pointsofinterestBtns.setAttribute('id', 'btn-pointsofinterest-all-holder');
      pointsofinterestBtns.classList.add('btn-pointsofinterest-all-holder');

      _leaflet2.default.DomEvent.disableClickPropagation(pointsofinterestBtn);
      _leaflet2.default.DomEvent.disableClickPropagation(pointsofinterestDownloadBtn);

      pointsofinterestBtns.appendChild(pointsofinterestBtn);
      pointsofinterestBtns.appendChild(pointsofinterestDownloadBtn);
      pointsofinterestBtns.appendChild(pointsofinterestCancelBtn);

      // initalize new tooltips
      $(function () {
        $('#btn-pointsofinterest-holder [data-toggle="tooltip"]').tooltip({ trigger: 'hover focus' });
        $('#btn-pointsofinterest-download-holder [data-toggle="tooltip"]').tooltip({ trigger: 'hover focus' });
        $('#btn-pointsofinterest-cancel-holder [data-toggle="tooltip"]').tooltip({ trigger: 'hover focus' });
      });
      return pointsofinterestBtns;
    }
  }, {
    key: 'PointsOfInterestOnRemoveHandler',
    value: function PointsOfInterestOnRemoveHandler(map) {
      // Nothing to do here yet
      return null;
    }
  }, {
    key: 'convertDataToCSV',
    value: function convertDataToCSV(data) {
      var array = [Object.keys(data[0])].concat(data);

      return array.map(function (it) {
        return Object.values(it).toString();
      }).join('\n');
    }

    // grabs current points of interest and exports them to csv

  }, {
    key: 'exportCSV',
    value: function exportCSV() {
      var mapClickPointsOfInterest = store.getStateItem('mapClickPointsOfInterest');
      // make sure there is data.
      if ((0, _utilitys.checkValidObject)(mapClickPointsOfInterest)) {
        // this.removeMapMarker();
        var csv = PointsOfInterest.convertDataToCSV(mapClickPointsOfInterest);
        var blob = new Blob([csv], { type: 'text/plain;charset=utf-8' });
        (0, _fileSaver.saveAs)(blob, 'pointsofinterest.csv');
        return csv;
      }
      return null;
    }

    // creates custom icon and adds css class for styling

  }, {
    key: 'createPointsOfInterestIcon',
    value: function createPointsOfInterestIcon() {
      return _leaflet2.default.divIcon({ className: 'pointsofinterest-marker' });
    }
  }]);

  return PointsOfInterest;
}(_components.Component);

/***/ }),

/***/ "./src/scripts/searchlocations.js":
/*!****************************************!*\
  !*** ./src/scripts/searchlocations.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchLocations = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _leaflet = __webpack_require__(/*! leaflet */ "./node_modules/leaflet/dist/leaflet-src.js");

var _leaflet2 = _interopRequireDefault(_leaflet);

var _esriLeafletGeocoder = __webpack_require__(/*! esri-leaflet-geocoder */ "./node_modules/esri-leaflet-geocoder/dist/esri-leaflet-geocoder-debug.js");

var _searchlocations = __webpack_require__(/*! ../templates/searchlocations.html */ "./src/templates/searchlocations.html");

var _searchlocations2 = _interopRequireDefault(_searchlocations);

var _components = __webpack_require__(/*! ./components */ "./src/scripts/components.js");

var _store = __webpack_require__(/*! ./store */ "./src/scripts/store.js");

var _utilitys = __webpack_require__(/*! ./utilitys */ "./src/scripts/utilitys.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // dependencies


// default searchlocations template


var store = new _store.Store({});

// required for bootstrap
window.$ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
// required for tooltip, popup...
window.Popper = __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js");

window.jQuery = window.$;

/**
* SearchLocations Component
* SearchLocations handles searching places and geocoding,
* uses the https://github.com/Esri/esri-leaflet-geocoder leaflet plugin
* Apache License https://github.com/Esri/esri-leaflet-geocoder/blob/master/LICENSE
* and examples of use at http://esri.github.io/esri-leaflet/examples/geocoding-control.html
*/

var SearchLocations = exports.SearchLocations = function (_Component) {
  _inherits(SearchLocations, _Component);

  function SearchLocations(placeholderId, props) {
    _classCallCheck(this, SearchLocations);

    var _this = _possibleConstructorReturn(this, (SearchLocations.__proto__ || Object.getPrototypeOf(SearchLocations)).call(this, placeholderId, props, _searchlocations2.default));

    var mapComponent = props.mapComponent,
        mapInfoComponent = props.mapInfoComponent,
        exploreComponent = props.exploreComponent;


    _this.mapComponent = mapComponent;
    _this.mapInfoComponent = mapInfoComponent;
    _this.exploreComponent = exploreComponent;
    // TODO: add config for geosearch
    // might need to add other limits
    var GeoSearchOptions = {
      useMapBounds: false,
      countries: 'USA',
      collapseAfterResult: false,
      allowMultipleResults: false,
      attribution: 'Powered by ESRI'
    };

    // add search control with options
    _this.searchControl = (0, _esriLeafletGeocoder.geosearch)(GeoSearchOptions).addTo(mapComponent.map);
    _this.searchControlElement = document.querySelector('.geocoder-control.leaflet-control');
    _this.searchBoxElement = document.querySelector('.geocoder-control-input.leaflet-bar');
    _this.searchIconElement = document.querySelector('.geocoder-control-input');

    _this.collapseSearch = _leaflet2.default.DomUtil.create('div', 'btn-search-locations-collapse-holder leaflet-bar d-none', _this.searchControlElement);
    _this.collapseSearch.setAttribute('id', 'btn-search-locations-collapse');

    _this.searchIconElement.setAttribute('data-toggle', 'tooltip');
    _this.searchIconElement.setAttribute('data-placement', 'right');
    _this.searchIconElement.setAttribute('data-original-title', 'Search by Place or Address');
    _this.searchIconElement.setAttribute('title', 'Search by Place or Address');
    // make sure map click events do not fire when user clicks on search conrol
    _leaflet2.default.DomEvent.disableClickPropagation(_this.searchControlElement);

    // handle expanding of search box.  displays a collapse button to dom
    _this.searchBoxElement = document.querySelector('.geocoder-control-input.leaflet-bar');
    _this.searchBoxElement.addEventListener('mousedown', _this.searchBoxExpandClickHandler.bind(_this));
    _this.searchBoxElement.addEventListener('click', _this.searchBoxExpandClickHandler.bind(_this));
    _this.searchBoxElement.addEventListener('focus', SearchLocations.searchBoxExpandFocusHandler.bind(_this));
    _this.searchBoxElement.addEventListener('focusout', SearchLocations.searchBoxExpandBlurHandler.bind(_this));
    _this.searchBoxElement.addEventListener('blur', SearchLocations.searchBoxExpandBlurHandler.bind(_this));

    // handle collapse of search box.  removed from displays the collapse button
    // from dom
    _this.collapseSearch.addEventListener('click', _this.searchBoxCollapseClickHandler.bind(_this));

    _this.collapseSearch.innerHTML = '<i class="fas fa-angle-double-left btn-search-locations-collapse"></i>';

    // get mapcompment
    _this.mapComponent = mapComponent;

    // setup marker layer which is not set yet.
    _this.marker = undefined;
    _this.markerBounds = undefined;

    // add results hanlder for when user picks a location
    _this.searchControl.on('results', _this.resultsHandler.bind(_this));

    // initalize new tooltips
    $(function () {
      $('.geocoder-control [data-toggle="tooltip"]').tooltip({ trigger: 'hover' });
    });
    return _this;
  }

  // handle search box click.  This expands the search box.


  _createClass(SearchLocations, [{
    key: 'searchBoxExpandClickHandler',
    value: function searchBoxExpandClickHandler(ev) {
      this.searchControl.options.collapseAfterResult = false;
      _leaflet2.default.DomUtil.removeClass(this.collapseSearch, 'd-none');
      // ga event action, category, label
      (0, _utilitys.googleAnalyticsEvent)('click', 'searchbox', 'expand');
    }
  }, {
    key: 'searchBoxCollapseClickHandler',


    // handle collapse of search box.  removed from displays the collapse button
    // from dom
    value: function searchBoxCollapseClickHandler(ev) {
      var _this2 = this;

      // get the search location buttons holder element
      var CollapseElement = document.querySelector('.geocoder-control-expanded');

      // ga event action, category, label
      (0, _utilitys.googleAnalyticsEvent)('click', 'searchbox', 'collapse');

      // make the element exists in the dom
      if (CollapseElement !== null) {
        // if clicked child or explore buttton
        if (ev.target.id === 'btn-search-locations-collapse' || (0, _utilitys.ParentContains)(ev.target, 'btn-search-locations-collapse')) {
          this.searchControl.options.collapseAfterResult = true;
          this.searchControl.clear();
          this.searchControl.disable();
          // the leaflet-geocodiong force focus on the search input box
          // which forces the code to keep the css dom elements vissible
          // the onlly way to overcopme this is disable and the shortly
          // re-enable the dom element via the plugins code
          setTimeout(function () {
            _this2.searchControl.enable();
          }, 0);
          _leaflet2.default.DomUtil.addClass(this.collapseSearch, 'd-none');
        }
      }
    }

    // handle geocoding results from the esri leaflet geocoding plugin

  }, {
    key: 'resultsHandler',
    value: function resultsHandler(data) {
      store.setStoreItem('working_search', true);
      (0, _utilitys.spinnerOn)();

      // clear old locations
      this.removeSearchLocations();

      // save results
      SearchLocations.saveResultsToStore(data);

      // add search location marker
      this.addSearchLocationsMarker(true);

      // add popup with slight delay
      this.addSearchLocationPopup();

      // force basemap redraw for force popup to
      // at similar location to open and bind
      this.mapComponent.zoomInAndOut();
    }

    // popup close handler

  }, {
    key: 'searchLocationsPopupClose',
    value: function searchLocationsPopupClose() {
      this.removeSearchLocations();
    }

    // add maker for idenSearchLocations
    // @param { Object } location object lat long
    // @param { Object } icon leaflet icon used as maker on map

  }, {
    key: 'addMaker',
    value: function addMaker(location, icon) {
      this.marker = _leaflet2.default.marker([location.lat, location.lng], { icon: icon });
      this.mapComponent.map.addLayer(this.marker);
    }

    // remove old SearchLocations

  }, {
    key: 'removeSearchLocations',
    value: function removeSearchLocations() {
      // clear old locations
      if ((0, _utilitys.checkValidObject)(this.marker)) {
        this.mapComponent.map.removeLayer(this.marker);
      }

      // ga event action, category, label
      (0, _utilitys.googleAnalyticsEvent)('click', 'searchbox', 'close');

      // remove the last location
      store.removeStateItem('mapSearchLocations');
    }

    // add search locations popup from the state store
    // @param { Boolean } zoomtolocation true zooms to location false just draws
    // default is false

  }, {
    key: 'addSearchLocationsMarker',
    value: function addSearchLocationsMarker() {
      var zoomtolocation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      // check the mapclick variable. if map clicked restore the state
      var _store$getStateItem = store.getStateItem('mapSearchLocations'),
          location = _store$getStateItem.location;

      // ensure the mapSearchLocations state is a valid object


      if ((0, _utilitys.checkValidObject)(location)) {
        // get the custom map marker icon for the SearchLocations result
        var icon = SearchLocations.createSearchLocationsIcon();

        // zoom to location if searched we will not on restore (browser refresh)
        if (zoomtolocation) {
          // set map view to coordinates of the first item in the results and the zoom level to 18
          this.mapComponent.map.setView(location, 16);
        }

        // add marker at location to the map
        this.addMaker(location, icon);
      }
    }

    // handler for adding the location as an mapInfo point

  }, {
    key: 'addSearchLocationsHandler',
    value: function addSearchLocationsHandler() {
      var _this3 = this;

      // get the search location buttons holder element
      var iButtonElement = document.getElementById('searchlocations-buttons');

      // make the element exists in the dom
      if (iButtonElement !== null) {
        // add labels for assessabbility
        var SearchLocationsCloseButtonElement = document.querySelector('.search-locations-popup .leaflet-popup-close-button');
        SearchLocationsCloseButtonElement.setAttribute('aria-label', 'Close Locations');
        SearchLocationsCloseButtonElement.setAttribute('title', 'Close Locations');

        // add the click handler to parent element of buttons
        iButtonElement.addEventListener('click', function (ev) {
          // if clicked child or explore buttton
          if (ev.target.id === 'e-btn' || (0, _utilitys.ParentContains)(ev.target, 'e-btn')) {
            _this3.addSearchLocationsExploreHandler();
            // ga event action, category, label
            (0, _utilitys.googleAnalyticsEvent)('click', 'searchbox ' + store.getStateItem('activeNav'), 'exlpore');
          }
          // if clicked child or mapinfo buttton
          if (ev.target.id === 'i-btn' || (0, _utilitys.ParentContains)(ev.target, 'i-btn')) {
            _this3.addSearchLocationsMapInfoHandler();
            // ga event action, category, label
            (0, _utilitys.googleAnalyticsEvent)('click', 'searchbox ' + store.getStateItem('activeNav'), 'mapinfo');
          }
        });
      }
    }

    // handler for adding the location as an mapInfo point

  }, {
    key: 'addSearchLocationsMapInfoHandler',
    value: function addSearchLocationsMapInfoHandler() {
      // spinnerOn();
      // remove old marker
      this.mapInfoComponent.removeMapMarker();

      // add new marker location to store so the new marker can be added
      store.setStoreItem('mapClick', store.getStateItem('mapSearchLocations').location);

      // add the marker for the mapinfo from the mapinfo component
      this.mapInfoComponent.retreiveMapClick();

      // remove search locations so there is not duplicate points
      this.removeSearchLocations();
    }
  }, {
    key: 'addSearchLocationsExploreHandler',
    value: function addSearchLocationsExploreHandler() {
      // spinnerOn();
      if (this.markerBounds !== undefined) {
        this.mapInfoComponent.map.removeLayer(this.markerBounds);
      }

      // clear old user area
      // remove existing Area
      // this.exploreComponent.drawAreaGroup.clearLayers();
      store.removeStateItem('userarea');

      var shapecount = store.getStateItem('userareacount');

      // sometimes with the search by location the the count is returned as an object
      // if that is the case capture it and make it zero
      if (!Number.isInteger(shapecount)) {
        shapecount = 0;
      }

      store.setStoreItem('userareacount', shapecount + 1);
      // add the user area. in this case the user area is a point
      // we are running zonal states so we need a polygon. we are using a small
      // bounding box of "50" meters for now we may need to make 1 kilomter later
      // to pass to the zonal stats api
      var userArea = store.getStateItem('mapSearchLocations').location;
      var center = _leaflet2.default.latLng(userArea.lat, userArea.lng);
      var bounds = center.toBounds(50);

      var latlngs = [];

      // get the corners of the box so we can convert it too geoJSON
      latlngs.push(bounds.getSouthWest()); // bottom left
      latlngs.push(bounds.getSouthEast()); // bottom right
      latlngs.push(bounds.getNorthEast()); // top right
      latlngs.push(bounds.getNorthWest()); // top left

      // create a polygon. leaflet can only convert shapes, markers to geoJSON
      var userPoly = _leaflet2.default.polygon(latlngs);
      var userPolyGeoJSON = userPoly.toGeoJSON();

      // add the geoJSON to the store
      store.setStoreItem('userarea', userPolyGeoJSON);

      // add the shape to the map
      this.exploreComponent.drawUserArea();

      // remove old search locations? do I need this?
      this.removeSearchLocations();
      store.setStoreItem('working_search', false);
      (0, _utilitys.spinnerOff)('addSearchLocationsExploreHandler');
    }

    // Check for DOM animation.  This would include map
    // zooms, pans, etc.  We check becuase we cannot do things
    // like add a popup until the map completes this - it seems map will
    // not complete intialize until this is finsished

  }, {
    key: 'checkAnimation',
    value: function checkAnimation() {
      var element = this.mapComponent.map.getContainer();
      if (element !== null) {
        window.requestAnimationFrame(this.checkAnimation(element));
      } else {
        return true;
      }
      return true;
    }

    // we need to check if the popup is open so we don't
    // render multiple popups

  }, {
    key: 'checkPopupOpen',
    value: function checkPopupOpen() {
      if ((0, _utilitys.checkValidObject)(this.marker)) {
        return this.marker.isPopupOpen();
      }
      return false;
    }

    // just add the popup to map

  }, {
    key: 'drawPopup',
    value: function drawPopup() {
      var location = SearchLocations.getSearchLocationsLatLong();
      var popup = this.addSearchLocationsPopup(location, -123);

      if ((0, _utilitys.checkValidObject)(popup)) {
        // set popup close handler
        popup.on('popupclose', this.popupCloseHandler.bind(this));
      }

      this.mapComponent.map.invalidateSize();
    }

    // if map tiles are drawing for a base map leaflet will not
    // place the popup in the correct lication so we must wait till they
    // have completed to draw.
    // second we also have to make sure there is no popup already open
    // when panning or zooming otherwise it will draw multiple
    // popups.  When a new search is initated it will first delete the
    // popup so the new location should render once
    // TODO handle no basemap redraw aka the search subsequent search
    // locations are similar

  }, {
    key: 'addSearchLocationPopup',
    value: function addSearchLocationPopup() {
      var _this4 = this;

      // spinnerOn();
      // see if popup is open
      var check = false;
      if ((0, _utilitys.checkValidObject)(this.marker)) {
        check = this.marker.isPopupOpen();
      }

      // have to set time the popup is not added to the dom immediately
      // so we must wait a very breif time to add the marker and popup.
      // otherwise the popup will be appear in the wrong location
      if (this.checkAnimation) {
        // needs to work when nothing loaded too
        this.mapComponent.map.on('basemaploaded', function () {
          // find if popu is currently open so we avoid
          // opening multiple instances
          check = _this4.checkPopupOpen();

          // only open the popup if it's not avoid s
          // opening multiple instances
          if (!check) {
            _this4.drawPopup();
            store.setStoreItem('working_search', false);
            (0, _utilitys.spinnerOff)('addSearchLocationsExploreHandler not finsiehd');
          }
        });
      } else {
        store.setStoreItem('working_search', false);
        (0, _utilitys.spinnerOff)('addSearchLocationsExploreHandler failed lookup');
      }

      store.setStoreItem('working_search', false);
      (0, _utilitys.spinnerOff)('addSearchLocationsExploreHandler failed lookup');
    }

    // handler for closing popup

  }, {
    key: 'popupCloseHandler',
    value: function popupCloseHandler() {
      this.removeSearchLocations();
      // ga event action, category, label
      (0, _utilitys.googleAnalyticsEvent)('click', 'searchbox', 'popup close');
    }

    // restore the state form map info/identify

  }, {
    key: 'restoreSearchLocationsState',
    value: function restoreSearchLocationsState() {
      // add search location marker
      this.addSearchLocationsMarker(false);
      this.addSearchLocationPopup();
    }

    // add the search location popup to the maker (searched location)
    // @param { Object } location (marker) object lat long
    // @param { Integer } offsetx for offseting the popup
    // for some reason when I restore the offset is different so I have
    // pass it differently for search and add and restore and add

  }, {
    key: 'addSearchLocationsPopup',
    value: function addSearchLocationsPopup(location, offsetx) {
      if ((0, _utilitys.checkValidObject)(this.marker)) {
        var content = SearchLocations.getSearchLocationsLabel();

        // ga event action, category, label
        (0, _utilitys.googleAnalyticsEvent)('return', 'searchbox', content);

        var oldContentElement = document.getElementById('searchlocations_list');
        if (oldContentElement !== null) {
          oldContentElement.parentNode.removeChild(oldContentElement);
        }

        // get the SearchLocations html document and udpate
        // the content with returned values
        var doc = SearchLocations.getDocument();

        // get the Explore button element
        var element = doc.getElementById('searchlocations-content');
        if (element !== undefined && element !== null) {
          element.innerHTML = content;
        }

        // add the search locations html template to a dom element
        // so we can add the element as a leaflet popup
        var searchlocationsEl = doc.getElementById('searchlocations_list');
        var searchlocationsContent = _leaflet2.default.Util.template(searchlocationsEl.outerHTML);

        // create popup object and bind it to location marker
        var popup = this.marker.bindPopup(searchlocationsContent, {
          autoClose: false,
          closeOnClick: false,
          opacity: 0.9,
          autoPan: false,
          className: 'search-locations-popup',
          offset: _leaflet2.default.point(offsetx, 20)
        });

        // open popup if location is valid
        if ((0, _utilitys.checkValidObject)(location)) {
          // open popup
          this.marker.openPopup(location);
          // add handler for parent button element
          // need parent to deal with lag in dom manipulation
          // with bootstrap, fontawesome, and leaflet
          this.addSearchLocationsHandler();
        }
        // return the popup object
        return popup;
      }
      return null;
    }

    // get text label from searched location from statore

  }], [{
    key: 'searchBoxExpandFocusHandler',
    value: function searchBoxExpandFocusHandler(ev) {
      var elem = document.querySelector('.geocoder-control');
      elem.classList.add('collapse-focus');
      if (window.screen.availWidth < 769) {
        var dnoneElem = document.querySelector('.leaflet-bottom.leaflet-left');
        if (dnoneElem) {
          dnoneElem.classList.add('d-none');
        }

        var dnoneRightElem = document.querySelector('.leaflet-top.leaflet-right');
        if (dnoneRightElem) {
          dnoneRightElem.classList.add('d-none');
        }

        var dnoneBntElem = document.querySelector('.maplayerslisttoggle-collapse');
        if (dnoneBntElem) {
          dnoneBntElem.classList.add('d-none');
        }

        var attElem = document.querySelector('.leaflet-control-attribution');
        if (attElem) {
          attElem.classList.add('d-none');
        }
      }
    }
  }, {
    key: 'searchBoxExpandBlurHandler',
    value: function searchBoxExpandBlurHandler(ev) {
      var elem = document.querySelector('.geocoder-control');
      elem.classList.remove('collapse-focus');
      var dnoneElem = document.querySelector('.leaflet-bottom.leaflet-left');
      if (dnoneElem) {
        dnoneElem.classList.remove('d-none');
      }

      var dnoneRightElem = document.querySelector('.leaflet-top.leaflet-right');
      if (dnoneRightElem) {
        dnoneRightElem.classList.remove('d-none');
      }

      var dnoneBntElem = document.querySelector('.maplayerslisttoggle-collapse');
      if (dnoneBntElem) {
        dnoneBntElem.classList.remove('d-none');
      }

      var attElem = document.querySelector('.leaflet-control-attribution');
      if (attElem) {
        attElem.classList.remove('d-none');
      }
    }
  }, {
    key: 'getSearchLocationsLabel',
    value: function getSearchLocationsLabel() {
      // check the mapclick variable. if map clicked restore the state
      var mapSearchLocations = store.getStateItem('mapSearchLocations');
      if ((0, _utilitys.checkValidObject)(mapSearchLocations)) {
        return mapSearchLocations.label;
      }
      return '';
    }

    // get location x y searched location from statore

  }, {
    key: 'getSearchLocationsLocation',
    value: function getSearchLocationsLocation() {
      // check the mapclick variable. if map clicked restore the state
      var mapSearchLocations = store.getStateItem('mapSearchLocations');
      if ((0, _utilitys.checkValidObject)(mapSearchLocations)) {
        return mapSearchLocations.location;
      }
      return '';
    }

    // create a html dom element for the SearchLocations html template

  }, {
    key: 'getDocument',
    value: function getDocument() {
      var parser = new DOMParser();
      return parser.parseFromString(_searchlocations2.default, 'text/html');
    }

    // return lat long of search location from store

  }, {
    key: 'getSearchLocationsLatLong',
    value: function getSearchLocationsLatLong() {
      return _leaflet2.default.latLng(SearchLocations.getSearchLocationsLocation().lat, SearchLocations.getSearchLocationsLocation().lng);
    }

    // creates custom icon and adds css class for styling

  }, {
    key: 'createSearchLocationsIcon',
    value: function createSearchLocationsIcon() {
      return _leaflet2.default.divIcon({ className: 'searchlocations-point' });
    }

    // save the search results to the state store

  }, {
    key: 'saveResultsToStore',
    value: function saveResultsToStore(data) {
      // save location to store
      // only retrieve first item (need to remove multiselect)
      store.setStoreItem('mapSearchLocations', { location: data.results[0].latlng, label: data.results[0].properties.ShortLabel });
    }
  }]);

  return SearchLocations;
}(_components.Component);

/***/ }),

/***/ "./src/scripts/shareurl.js":
/*!*********************************!*\
  !*** ./src/scripts/shareurl.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShareUrl = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _leaflet = __webpack_require__(/*! leaflet */ "./node_modules/leaflet/dist/leaflet-src.js");

var _leaflet2 = _interopRequireDefault(_leaflet);

var _components = __webpack_require__(/*! ./components */ "./src/scripts/components.js");

var _store = __webpack_require__(/*! ./store */ "./src/scripts/store.js");

var _shareurl = __webpack_require__(/*! ../templates/shareurl.html */ "./src/templates/shareurl.html");

var _shareurl2 = _interopRequireDefault(_shareurl);

var _utilitys = __webpack_require__(/*! ./utilitys */ "./src/scripts/utilitys.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // todo:
// spinner on when restoring not working.

// dependencies


var store = new _store.Store({});

// required for bootstrap
window.$ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
// required for tooltip, popup...
window.Popper = __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js");

window.jQuery = window.$;

/**
* handles the identify interactions on the map
* dosen't not deal with lambda api call but it does make that call
* it does deal with the response information
* and generally handles adding any shapes to the map.
*/

var ShareUrl = exports.ShareUrl = function (_Component) {
  _inherits(ShareUrl, _Component);

  function ShareUrl(placeholderId, props) {
    _classCallCheck(this, ShareUrl);

    var _this = _possibleConstructorReturn(this, (ShareUrl.__proto__ || Object.getPrototypeOf(ShareUrl)).call(this, placeholderId, props, _shareurl2.default));

    var mapComponent = props.mapComponent,
        URLCls = props.URLCls,
        hasShareURL = props.hasShareURL;

    _this.mapComponent = mapComponent;
    _this.URL = URLCls;
    _this.hasShareURL = hasShareURL;

    _this.map = mapComponent.map;
    _this.mapComponent = mapComponent;
    _this.shareurl = '';

    _this.shareurlTemplate = _shareurl2.default;

    // this.addShareUrlControl(this.map);
    store.setStoreItem('nothing', 'nothing');
    return _this;
  }

  // add Identify control to leaflet map


  _createClass(ShareUrl, [{
    key: 'addShareUrlControl',
    value: function addShareUrlControl(leafletmap) {
      _leaflet2.default.Control.Watermark = _leaflet2.default.Control.extend({
        onAdd: ShareUrl.mapShareURLMakerOnAddHandler,

        // Nothing to do here
        onRemove: ShareUrl.mapShareURLakerOnRemoveHandler
      });

      _leaflet2.default.control.watermark = function (opts) {
        return new _leaflet2.default.Control.Watermark(opts);
      };

      _leaflet2.default.control.watermark({ position: 'bottomleft' }).addTo(leafletmap);

      // get btn for share URL add click event
      var leafletControlElement = document.querySelector('.btn-mapshareurl');
      leafletControlElement.addEventListener('click', ShareUrl.makeShareUrlHandler.bind(this));
    }

    // share url (identify) control (button) on add function.
    // fires when the control (button) is removed

  }, {
    key: 'buildShareURLBox',
    value: function buildShareURLBox() {
      var shareBox = new DOMParser();
      var docShareBox = shareBox.parseFromString(this.shareurlTemplate, 'text/html');
      var elemShareBox = docShareBox.getElementById('shareurl-holder');
      var innerHTMLShareBox = elemShareBox.innerHTML;

      var newdiv = document.createElement('div');
      newdiv.setAttribute('id', 'shareurl-holder');
      newdiv.innerHTML = innerHTMLShareBox;
      var checkShareBox = document.getElementById('shareurl-holder');

      // make sure the share box dose not already exist
      if (!checkShareBox) {
        document.getElementById('btn-mapshareurl-holder').appendChild(newdiv);
      }
      return newdiv;
    }
  }, {
    key: 'addShareURLListners',
    value: function addShareURLListners() {
      var _this2 = this;

      var createShareURLCopyButton = document.querySelector('.btn-copy-share');
      var shareUrlBox = document.getElementById('shareurltextarea');

      shareUrlBox.addEventListener('click', ShareUrl.copyToClipboard);
      shareUrlBox.addEventListener('click', function (e) {
        var shareurl = document.getElementById('shareurltextarea');
        shareurl.value = _this2.URL.getShareUrl();
        // ga event action, category, label
        (0, _utilitys.googleAnalyticsEvent)('click', 'shareurl', shareurl.value);

        ShareUrl.copyToClipboard(e);
      });

      createShareURLCopyButton.addEventListener('click', ShareUrl.copyToClipboard);
      createShareURLCopyButton.addEventListener('click', function (e) {
        var shareurl = document.getElementById('shareurltextarea');
        shareurl.value = _this2.URL.getShareUrl();
        // ga event action, category, label
        (0, _utilitys.googleAnalyticsEvent)('click', 'shareurl', shareurl.value);
        ShareUrl.copyToClipboard(e);
      });

      var collapse = document.querySelector('.btn-close-share');
      collapse.addEventListener('click', ShareUrl.disableShareUrl.bind(this));
      ShareUrl.enableShareUrl();

      // createShareURLCopyButton.classList.remove('disabled');
    }

    // save shapes to s3 so we can share user added shapes from a URL
    // async saveShapesToS3 () {

  }, {
    key: 'makeSharedURL',
    value: function makeSharedURL() {
      this.buildShareURLBox();
      this.shareurl = this.URL.getShareUrl();
      var shareUrlBox = document.getElementById('shareurltextarea');
      shareUrlBox.value = this.shareurl;

      this.addShareURLListners();
      return this.shareurl;
    }
  }], [{
    key: 'mapShareURLakerOnRemoveHandler',
    value: function mapShareURLakerOnRemoveHandler(map) {
      // Nothing to do here yet
      return null;
    }
  }, {
    key: 'disableShareUrl',
    value: function disableShareUrl() {
      // ga event action, category, label
      (0, _utilitys.googleAnalyticsEvent)('click', 'shareurl', 'collapse');

      var shareurl = document.getElementById('shareurl-holder');
      if (shareurl) {
        shareurl.classList.add('d-none');
      }
    }
  }, {
    key: 'enableShareUrl',
    value: function enableShareUrl() {
      var shareurl = document.getElementById('shareurl-holder');
      if (shareurl) {
        shareurl.classList.remove('d-none');
      }
    }
  }, {
    key: 'makeShareUrlHandler',
    value: function makeShareUrlHandler() {
      // ga event action, category, label
      (0, _utilitys.googleAnalyticsEvent)('click', 'shareurl', 'open');

      var sharebutton = document.querySelector('.btn-copy-share');
      if (!sharebutton) {
        this.makeSharedURL();
      }

      var shareurl = document.getElementById('shareurl-holder');
      if (shareurl) {
        if (shareurl.classList.contains('d-none')) {
          shareurl.classList.remove('d-none');
        }
      }
    }
  }, {
    key: 'copyToClipboard',
    value: function copyToClipboard(e) {
      e.stopPropagation();
      var textArea = document.getElementById('shareurltextarea');
      if (textArea) {
        textArea.focus();
        textArea.select();
        document.execCommand('copy');
      }
    }

    // share url (identify) control (button) on add function.
    // fires when the control (button) is added

  }, {
    key: 'mapShareURLMakerOnAddHandler',
    value: function mapShareURLMakerOnAddHandler() {
      // setup custom style for share url indentify control (button)
      var origsharebtn = document.getElementById('btn-mapshareurl-holder');
      if (origsharebtn) {
        origsharebtn.outerHTML = '';
      }

      var sharebtn = _leaflet2.default.DomUtil.create('div', 'btn-mapshareurl-holder');
      sharebtn.setAttribute('id', 'btn-mapshareurl-holder');
      sharebtn.innerHTML = '<a class="btn btn-light btn-mapshareurl" title="Share Map" ' + 'role="button" aria-label="Share Map" ' + 'data-toggle="tooltip" data-placement="right" data-original-title="Share Map"> ' + '<i class="fas fa-share-alt i-shareurl">' + '</i><div class="btn-med-share-label" >Share Map</div></a>';

      _leaflet2.default.DomEvent.disableClickPropagation(sharebtn);
      // initalize new tooltips
      $(function () {
        $('#btn-mapshareurl-holder [data-toggle="tooltip"]').tooltip({ trigger: 'hover' });
      });

      return sharebtn;
    }

    // creates custom icon and adds css class for styling

  }, {
    key: 'createMapShareURLIcon',
    value: function createMapShareURLIcon() {
      return _leaflet2.default.divIcon({ className: 'map-shareurl-point' });
    }
  }, {
    key: 'createShareURLWrapper',
    value: function createShareURLWrapper() {
      var wrapper = document.createElement('div');
      wrapper.setAttribute('id', 'shareurl-holder');
      wrapper.innerHTML = '';
      return wrapper;
    }
  }]);

  return ShareUrl;
}(_components.Component);

/***/ }),

/***/ "./src/scripts/url.js":
/*!****************************!*\
  !*** ./src/scripts/url.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.URL = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _localStorageAPI = __webpack_require__(/*! ./localStorageAPI */ "./src/scripts/localStorageAPI.js");

var _utilitys = __webpack_require__(/*! ./utilitys */ "./src/scripts/utilitys.js");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var URL_IGNORE_KEYS = ['userarea', 'userarea_buffered', 'HubIntersectionJson', 'NatureServeHubIntersectionJson', 'zonalstatsjson', 'working_basemap', 'working_mapinfo', 'working_zonalstats', 'working_s3retreive', 'working_search', 'working_s3save', 'working_drawlayers', 'userareas', 'savedshapes', 'savedhubs', 'savedNatureServeHubs', 'userareacount', 'mapinfo', 'mapinfons', 'uuid'];

var SHARE_URL_IGNORE_KEYS = ['userarea', 'userarea_buffered', 'HubIntersectionJson', 'NatureServeHubIntersectionJson', 'zonalstatsjson', 'working_basemap', 'working_mapinfo', 'working_zonalstats', 'working_s3retreive', 'working_search', 'working_s3save', 'working_drawlayers', 'userareas', 'uuid'];

/**
 * This component listens for the localstoreage to be updated, and will update the url
 * if the browser is able to do so.
 */

var URL = exports.URL = function () {
  function URL() {
    _classCallCheck(this, URL);

    var urlParams = new URLSearchParams(window.location.search);
    this.hasShareURL = urlParams.get('shareurl');

    this.url = new _localStorageAPI.StorageAPI();
    var handler = URL.setUrl.bind(this);
    _localStorageAPI.StorageAPI.listenForStateChange(handler);

    // if there was has shareurl=true in the query string
    // rebuild a URL with the saveshapes state object. otherwise ignore
    // this state item
    if (this.hasShareURL === 'true') {
      this.setShareStateFromURL();
    } else {
      this.setStateFromURL();
    }
  }

  _createClass(URL, [{
    key: 'encodeStateString',
    value: function encodeStateString() {
      var stateStringWithOutIgnoredKeys = this.removeIgnoreKeys();
      return encodeURIComponent(stateStringWithOutIgnoredKeys);
    }
  }, {
    key: 'encodeStateStringShare',
    value: function encodeStateStringShare() {
      var stateStringWithOutIgnoredKeys = this.removeShareIgnoreKeys();
      return encodeURIComponent(stateStringWithOutIgnoredKeys);
    }
  }, {
    key: 'getShareUrl',
    value: function getShareUrl() {
      var state = this.encodeStateStringShare();
      var statestr = this.url.getStateAsString();
      var statesobj = JSON.parse(statestr);

      var baseurl = '' + window.location.origin;

      // handle gh pages dist folder.
      if (baseurl === 'https://southfact.github.io') {
        baseurl += '/southfact-map-v2/dist';
      }

      return baseurl + '/?state=' + state + '&shareurl=true&fornav=' + statesobj.activeNav;
    }
  }, {
    key: 'removeIgnoreKeys',


    // some keys are to big for the URL so we have to ignore them
    // i.e geoJson instead we will have to share the geojson in
    // s3 or github-gists - TODO expand the share geojson to use gists
    // the shape remains in the state store but is removed from the URL
    // use the constant URL_IGNORE_KEY to ignore state items from the URL
    value: function removeIgnoreKeys() {
      // get current state
      var stateOBJ = JSON.parse(this.url.getStateAsString());

      // not state return {} object
      if (!(0, _utilitys.checkValidObject)(stateOBJ)) {
        return {};
      }
      // remove the ignored keys
      var filtered = Object.keys(stateOBJ).filter(function (key) {
        return !URL_IGNORE_KEYS.includes(key);
      }).reduce(function (obj, key) {
        var newobj = _extends({}, obj, _defineProperty({}, key, stateOBJ[key]));
        return newobj;
      }, {});

      // return state string
      return JSON.stringify(filtered);
    }

    // some keys are to big for the URL so we have to ignore them
    // i.e geoJson instead we will have to share the geojson in
    // s3 or github-gists - TODO expand the share geojson to use gists
    // the shape remains in the state store but is removed from the URL
    // use the constant URL_IGNORE_KEY to ignore state items from the URL

  }, {
    key: 'removeShareIgnoreKeys',
    value: function removeShareIgnoreKeys() {
      // get current state
      var stateOBJ = JSON.parse(this.url.getStateAsString());

      // not state return {} object
      if (!(0, _utilitys.checkValidObject)(stateOBJ)) {
        return {};
      }

      // remove the ignored keys
      var filtered = Object.keys(stateOBJ).filter(function (key) {
        return !SHARE_URL_IGNORE_KEYS.includes(key);
      }).reduce(function (obj, key) {
        var newobj = _extends({}, obj, _defineProperty({}, key, stateOBJ[key]));
        return newobj;
      }, {});

      // return state string
      return JSON.stringify(filtered);
    }

    // some keys are to big for the URL so we have to ignore them
    // i.e geoJson instead we will have to share the geojson in
    // s3 or github-gists - TODO expand the share geojson to use gists
    // the shape remains in the state store but is removed from the URL
    // use the constant URL_IGNORE_KEY to ignore state items from the URL
    // this will add the key back to string so we can retain the state in a refersh

  }, {
    key: 'addIgnoreKeys',
    value: function addIgnoreKeys() {
      // get current state
      var stateOBJ = this.url.getState();

      // not state return {} object
      if (!(0, _utilitys.checkValidObject)(stateOBJ)) {
        return '';
      }

      // get current state from url without ignored stae
      var urlstate = URL.getStateFromURL();

      // not state return {} object
      if (!(0, _utilitys.checkValidObject)(urlstate)) {
        return '';
      }
      // convert the URL state string to a object
      var urlstateOBJ = JSON.parse(urlstate);

      // add the ignored keys
      var filtered = Object.keys(stateOBJ).filter(function (key) {
        return URL_IGNORE_KEYS.includes(key);
      }).reduce(function (obj, key) {
        var newobj = _extends({}, obj, _defineProperty({}, key, stateOBJ[key]));
        return newobj;
      }, {});

      // add the ignore state to url state
      var realstate = _extends({}, urlstateOBJ, filtered);

      // return state string
      return JSON.stringify(realstate);
    }

    // some keys are to big for the URL so we have to ignore them
    // i.e geoJson instead we will have to share the geojson in
    // s3 or github-gists - TODO expand the share geojson to use gists
    // the shape remains in the state store but is removed from the URL
    // use the constant URL_IGNORE_KEY to ignore state items from the URL
    // this will add the key back to string so we can retain the state in a refersh

  }, {
    key: 'addShareIgnoreKeys',
    value: function addShareIgnoreKeys() {
      // get current state
      var stateOBJ = this.url.getState();

      // not state return {} object
      if (!(0, _utilitys.checkValidObject)(stateOBJ)) {
        return '';
      }

      // get current state from url without ignored state
      var urlstate = URL.getStateFromURL();

      // not state return {} object
      if (!(0, _utilitys.checkValidObject)(urlstate)) {
        return '';
      }
      // convert the URL state string to a object
      var urlstateOBJ = JSON.parse(urlstate);

      // add the ignored keys
      var filtered = Object.keys(stateOBJ).filter(function (key) {
        return SHARE_URL_IGNORE_KEYS.includes(key);
      }).reduce(function (obj, key) {
        var newobj = _extends({}, obj, _defineProperty({}, key, stateOBJ[key]));
        return newobj;
      }, {});

      // add the ignore state to url state
      var realstate = _extends({}, urlstateOBJ, filtered);

      // return state string
      return JSON.stringify(realstate);
    }

    // TODO: Add handler to ensure the state string is valid and that the end user did not tamper with
    // it.  this is for normal state url

  }, {
    key: 'setStateFromURL',
    value: function setStateFromURL() {
      var addState = this.addIgnoreKeys();
      if (addState) {
        this.url.setStateAsString(addState);
      }
    }

    // TODO: Add handler to ensure the state string is valid and that the end user did not tamper with
    // it this is for the share url URL

  }, {
    key: 'setShareStateFromURL',
    value: function setShareStateFromURL() {
      var addState = this.addShareIgnoreKeys();
      if (addState) {
        this.url.setStateAsString(addState);
      }
    }
  }], [{
    key: 'updateURL',
    value: function updateURL(url) {
      if (window.history && window.history.replaceState) {
        window.history.replaceState({}, '', url);
      }
    }
  }, {
    key: 'setUrl',
    value: function setUrl() {
      var hash = window.location.hash.substr(1);
      URL.updateURL('#' + hash);
    }
  }, {
    key: 'getUrl',
    value: function getUrl() {
      return window.location.search;
    }
  }, {
    key: 'getStateFromURL',
    value: function getStateFromURL() {
      var url = URL.getUrl().substring(1);
      var state = '';
      url.split('&').forEach(function (param) {
        var args = param.split('=');
        if (args[0] === 'state') {
          var _args = _slicedToArray(args, 2);

          state = _args[1];
        }
      });

      return decodeURIComponent(state);
    }
  }]);

  return URL;
}();

/***/ }),

/***/ "./src/scripts/utilitys.js":
/*!*********************************!*\
  !*** ./src/scripts/utilitys.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; // eslint comaplins about L. but its needed to process  mapconfig
// eslint-disable-line


// import classes and configs


// Legend Templates


exports.getIdentifyValue = getIdentifyValue;
exports.toggleElementDisplay = toggleElementDisplay;
exports.numberToWord = numberToWord;
exports.getLegendHtml = getLegendHtml;
exports.groupByDriver = groupByDriver;
exports.checkValidObject = checkValidObject;
exports.spinnerOn = spinnerOn;
exports.checkworking = checkworking;
exports.spinnerOff = spinnerOff;
exports.hardSpinnerOff = hardSpinnerOff;
exports.addStyle = addStyle;
exports.replaceMapInfoValue = replaceMapInfoValue;
exports.ParentContains = ParentContains;
exports.flatten = flatten;
exports.uuid = uuid;
exports.googleAnalyticsEvent = googleAnalyticsEvent;
exports.formatMapInfoChartData = formatMapInfoChartData;
exports.formatChartData = formatChartData;
exports.makeBasicBarChart = makeBasicBarChart;
exports.addDownloadGoogleEvents = addDownloadGoogleEvents;
exports.addMissingStateItems = addMissingStateItems;

var _leaflet = __webpack_require__(/*! leaflet */ "./node_modules/leaflet/dist/leaflet-src.js");

var _leaflet2 = _interopRequireDefault(_leaflet);

var _chart = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/Chart.js");

var _chart2 = _interopRequireDefault(_chart);

var _store = __webpack_require__(/*! ./store */ "./src/scripts/store.js");

var _identifyConfig = __webpack_require__(/*! ../config/identifyConfig */ "./src/config/identifyConfig.js");

var _mapConfig = __webpack_require__(/*! ../config/mapConfig */ "./src/config/mapConfig.js");

var _colorramp_breaks_fifteen = __webpack_require__(/*! ../templates/colorramp_breaks_fifteen.html */ "./src/templates/colorramp_breaks_fifteen.html");

var _colorramp_breaks_fifteen2 = _interopRequireDefault(_colorramp_breaks_fifteen);

var _colorramp_breaks_fourteen = __webpack_require__(/*! ../templates/colorramp_breaks_fourteen.html */ "./src/templates/colorramp_breaks_fourteen.html");

var _colorramp_breaks_fourteen2 = _interopRequireDefault(_colorramp_breaks_fourteen);

var _colorramp_breaks_ten = __webpack_require__(/*! ../templates/colorramp_breaks_ten.html */ "./src/templates/colorramp_breaks_ten.html");

var _colorramp_breaks_ten2 = _interopRequireDefault(_colorramp_breaks_ten);

var _colorramp_breaks_nine = __webpack_require__(/*! ../templates/colorramp_breaks_nine.html */ "./src/templates/colorramp_breaks_nine.html");

var _colorramp_breaks_nine2 = _interopRequireDefault(_colorramp_breaks_nine);

var _colorramp_breaks_eight = __webpack_require__(/*! ../templates/colorramp_breaks_eight.html */ "./src/templates/colorramp_breaks_eight.html");

var _colorramp_breaks_eight2 = _interopRequireDefault(_colorramp_breaks_eight);

var _colorramp_breaks_seven = __webpack_require__(/*! ../templates/colorramp_breaks_seven.html */ "./src/templates/colorramp_breaks_seven.html");

var _colorramp_breaks_seven2 = _interopRequireDefault(_colorramp_breaks_seven);

var _colorramp_breaks_six = __webpack_require__(/*! ../templates/colorramp_breaks_six.html */ "./src/templates/colorramp_breaks_six.html");

var _colorramp_breaks_six2 = _interopRequireDefault(_colorramp_breaks_six);

var _colorramp_breaks_five = __webpack_require__(/*! ../templates/colorramp_breaks_five.html */ "./src/templates/colorramp_breaks_five.html");

var _colorramp_breaks_five2 = _interopRequireDefault(_colorramp_breaks_five);

var _colorramp_breaks_four = __webpack_require__(/*! ../templates/colorramp_breaks_four.html */ "./src/templates/colorramp_breaks_four.html");

var _colorramp_breaks_four2 = _interopRequireDefault(_colorramp_breaks_four);

var _colorramp_breaks_three = __webpack_require__(/*! ../templates/colorramp_breaks_three.html */ "./src/templates/colorramp_breaks_three.html");

var _colorramp_breaks_three2 = _interopRequireDefault(_colorramp_breaks_three);

var _colorramp_breaks_two = __webpack_require__(/*! ../templates/colorramp_breaks_two.html */ "./src/templates/colorramp_breaks_two.html");

var _colorramp_breaks_two2 = _interopRequireDefault(_colorramp_breaks_two);

var _colorramp_breaks_one = __webpack_require__(/*! ../templates/colorramp_breaks_one.html */ "./src/templates/colorramp_breaks_one.html");

var _colorramp_breaks_one2 = _interopRequireDefault(_colorramp_breaks_one);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var store = new _store.Store({});
var WMSLayers = _mapConfig.mapConfig.WMSLayers;

// Parses the configuration of identify values and gets the requested configuration object
// @param type | String - matches the layer key
// @param rank | String || Number - rounded and matches the value key
// @return Object

function getIdentifyValue(type, rank) {
  var identifyData = _identifyConfig.identifyConfig.colorLookup;
  var trueRank = Math.round(typeof rank !== 'number' ? parseFloat(rank) : rank);
  var item = void 0;
  var i = void 0;
  var l = void 0;

  for (i = 0, l = identifyData.length; i < l; i += 1) {
    item = identifyData[i];
    if (item.layer === type && item.value === trueRank) {
      break;
    }
  }

  return item;
}

/**
 * update the display of element
 *  @param { Object } element - Element object from click event, used to toggle
 *                   display state
 */
function toggleElementDisplay(thisEle, elements) {
  elements.forEach(function (ele) {
    var name = ele.replace('main_nav_', '');
    var tabEle = document.querySelector('[ref="tab-' + name + '"]');
    var mapClass = tabEle.className;
    var newMapClass = mapClass + (mapClass.indexOf(' d-none') > 0) ? ' ' : 'd-none';

    tabEle.className = newMapClass;
  });
}

// convert a number to to the word representation
// of the number.  We are using the word in the HTML class
// and will use this to highlight the value in the chart details
function numberToWord(number) {
  var numberWord = 'none';

  switch (number) {
    case 0:
      numberWord = 'none';
      break;
    case 1:
      numberWord = 'one';
      break;
    case 2:
      numberWord = 'two';
      break;
    case 3:
      numberWord = 'three';
      break;
    case 4:
      numberWord = 'four';
      break;
    case 5:
      numberWord = 'five';
      break;
    case 6:
      numberWord = 'six';
      break;
    case 7:
      numberWord = 'seven';
      break;
    case 8:
      numberWord = 'eight';
      break;
    case 9:
      numberWord = 'nine';
      break;
    case 10:
      numberWord = 'ten';
      break;
    case 11:
      numberWord = 'eleven';
      break;
    case 12:
      numberWord = 'twelve';
      break;
    case 13:
      numberWord = 'thirteen';
      break;
    case 14:
      numberWord = 'fourteen';
      break;
    case 15:
      numberWord = 'fifteen';
      break;
    case 16:
      numberWord = 'sixteen';
      break;
    case 17:
      numberWord = 'seventeen';
      break;
    case 18:
      numberWord = 'eightteen';
      break;
    case 19:
      numberWord = 'nineteen';
      break;
    case 20:
      numberWord = 'twenty';
      break;
    default:
  }
  return numberWord;
}

// Returns the HTML for a specified legend type
//
// @param type | String
// @return String
function getLegendHtml(maxValue) {
  switch (maxValue) {
    case 15:
      return _colorramp_breaks_fifteen2.default;
    case 14:
      return _colorramp_breaks_fourteen2.default;
    case 10:
      return _colorramp_breaks_ten2.default;
    case 9:
      return _colorramp_breaks_nine2.default;
    case 8:
      return _colorramp_breaks_eight2.default;
    case 7:
      return _colorramp_breaks_seven2.default;
    case 6:
      return _colorramp_breaks_six2.default;
    case 5:
      return _colorramp_breaks_five2.default;
    case 4:
      return _colorramp_breaks_four2.default;
    case 3:
      return _colorramp_breaks_three2.default;
    case 2:
      return _colorramp_breaks_two2.default;
    case 1:
      return _colorramp_breaks_one2.default;
    default:
      return _colorramp_breaks_ten2.default;
  }
}

// Reformats data for the drivers of inputs
// @param data | Object - all data from the API
// @return Array
function groupByDriver(collection, property) {
  var val = void 0;
  var index = void 0;
  var values = [];
  var result = [];
  Object.keys(collection).forEach(function (prop) {
    val = collection[prop][property];
    index = values.indexOf(val);
    if (index > -1) {
      result[index].push(collection[prop]);
    } else {
      values.push(val);
      result.push([collection[prop]]);
    }
  });
  return result;
}

// ensure the object or variable is valid...
// TODO: This should probably be looking for positives rather than checking it
// isn't one of a few negatives. For example this will let booleans, malformed
// lat/long objects, arrays and floats through when it probably shouldn't. The
// code doesn't really say what a valid object is other than not undefined,
// null, empty arrays, empty objects and empty strings.
//
// @param obj - typeless
function checkValidObject(obj) {
  if (obj === undefined || obj === null) {
    return false;
  }
  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && Object.keys(obj).length === 0) {
    return false;
  }
  if (typeof obj === 'string' && obj.length === 0) {
    return false;
  }

  return true;
}

// toggle spinner visibility on
function spinnerOn() {
  var el = document.getElementById('map-working');
  var elHolder = document.querySelector('.leaflet-working');

  // ensure elements and class names exists
  if (el === undefined) {
    return false;
  }
  if (el.className.baseVal === undefined) {
    return false;
  }
  if (elHolder === undefined) {
    return false;
  }
  if (elHolder.className === undefined) {
    return false;
  }

  // update class for svg spinner
  var elClassName = el.className.baseVal;
  el.className.baseVal = elClassName.replace(' d-none', '');

  // update class for div element that holds svg.  Do this so it dose not cover
  // cover other map elements and panes
  elHolder.className = elHolder.className.replace(' d-none', '');
  elHolder.className = elHolder.className.replace('h-100', '');
  elHolder.className = elHolder.className.replace('w-100', '');
  elHolder.className += ' h-100';
  elHolder.className += ' w-100';

  return true;
}

// check if one of our ajax calls is working
// if we add anymore we will need to add it here
function checkworking() {
  var workingDrawlayers = store.getStateItem('working_drawlayers');
  if (workingDrawlayers) {
    return true;
  }
  // console.log('working_drawlayers');

  var workingBasemap = store.getStateItem('working_basemap');
  if (workingBasemap) {
    return true;
  }
  // console.log('working_basemap');

  var workingMapinfo = store.getStateItem('working_mapinfo');
  if (workingMapinfo) {
    return true;
  }
  // console.log('working_mapinfo');

  var workingZonalstats = store.getStateItem('working_zonalstats');
  if (workingZonalstats) {
    return true;
  }
  // console.log('working_zonalstats');

  var workingSearch = store.getStateItem('working_search');
  if (workingSearch) {
    return true;
  }
  // console.log('working_search');

  var workingS3Retreive = store.getStateItem('working_s3retreive');
  if (workingS3Retreive) {
    return true;
  }
  // console.log('working_s3retreive');

  var workingS3Save = store.getStateItem('working_s3save');
  if (workingS3Save) {
    return true;
  }
  // console.log('working_s3save');

  return false;
}

// toggle spinner visibility off
function spinnerOff() {
  var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  if (checkworking()) {
    return false;
  }

  var el = document.getElementById('map-working');
  var elHolder = document.querySelector('.leaflet-working');

  // ensure elements and class names exists
  if (el === undefined) {
    return false;
  }
  if (el.className.baseVal === undefined) {
    return false;
  }
  if (elHolder === undefined) {
    return false;
  }
  if (elHolder.className === undefined) {
    return false;
  }

  // update class for svg spinner
  var elClassName = el.className.baseVal;
  el.className.baseVal = elClassName.replace(' d-none', '');
  el.className.baseVal += ' d-none';

  // update class for div element that holds svg.  Do this so it dose not cover
  // cover other map elements and panes
  elHolder.className = elHolder.className.replace(' d-none', '');
  elHolder.className = elHolder.className.replace('h-100', '');
  elHolder.className = elHolder.className.replace('w-100', '');
  elHolder.className += ' d-none';

  return true;
}

// toggle spinner visibility off
function hardSpinnerOff() {
  var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var el = document.getElementById('map-working');
  var elHolder = document.querySelector('.leaflet-working');

  // ensure elements and class names exists
  if (el === undefined) {
    return false;
  }
  if (el.className.baseVal === undefined) {
    return false;
  }
  if (elHolder === undefined) {
    return false;
  }
  if (elHolder.className === undefined) {
    return false;
  }

  // update class for svg spinner
  var elClassName = el.className.baseVal;
  el.className.baseVal = elClassName.replace(' d-none', '');
  el.className.baseVal += ' d-none';

  // update class for div element that holds svg.  Do this so it dose not cover
  // cover other map elements and panes
  elHolder.className = elHolder.className.replace(' d-none', '');
  elHolder.className = elHolder.className.replace('h-100', '');
  elHolder.className = elHolder.className.replace('w-100', '');
  elHolder.className += ' d-none';

  return true;
}

// TODO: Either generalize this so it isn't always background color and color but instead
// an attribute/value pair. Or preferably make this use classes so we can have the colors
// be in css.
function addStyle(doc, type, values) {
  var element = doc.getElementById(type + '-score');
  if (element !== undefined && element !== null) {
    element.setAttribute('style', 'background-color: ' + values.backgroundColor + '; color: ' + values.color + ';');
  }
}

// Note that the back-ticks are intentional. They use the new ES6 Template
// Literals pattern.
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
function replaceMapInfoValue(doc, type, values) {
  var element = doc.getElementById(type + '-score');
  if (element !== undefined && element !== null) {
    element.textContent = values.label;
  }
}

// check if a parentelemet contains a dom id
// deals with event bubbling so we can check
// if the child is in a specifc parent
function ParentContains(target, id) {
  for (var p = target && target.parentElement; p; p = p.parentElement) {
    if (p.id === id) {
      return true;
    }
  }
  return false;
}

function flatten(arr) {
  var flat = [];
  arr.forEach(function (d) {
    if (Array.isArray(d)) {
      flat.push.apply(flat, _toConsumableArray(d));
    } else {
      flat.push(d);
    }
  });
  return flat;
}

function uuid() {
  return crypto.getRandomValues(new Uint32Array(4)).join('-');
}

// adds a custom google events
function googleAnalyticsEvent() {
  var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var category = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var value = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
}
// gtag('event', action, {  // eslint-disable-line
//   event_category: category,
//   event_label: label,
//   value: `${value}`,
//   uuid: store.getStateItem('uuid')
// });


// Checks if a value falls in the range of accepted values
// @param val | string || integer || float
// @return boolean
function checkNoData(val) {
  return Number.isNaN(Number.parseFloat(val)) || Number.parseInt(val, 10) === 255;
}

// This function finds the scaled position of a value from [0,100]
// It does the addition of scale and division by scaleGroups since the value falls into one of
// multiple ranges and so it needs to put the scaled value into the correct area.
//
// @param val - float
// @param rangeMin - int
// @param rangeMax - int
// @param scale - int. [0,scaleGroups - 1]
// @param scaleGroups - int. Number of groups the value could be scaled for. [1,]
// TODO ADD TO MAPCONFIG nodata value overide
function getValuePosition(val, rangeMin, rangeMax, scale, scaleGroups) {
  var valOveride = val;
  // no data overide
  if (val === '255') {
    valOveride = 0;
  }
  if (val === '255.0') {
    valOveride = 0;
  }
  if (val === '128') {
    valOveride = 0;
  }
  if (val === '128.0') {
    valOveride = 0;
  }
  var position = (valOveride - rangeMin) / (rangeMax - 1 - rangeMin); // [0,1]
  position += scale; // [0,scaleGroups]
  position = position / scaleGroups * 100; // [0, 100]
  if (position === 100) {
    position = 99;
  }
  return position;
}

// generic function for chartdata and identify data formating
function chartDataReformat(allchartdata) {
  var configchartdata = [];
  // map the chart data object to transform labels and groups
  allchartdata.forEach(function (area) {
    var regionLayers = WMSLayers.filter(function (layers) {
      return layers.region === area.region;
    });

    // get chart groups from mapConfig
    var driverGroups = groupByDriver(regionLayers, 'chartInputName');

    // iterate the the chart groups to ensure data is seperated by chart type
    // all of this is dervived from mapConfig
    Object.keys(driverGroups).forEach(function (group) {
      // get group name
      var grouplayers = driverGroups[group];
      var groupname = grouplayers[0].chartInputName;
      var grouplabel = grouplayers[0].chartInpuLabel;
      var totalChartValues = area.statistics.length - 1;
      var values = [totalChartValues];
      var hovervalues = [totalChartValues];
      var labels = [totalChartValues];
      var colors = [totalChartValues];

      // iterate the zonal stats and remap values to mapconfig chart types
      Object.keys(area.statistics).forEach(function (statisticskey) {
        var configlayer = grouplayers.filter(function (layer) {
          return layer.apikey === statisticskey;
        });

        // apikey match could is different for hubs will work on this later to make names consistent
        if (area.source === 'nfwf_hubs' || area.source === 'mapinfo_ns') {
          configlayer = grouplayers.filter(function (layer) {
            return layer.hubsapikey === statisticskey;
          });
        }

        // ensure that the data exists if no data for the matches in config and return ignore this
        // this can happent with hubs and id field
        if (configlayer[0]) {
          // get value convert NaN to 0
          var value = checkNoData(area.statistics[statisticskey]) ? 0 : Math.round(area.statistics[statisticskey] * 100) / 100;

          // get the percent translation of the actual value so we
          // compare all the values on the chart
          var height = getValuePosition(value, configlayer[0].chartMinValue, configlayer[0].chartMaxValue, configlayer[0].chartScale, configlayer[0].chartScaleGroups);

          // get mapConfig data
          var label = configlayer[0].chartLabel;

          // get mapConfig colors
          var color = configlayer[0].chartCSSColor[parseInt(area.statistics[statisticskey], 10)];

          // get chart order
          var orderValue = configlayer[0].chartOrder;

          // push dat into data, label, color arrays most charting libraries
          // need this use sort order for array positions - sorts data for charts
          values[orderValue - 1] = height;
          hovervalues[orderValue - 1] = value;
          labels[orderValue - 1] = label;
          colors[orderValue - 1] = color;
        }
      });

      // get name, region, and source for chart json
      var name = area.name;
      var region = area.region;
      var source = area.source;

      //  create group chart data object
      var data = {
        name: name,
        region: region,
        source: source,
        groupname: groupname,
        grouplabel: grouplabel,
        values: values,
        hovervalues: hovervalues,
        colors: colors,
        labels: labels
      };

      // push group into into chart object
      configchartdata.push(data);
    });
  });

  return configchartdata;
}

// prepare mapinfo Identify Data for charting
function formatMapInfoChartData() {
  var activeNav = store.getStateItem('activeNav');
  //  get identify data from state
  var Mapinfo = store.getStateItem('mapinfo');
  var region = store.getStateItem('region');
  var source = 'mapinfo_nfwf';
  var name = 'mapinfo_nfwf';
  if (activeNav === 'main-nav-map-searchNShubs') {
    Mapinfo = store.getStateItem('mapinfons');
    region = 'targetedwatershed';
    source = 'mapinfo_ns';
    name = 'mapinfo_ns';
  }

  var allchartdata = [];
  var statistics = Mapinfo;
  var chartdata = {
    name: name,
    region: region,
    source: source,
    statistics: statistics
  };
  allchartdata.push(chartdata);

  var mapinfochartdata = chartDataReformat(allchartdata);

  if (activeNav === 'main-nav-map-searchNShubs') {
    store.setStoreItem('mapinfonschartdata', mapinfochartdata);
  } else {
    store.setStoreItem('mapinfochartdata', mapinfochartdata);
  }
  var mapinfoDataReadyEvent = new CustomEvent('mapinfo-data-ready');
  window.dispatchEvent(mapinfoDataReadyEvent);
}

// prep all userareas data for charting, and dump into the state
function formatChartData() {
  //  get user areas and uploaded shapefiles from state
  var Currentshapes = store.getStateItem('userareas');
  //  get hubs from state
  var HubIntersectionJson = store.getStateItem('HubIntersectionJson');
  //  get nature server hubs from state
  var NatureServeHubIntersectionJson = store.getStateItem('NatureServeHubIntersectionJson');
  // object to hold chart data
  var allchartdata = [];

  // get user shapes
  if (checkValidObject(Currentshapes)) {
    Object.keys(Currentshapes).forEach(function (currentshapekey) {
      var name = Currentshapes[currentshapekey][0].name;
      var source = 'zonalstats';
      var statsJson = Currentshapes[currentshapekey][3].zonalstatsjson;
      var statistics = statsJson.features[0].properties.mean;
      var region = 'continental_us';

      if (statsJson.features[0].properties.region) {
        region = statsJson.features[0].properties.region.toString().trim();
      }

      var chartdata = {
        name: name,
        region: region,
        source: source,
        statistics: statistics
      };
      allchartdata.push(chartdata);
    });
  }

  // get hubs
  if (checkValidObject(HubIntersectionJson)) {
    HubIntersectionJson.forEach(function (feature) {
      var userarea = feature;

      if (checkValidObject(userarea)) {
        var name = feature.properties.mean.TARGET_FID.toString().trim();
        var source = 'nfwf_hubs';
        var region = 'continental_us';
        var statistics = feature.properties.mean;

        // make region exists it will not exist in old data
        if (feature.properties.region) {
          region = feature.properties.region.toString().trim();
        }

        var chartdata = {
          name: name,
          region: region,
          source: source,
          statistics: statistics
        };
        allchartdata.push(chartdata);
      }
    });
  }

  // get nature serve hubs
  if (checkValidObject(NatureServeHubIntersectionJson)) {
    NatureServeHubIntersectionJson.forEach(function (feature) {
      var userarea = feature;

      if (checkValidObject(userarea)) {
        var name = feature.properties.mean.TARGET_FID.toString().trim();
        var source = 'natureserve_hubs';
        var region = 'targetedwatershed';
        var statistics = feature.properties.mean;

        // make region exists it will not exist in old data
        if (feature.properties.region) {
          region = feature.properties.region.toString().trim();
        }

        var chartdata = {
          name: name,
          region: region,
          source: source,
          statistics: statistics
        };
        allchartdata.push(chartdata);
      }
    });
  }

  var configchartdata = chartDataReformat(allchartdata);
  store.setStoreItem('configchartdata', configchartdata);
}

// chartjs axis label function to wrap text, labels are too ling
function chartjsWrapTextLabel(label) {
  if (/\s/.test(label)) {
    return label.split(' ');
  }
  return label;
}

// custom chartjs y axis labels high to low
function chartjsYLabels(value, index, values) {
  var label = '';
  switch (value) {
    case 0:
      label = 'Low';
      break;
    case 50:
      label = '';
      break;
    case 100:
      label = 'High';
      break;
    default:
      label = '';
  }
  return label;
}

// custom charths tool tip label chart values are percent of total so
// users can compare the actual values are not percents this makes
// the tooltip the actual value
function chartjsCustomToolTipLabel(chartdata) {
  return function (tooltipItem, data) {
    return chartdata[0].hovervalues[tooltipItem.index];
  };
}

// custom chartjs tool tip this needs work later
function chartjsCustomToolTip(tooltipModel) {
  // Tooltip Element
  var tooltipEl = document.getElementById('chartjs-tooltip');

  // Create element on first render
  if (!tooltipEl) {
    tooltipEl = document.createElement('div');
    tooltipEl.id = 'chartjs-tooltip';
    tooltipEl.innerHTML = '<table></table>';
    document.body.appendChild(tooltipEl);
  }

  // Set caret Position
  tooltipEl.classList.add('above');

  // Hide if no tooltip
  if (tooltipModel.opacity === 0) {
    tooltipEl.style.opacity = 0;
    return;
  }

  function getBody(bodyItem) {
    return bodyItem.lines;
  }

  // Set Text
  if (tooltipModel.body) {
    var titleLines = tooltipModel.title || [];
    var bodyLines = tooltipModel.body.map(getBody);
    var innerHtml = '<thead>';

    titleLines.forEach(function (title) {
      innerHtml += '<tr><th>' + title + '</th></tr>';
    });
    innerHtml += '</thead><tbody class="w-100">';

    bodyLines.forEach(function (body, i) {
      var span = '<span class="chartjs-tooltip-body-text text-center justify-content-center align-items-center align-self-center w-100"></span>';
      innerHtml += '<tr class="w-100"><td class="w-100">' + span + body + '</td></tr>';
    });
    innerHtml += '</tbody>';

    var tableRoot = tooltipEl.querySelector('table');
    tableRoot.innerHTML = innerHtml;
  }

  // `this` will be the overall tooltip
  var position = this._chart.canvas.getBoundingClientRect();

  // Display, position, and set styles for font

  tooltipEl.style.backgroundColor = tooltipModel.backgroundColor;
  tooltipEl.style.color = tooltipModel.bodyFontColor;

  // tooltip.style
  var accountForFontSize = 12;
  tooltipEl.style.opacity = 1;
  tooltipEl.style.position = 'absolute';
  tooltipEl.style.caretSize = 5;
  tooltipEl.style.left = position.left + tooltipModel.caretX - tooltipModel.width / 2 + 'px';
  tooltipEl.style.top = position.top - tooltipModel.height - tooltipModel.yPadding * 2 - accountForFontSize - tooltipEl.style.caretSize + tooltipModel.caretY + 'px';
  tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;
  tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';
  tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;
  tooltipEl.style.padding = tooltipModel.yPadding + 'px';
  tooltipEl.style.zIndex = 4444;
  tooltipEl.style.pointerEvents = 'none';
}

// function to create charts using chart.js
function makeBasicBarChart(wrapper, selector, chartdata) {
  var fontDarkColor = '#1c1c20';
  var fontLightColor = '#e9ecef';
  var backgroundDarkColor = '#1c1c20';
  var backgroundLightColor = '#e9ecef';
  var backgroundSecondaryColor = '#999';
  var chartFontFamily = 'Roboto';
  var chartFontSize = 10;

  // escape error when chart selector not found
  if (!wrapper.querySelector(selector)) {
    // console.log(`Chart with selector ${selector} not found!`)
    return null;
  }
  // probably need to pagging next ten etc
  return new _chart2.default(wrapper.querySelector(selector), {
    type: 'bar',
    data: {
      labels: chartdata[0].labels,
      datasets: [{
        label: chartdata[0].groupname,
        backgroundColor: chartdata[0].colors,
        hoverBackgroundColor: chartdata[0].colors,
        data: chartdata[0].values
      }]
    },
    options: {
      scales: {
        xAxes: [{
          gridLines: {
            drawBorder: true,
            drawTicks: false,
            color: backgroundDarkColor,
            lineWidth: 0.0,
            zeroLineWidth: 1.5,
            zeroLineColor: backgroundSecondaryColor,
            borderDash: [5, 5]
          },
          ticks: {
            reverse: false,
            fontColor: fontLightColor,
            fontSize: chartFontSize,
            color: backgroundLightColor,
            lineWidth: 0.25,
            borderDash: [2, 2],
            padding: 5,
            maxRotation: 0,
            minRotation: 0,
            callback: chartjsWrapTextLabel
          }
        }],
        yAxes: [{
          gridLines: {
            beginAtZero: true,
            display: true,
            drawTicks: false,
            color: backgroundSecondaryColor,
            lineWidth: 0.25,
            zeroLineWidth: 1.5,
            zeroLineColor: backgroundSecondaryColor,
            borderDash: [2, 2]
          },
          ticks: {
            fontColor: fontLightColor,
            reverse: false,
            padding: 5,
            stepSize: 25,
            min: 0,
            max: 100,
            callback: chartjsYLabels
          }
        }]
      },
      responsive: true,
      maintainAspectRatio: false,
      fontFamily: chartFontFamily,
      legend: { display: false },
      title: {
        display: false,
        text: chartdata[0].groupname
      },
      tooltips: {
        backgroundColor: backgroundLightColor,
        titleFontColor: fontDarkColor,
        bodyFontColor: fontDarkColor,
        displayColors: false,
        enabled: false,
        titleAlign: 'center',
        bodyAlign: 'center',
        bodyFontFamily: chartFontFamily,
        fontFamily: chartFontFamily,
        yAlign: 'bottom',
        xAlign: 'center',
        callbacks: {
          label: chartjsCustomToolTipLabel(chartdata)
          // title: () => {}
        },
        // uncomment later once I can work on this. position of tip is off.
        custom: chartjsCustomToolTip
      }
    }
  });
}

// add google event tags for downloads.
function addDownloadGoogleEvents() {
  var downloadIds = ['download-hubs', 'download-exposure', 'download-assets', 'download-threats', 'download-aquatic', 'download-terrestrial', 'download-populationdensity', 'download-socialvulnerability', 'download-criticalfacilities', 'download-criticalinfrastructure', 'download-drainage', 'download-erosion', 'download-floodproneareas', 'download-sealevelrise', 'download-stromsurge', 'download-geostressor', 'download-slope'];

  downloadIds.forEach(function (id) {
    var elem = document.getElementById(id);
    if (elem) {
      elem.addEventListener('click', function (ev) {
        // ga event action, category, label
        googleAnalyticsEvent('click', 'downloads', id);
      });
    }
  });

  var watersheds = ['whatcando-btn-reslinceprojects', 'whatcando-btn-analyzesites', 'whatcando-btn-learnmore', 'whatcando-btn-targetedwatershed', 'whatcando-btn-finalreport', 'whatcando-btn-startusingCREST'];

  watersheds.forEach(function (id) {
    var elem = document.getElementById(id);
    if (elem) {
      elem.addEventListener('click', function (ev) {
        // ga event action, category, label
        googleAnalyticsEvent('click', 'landingpage', id);
      });
    }
  });
}

// set stateitems if they do not exist
// we will have to any new ones if added.
// this will help when we adding new statitems "breaks" the webpage
function addMissingStateItems() {
  // check for base map default is DarkGray
  if (!checkValidObject(store.getStateItem('platform'))) {
    store.setStoreItem('platform', 'landsat8');
  }

  // check for base map default is DarkGray
  if (!checkValidObject(store.getStateItem('basemap'))) {
    store.setStoreItem('basemap', 'DarkGray');
  }

  if (!checkValidObject(store.getStateItem('uuid'))) {
    store.setStoreItem('uuid', uuid());
  }

  // check for lastaction default is moveend
  if (!checkValidObject(store.getStateItem('lastaction'))) {
    store.setStoreItem('lastaction', 'moveend');
  }

  // check for mapCenter default is {lat: 32.7765, lng: -79.9311} (charleston for now)
  if (!checkValidObject(store.getStateItem('mapCenter'))) {
    store.setStoreItem('mapCenter', { lat: 36.27970720524017, lng: -95.05371093750001 });
  }

  // check for mapLayerDisplayStatus default is listed below
  // to long to list again
  if (!checkValidObject(store.getStateItem('mapLayerDisplayStatus'))) {
    store.setStoreItem('mapLayerDisplayStatus', {
      southeast_ndmi_current_landsat8: false,
      southeast_ndvi_current_landsat8: false,
      southeast_swir_current_all_landsat8: false,
      southeast_swir_current_threshold_landsat8: true,
      southeast_swir_current_threshold_1yr_landsat8: false,

      southeast_ndmi_current_sentinel2: false,
      southeast_ndvi_current_sentinel2: false,
      southeast_swir_current_all_sentinel2: true,
      southeast_swir_current_threshold_sentinel2: false,
      southeast_swir_current_threshold_1yr_sentinel2: false
    });
  }

  // check for maplayerlist default is open
  if (!checkValidObject(store.getStateItem('maplayerlist'))) {
    if (window.screen.availWidth < 769) {
      store.setStoreItem('maplayerlist', 'close');
    } else {
      store.setStoreItem('maplayerlist', 'open');
    }
  }

  // check for region default is conus
  if (!checkValidObject(store.getStateItem('region'))) {
    store.setStoreItem('region', 'continental_us');
  }

  // check for userareacount default is 0
  if (!checkValidObject(store.getStateItem('userareacount'))) {
    store.setStoreItem('userareacount', 0);
  }

  // check for mapCenter default is {lat: 32.7765, lng: -79.9311} (charleston for now)
  if (!checkValidObject(store.getStateItem('mapZoom'))) {
    store.setStoreItem('mapZoom', 4);
  }

  // check for activeNav default is main-nav-map
  if (!checkValidObject(store.getStateItem('activeNav'))) {
    store.setStoreItem('activeNav', 'main-nav-map');
  }

  // check for aboutNav default is about-nav-aboutgen
  if (!checkValidObject(store.getStateItem('aboutNav'))) {
    store.setStoreItem('aboutNav', 'about-nav-aboutgen');
  }

  // check for savedshapes default is {} NULL object
  if (!checkValidObject(store.getStateItem('savedshapes'))) {
    store.setStoreItem('savedshapes', {});
  }

  // check for userarea default is {} NULL object
  if (!checkValidObject(store.getStateItem('userarea'))) {
    store.setStoreItem('userarea', {});
  }

  // check for userareas default is {} NULL object
  if (!checkValidObject(store.getStateItem('userareas'))) {
    store.setStoreItem('userareas', {});
  }

  // check for userarea_buffered default is {} NULL object
  if (!checkValidObject(store.getStateItem('userarea_buffered'))) {
    store.setStoreItem('userarea_buffered', {});
  }

  // check for zonalstatsjson default is {} NULL object
  if (!checkValidObject(store.getStateItem('zonalstatsjson'))) {
    store.setStoreItem('zonalstatsjson', {});
  }

  // check for working_basemap default is false
  if (!checkValidObject(store.getStateItem('working_basemap'))) {
    store.setStoreItem('working_basemap', false);
  }

  // check for working_mapinfo default is false
  if (!checkValidObject(store.getStateItem('working_mapinfo'))) {
    store.setStoreItem('working_mapinfo', false);
  }

  // check for working_mapinfo default is false
  if (!checkValidObject(store.getStateItem('working_zonalstats'))) {
    store.setStoreItem('working_zonalstats', false);
  }

  // check for working_s3retreive default is false
  if (!checkValidObject(store.getStateItem('working_s3retreive'))) {
    store.setStoreItem('working_s3retreive', false);
  }

  // check for working_search default is false
  if (!checkValidObject(store.getStateItem('working_search'))) {
    store.setStoreItem('working_search', false);
  }

  // check for working_s3save default is false
  if (!checkValidObject(store.getStateItem('working_s3save'))) {
    store.setStoreItem('working_s3save', false);
  }

  // check for working_drawlayers default is false
  if (!checkValidObject(store.getStateItem('working_drawlayers'))) {
    store.setStoreItem('working_drawlayers', false);
  }

  // check for zonalactive default is false
  if (!checkValidObject(store.getStateItem('zonalactive'))) {
    store.setStoreItem('zonalactive', ['none', 'none']);
  }
}

/***/ }),

/***/ "./src/scripts/zonalStats.js":
/*!***********************************!*\
  !*** ./src/scripts/zonalStats.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toggleAllLongZonalsOff = exports.toggleALLPathsOff = exports.disableZonalButtons = exports.enableZonalButtons = exports.disableOverView = exports.enableOverView = exports.drawMapInfoStats = exports.viewLongZonalStatsFromShape = exports.isGraphActivetate = exports.stripUserArea = exports.makeHTMLName = exports.togglePermHighLightsAllOff = exports.toggleLabelHighLightsOff = exports.toggleMouseHighLightsOff = exports.toggleLabelHighLightsOn = exports.toggleMouseHighLightsOn = exports.restoreGraphState = exports.drawZonalStatsFromAPI = undefined;

// get geojson for path soo we can zoom to the area
var getExlporeGeoJson = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(areahml, mapComponent) {
    var area, currentshapes, shape, val, shapeObj, zoomgeojson, zoomlayer;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            area = areahml.replace('_', ' ');
            currentshapes = store.getStateItem('userareas');
            shape = Object.keys(currentshapes).filter(function (value) {
              var val = currentshapes[value][0].name === area;
              return val;
            });
            val = shape[0];
            shapeObj = currentshapes[val];
            zoomgeojson = shapeObj[2].userarea_buffered;
            zoomlayer = _leaflet2.default.geoJSON(zoomgeojson);

            ZoomGeoJSON(zoomlayer, mapComponent);

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function getExlporeGeoJson(_x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

var getHubGeoJson = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(areahml, mapComponent) {
    var area, HubIntersectionJson, shape, zoomlayer;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            area = areahml.replace('_', ' ');
            HubIntersectionJson = store.getStateItem('HubIntersectionJson');
            shape = {};

            Object.keys(HubIntersectionJson).forEach(function (val) {
              if (HubIntersectionJson[val].properties.mean.TARGET_FID.toString().trim() === area) {
                shape = HubIntersectionJson[val];
              }
            });

            zoomlayer = _leaflet2.default.geoJSON(shape);

            ZoomGeoJSON(zoomlayer, mapComponent);

          case 6:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function getHubGeoJson(_x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();

var getNatureServeHubGeoJson = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(areahml, mapComponent) {
    var area, NatureServeHubIntersectionJson, shape, zoomlayer;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            area = areahml.replace('_', ' ');
            NatureServeHubIntersectionJson = store.getStateItem('NatureServeHubIntersectionJson');
            shape = {};

            Object.keys(NatureServeHubIntersectionJson).forEach(function (val) {
              if (NatureServeHubIntersectionJson[val].properties.mean.TARGET_FID.toString().trim() === area) {
                shape = NatureServeHubIntersectionJson[val];
              }
            });

            zoomlayer = _leaflet2.default.geoJSON(shape);

            ZoomGeoJSON(zoomlayer, mapComponent);

          case 6:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function getNatureServeHubGeoJson(_x7, _x8) {
    return _ref3.apply(this, arguments);
  };
}();

// Makes main title for an individual short zonal stats item
// @return DOM element


var _leaflet = __webpack_require__(/*! leaflet */ "./node_modules/leaflet/dist/leaflet-src.js");

var _leaflet2 = _interopRequireDefault(_leaflet);

var _store = __webpack_require__(/*! ./store */ "./src/scripts/store.js");

var _mapConfig = __webpack_require__(/*! ../config/mapConfig */ "./src/config/mapConfig.js");

var _utilitys = __webpack_require__(/*! ./utilitys */ "./src/scripts/utilitys.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var zoomRegions = _mapConfig.mapConfig.zoomRegions;
var WMSLayers = _mapConfig.mapConfig.WMSLayers;

// required for bootstrap

window.$ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
// required for tooltip, popup...
window.Popper = __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js");

window.jQuery = window.$;

var store = new _store.Store({});

function shapeNavOff() {
  var elem = document.querySelector('.navbar-explore-shapes');
  if (elem) {
    elem.classList.add('long-graphs-active');
  }
}

function shapeNavOn() {
  var elem = document.querySelector('.navbar-explore-shapes');
  if (elem) {
    elem.classList.remove('long-graphs-active');
  }
}

// Checks if a value falls in the range of accepted values
// @param val | string || integer || float
// @return boolean
function checkNoData(val) {
  return Number.isNaN(Number.parseFloat(val)) || Number.parseInt(val, 10) === 255;
}

// Creates a div
function makeDiv() {
  return document.createElement('div');
}

// Creates a text element
// @param text | string
function makeTextElement(text) {
  return document.createTextNode(text);
}

function makeHTMLName(name) {
  return '-USERAREA-' + name.replace(' ', '_');
}

function stripUserArea(id) {
  if (!id) return id;
  var striptext = '-USERAREA-';
  var index = id.indexOf(striptext);
  var idLength = id.length;

  if (index >= 0) {
    return id.substring(index, idLength).trim();
  }

  return id;
}

// Gets text for an individual short zonal stats item title
// @return String
function makeLabelText(name) {
  return 'Get Details for ' + name;
}

function setGraphsState(name, activetype) {
  var newname = name;

  var striptext = ['raw-name', 'graph-name', 'dismiss-name', 'label-name'];

  striptext.map(function (replacetext) {
    if (name.indexOf(replacetext) >= 0) {
      newname = name.replace(replacetext, 'name');
      return newname;
    }
    return newname;
  });

  newname = newname.replace('name--USERAREA', 'name---USERAREA');
  store.setStoreItem('zonalactive', [newname, activetype]);
  return newname;
}

function enableMainZonalButton() {
  var zonalHolders = document.querySelectorAll('.zonal-stats-button-holder');
  zonalHolders.forEach(function (zonalHolder) {
    zonalHolder.classList.remove('d-none');
  });
}

function ZonalWrapperActiveRemove() {
  var x = document.querySelectorAll('.zonal-short-wrapper');
  var i = void 0;
  for (i = 0; i < x.length; i += 1) {
    x[i].classList.remove('active');
  }
}

function dissmissAllZonalStatsWrappers() {
  var zonalWrappers = document.querySelectorAll('.zonal-stats-wrapper');
  zonalWrappers.forEach(function (zonalwrapper) {
    zonalwrapper.classList.remove('active');
    zonalwrapper.classList.add('d-none');
  });
}

function zonalStatsWrappersActive(name) {
  var zonalWrapper = document.getElementById('zonal-stats-wrapper-' + name);
  zonalWrapper.classList.remove('d-none');
  zonalWrapper.classList.add('active');
}

function disableMainZonalButton() {
  var zonalHolders = document.querySelectorAll('.zonal-stats-button-holder');
  zonalHolders.forEach(function (zonalHolder) {
    zonalHolder.classList.add('d-none');
  });
}

function disableOverView() {
  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'none';

  var buttonHolder = document.getElementById('zonal-stats-short-title-holder');
  buttonHolder.classList.add('d-none');
}

function disableAllZonalButtons() {
  disableOverView();
  var buttons = document.querySelectorAll('.zonal-long-button-wrapper');
  buttons.forEach(function (button) {
    button.classList.add('d-none');
  });
}

// set zonal buttons and header off
function disableZonalButtons(HTMLName) {
  disableMainZonalButton();
  disableAllZonalButtons();
  disableOverView();
  if (document.querySelector('#button-name--' + HTMLName)) {
    document.querySelector('#button-name--' + HTMLName).classList.add('d-none');
    document.querySelector('#dismiss-name--' + HTMLName).classList.add('d-none');
    document.querySelector('#raw-name--' + HTMLName).classList.add('d-none');
    document.querySelector('#graph-name--' + HTMLName).classList.add('d-none');
  }
}

function disableAllZonalWrappers() {
  var zonalWrappers = document.querySelectorAll('.zonal-long-wrapper ');
  zonalWrappers.forEach(function (zonalwrapper) {
    zonalwrapper.classList.remove('active');
  });
}

function enableOverView() {
  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'none';

  var buttonHolder = document.getElementById('zonal-stats-short-title-holder');
  buttonHolder.classList.remove('d-none');
}

function ZonalWrapperActiveAdd() {
  var x = document.querySelectorAll('.zonal-short-wrapper');
  var i = void 0;
  for (i = 0; i < x.length; i += 1) {
    x[i].classList.add('active');
  }
}

// Switches the display to the short zonal stats
// @param wrapper | DOM element
function dismissLongZonalStats(wrapper) {
  wrapper.classList.remove('active');
  wrapper.classList.remove('active-table');
  document.getElementById('zonal-header').classList.remove('d-none');

  var id = wrapper.getAttribute('id');
  var HTMLName = stripUserArea(id);
  disableMainZonalButton();
  disableZonalButtons(HTMLName);
  disableAllZonalWrappers();
  enableOverView('dismissLongZonalStats');

  var hasShapeButtonElem = document.getElementById('hasshape-button-holder');
  hasShapeButtonElem.classList.remove('d-none');
  ZonalWrapperActiveAdd();
}

function enableAllZonalStatsWrappers() {
  var zonalWrappers = document.querySelectorAll('.zonal-stats-wrapper');
  zonalWrappers.forEach(function (zonalwrapper) {
    zonalwrapper.classList.remove('d-none');
  });
}

function togglePermHighLightsOff(elem) {
  if (elem) {
    elem.classList.remove('path-highlight-perm');
    elem.classList.add('path-nohighlight-perm');
  }
}

function toggleALLPathsOff(elem) {
  var pathsHighlight = document.querySelectorAll('.path-highlight');
  var pathsHighlightPerm = document.querySelectorAll('.path-highlight-perm');

  pathsHighlight.forEach(function (path) {
    path.classList.remove('path-highlight');
    path.classList.add('path-nohighlight');
  });

  pathsHighlightPerm.forEach(function (path) {
    path.classList.remove('path-highlight-perm');
    path.classList.add('path-nohighlight-perm');
  });
}

function getZonalWrapper(elem) {
  var areanameid = elem.id;
  var areaname = stripUserArea(areanameid);
  var selector = '.zonal-long-wrapper.active#name-' + areaname;
  var wrapperelem = document.querySelector(selector);
  return wrapperelem;
}

// limits charts to the current regions
function toggleRegionCharts() {
  var region = store.getStateItem('region');
  var notInRegionInfo = zoomRegions.filter(function (regions) {
    return regions.region !== region;
  });
  var inRegionInfo = zoomRegions.filter(function (regions) {
    return regions.region === region;
  });

  notInRegionInfo.forEach(function (theRegion) {
    var notThisRegionElems = document.querySelectorAll('.zonal-stats-wrapper.region-' + theRegion.region);
    notThisRegionElems.forEach(function (notThisRegionElem) {
      if (notThisRegionElem) {
        notThisRegionElem.classList.add('d-none');
      }
    });
  });

  inRegionInfo.forEach(function (theRegion) {
    var inThisRegionElems = document.querySelectorAll('.zonal-stats-wrapper.region-' + theRegion.region);
    inThisRegionElems.forEach(function (inThisRegionElem) {
      if (inThisRegionElem) {
        inThisRegionElem.classList.remove('d-none');
      }
    });
  });
}

// Click handler to trigger the dismiss of the long zonal stats
function dismissZonalClickHandler(e) {
  // ga event action, category, label
  (0, _utilitys.googleAnalyticsEvent)('click', 'zonalstats ' + store.getStateItem('activeNav'), 'dismiss graphs');
  shapeNavOn();

  e.preventDefault();
  setGraphsState('none', 'none');
  dismissLongZonalStats(getZonalWrapper(this));
  enableAllZonalStatsWrappers();
  var name = e.target.getAttribute('id');

  if (name) {
    var HTMLName = name.replace(' ', '_').replace('dismiss-name-', '');
    var path = document.querySelector('.path-' + HTMLName);
    togglePermHighLightsOff(path);
  }
  toggleALLPathsOff();
  toggleRegionCharts();
}

function displayRawValues(wrapper) {
  if (wrapper) {
    wrapper.classList.add('active-table');
    var holderElem = document.getElementById('zonal-stats-button-holder');
    if (holderElem) {
      holderElem.classList.add('active-table');
    }
  }
}

function displayGraphs(wrapper) {
  if (wrapper) {
    wrapper.classList.remove('active-table');
  }
  var holderElem = document.getElementById('zonal-stats-button-holder');
  if (holderElem) {
    holderElem.classList.remove('active-table');
  }
}

function displayZonalTableHandler(e) {
  // ga event action, category, label
  (0, _utilitys.googleAnalyticsEvent)('click', 'zonalstats ' + store.getStateItem('activeNav'), 'display table');

  e.preventDefault();
  setGraphsState(this.getAttribute('id'), 'table');
  displayRawValues(getZonalWrapper(this));
}

function displayZonalGraphsHandler(e) {
  // ga event action, category, label
  (0, _utilitys.googleAnalyticsEvent)('click', 'zonalstats ' + store.getStateItem('activeNav'), 'display graphs', 'from graphs');

  e.preventDefault();
  setGraphsState(this.getAttribute('id'), 'graph');
  displayGraphs(getZonalWrapper(this));
}

// Switches the display to the long zonal stats
// @param shortElem | DOM element
function viewLongZonalStats(shortElem) {
  if (shortElem) {
    enableMainZonalButton();
    shortElem.nextElementSibling.classList.add('active');
    setGraphsState(shortElem.nextElementSibling.getAttribute('id'), 'graph');
    document.getElementById('zonal-header').classList.add('d-none');
    shapeNavOff();
    ZonalWrapperActiveRemove();
    var HTMLName = stripUserArea(shortElem.id);
    dissmissAllZonalStatsWrappers();
    zonalStatsWrappersActive(HTMLName);
    var hasShapeButtonElem = document.getElementById('hasshape-button-holder');
    hasShapeButtonElem.classList.add('d-none');
    document.querySelector('#dismiss-name--' + HTMLName).addEventListener('click', dismissZonalClickHandler);
    document.querySelector('#raw-name--' + HTMLName).addEventListener('click', displayZonalTableHandler);
    document.querySelector('#graph-name--' + HTMLName).addEventListener('click', displayZonalGraphsHandler);
  }
}

// set zonal buttons and header on
function enableZonalButtons(HTMLName) {
  disableOverView();
  if (document.querySelector('#button-name--' + HTMLName)) {
    document.querySelector('#button-name--' + HTMLName).classList.remove('d-none');
    document.querySelector('#dismiss-name--' + HTMLName).classList.remove('d-none');
    document.querySelector('#raw-name--' + HTMLName).classList.remove('d-none');
    document.querySelector('#graph-name--' + HTMLName).classList.remove('d-none');

    document.querySelector('#dismiss-name--' + HTMLName).addEventListener('click', dismissZonalClickHandler);
    document.querySelector('#raw-name--' + HTMLName).addEventListener('click', displayZonalTableHandler);
    document.querySelector('#graph-name--' + HTMLName).addEventListener('click', displayZonalGraphsHandler);
    bindZonalExportHandler(HTMLName); // eslint-disable-line
  }
}

function togglePermHighLightsOn(elem) {
  if (elem) {
    elem.classList.add('path-highlight-perm');
    elem.classList.remove('path-nohighlight-perm');
  }
}

// Click handler to trigger the load of the long zonal stats
function shortZonalClickHandler(e) {
  // ga event action, category, label
  (0, _utilitys.googleAnalyticsEvent)('click', 'zonalstats ' + store.getStateItem('activeNav'), 'display graphs', 'from details');

  e.preventDefault();
  var id = e.target.getAttribute('id');
  var HTMLName = stripUserArea(id);
  setGraphsState(this.getAttribute('id'), 'graph');
  var shortChartElem = document.getElementById('short-chart-' + HTMLName);
  viewLongZonalStats(shortChartElem);
  enableZonalButtons(HTMLName);
  disableOverView();

  if (HTMLName) {
    if (HTMLName.indexOf('div_class') === -1) {
      var path = document.querySelector('.path-' + HTMLName);
      togglePermHighLightsOn(path);
    }
  }
}

// Makes main title for an individual short zonal stats item
// @return DOM element
function makeLabel(name) {
  var zonalLabel = makeDiv();
  var HTMLName = makeHTMLName(name);
  zonalLabel.classList.add('zonal-label');
  zonalLabel.classList.add('btn');
  zonalLabel.classList.add('btn-light');
  zonalLabel.classList.add('btn-details');
  zonalLabel.classList.add('user-shape');
  zonalLabel.classList.add('col-7');
  zonalLabel.classList.add('col-sm-8');
  zonalLabel.classList.add('col-md-8');
  zonalLabel.classList.add('col-lg-8');

  zonalLabel.setAttribute('id', 'label-name-' + HTMLName);
  zonalLabel.setAttribute('title', 'Get Details for ' + stripUserArea(name));
  zonalLabel.setAttribute('aria-label', 'Get Details for ' + stripUserArea(name));

  zonalLabel.innerHTML = '<span class="btn-icon" id="btn-details-icon" ><i class="far fa-chart-bar"></i></span>';
  zonalLabel.appendChild(makeTextElement(makeLabelText(name)));

  if (window.screen.availWidth < 769) {
    zonalLabel.addEventListener('click', shortZonalClickHandler);
  }

  return zonalLabel;
}

// adds a generic id attribute to all the children so the hover and
// highlghts work for the dom elements and their children
function addUserAreaIdsToChildren(children, name) {
  if (!(0, _utilitys.checkValidObject)(children)) {
    return false;
  }
  if (children.length > 0) {
    // create children nodes array so we can map and change it
    var childrenArray = [].concat(_toConsumableArray(children));
    childrenArray.map(function (childItem) {
      // add userarea name only if the node is an HTML element
      if (childItem instanceof Element) {
        childItem.setAttribute('id', 'generic-' + name);
        childItem.classList.add('state' + name);
      }

      // check if the child has children if so recursivly call this function again
      if (!(0, _utilitys.checkValidObject)(childItem.childNodes)) {
        return false;
      }
      if (childItem.childNodes.length > 0) {
        var grandChild = childItem.childNodes;
        addUserAreaIdsToChildren(grandChild, name);
      } else {
        return false;
      }
      return true;
    });
  } else {
    return false;
  }
  return true;
}

// remove one of the user shapes in the userarea object
function removeUserareaByName(name) {
  var currentshapes = store.getStateItem('userareas');
  Object.keys(currentshapes).map(function (key) {
    if (currentshapes[key][0].name === name) {
      delete currentshapes[key];
    }
    return currentshapes;
  });

  store.setStoreItem('userareas', currentshapes);

  var savedshapes = store.getStateItem('savedshapes');
  Object.keys(savedshapes).map(function (key) {
    if (savedshapes[key][0].name === name) {
      delete savedshapes[key];
    }
    return savedshapes;
  });

  store.setStoreItem('savedshapes', savedshapes);
}

function dispatchRemoveEnd() {
  var removeUserAreaEvent = new CustomEvent('removeuserareend');
  window.dispatchEvent(removeUserAreaEvent);
}

function returnSimpleButtonElementId(element) {
  var areaname = element.getAttribute('id');

  if (element instanceof SVGElement) {
    var parentElem = element.parentElement;
    areaname = parentElem.getAttribute('id');
    if (element instanceof SVGElement) {
      var GParent = parentElem.parentElement;
      areaname = GParent.getAttribute('id');
    }
  }
  return areaname;
}

function ZoomGeoJSON(zoomlayer, mapComponent) {
  var zoomBounds = zoomlayer.getBounds();
  if (mapComponent.map) {
    // flyToBounds is glithy
    // mapComponent.map.flyToBounds(zoomBounds.pad(0.2));
    mapComponent.map.fitBounds(zoomBounds);
  } else {
    // flyToBounds is glithy
    // mapComponent.flyToBounds(zoomBounds.pad(0.2));
    mapComponent.fitBounds(zoomBounds);
  }
}

// Makes main title for an individual short zonal stats item
// @return DOM element
function makeOverviewLabel() {
  var Overview = makeDiv();
  Overview.setAttribute('title', 'Overview');
  Overview.setAttribute('aria-label', 'Overview');
  Overview.classList.add('col-12');
  Overview.setAttribute('id', 'overview-label');
  Overview.innerHTML = '<h3>Overview</h3>';
  return Overview;
}function makeZoom(name, mapComponent) {
  var Zoom = makeDiv();
  var HTMLName = makeHTMLName(name);

  Zoom.classList.add('zonal-label-zoom');
  Zoom.classList.add('btn');
  Zoom.classList.add('btn-light');
  Zoom.classList.add('btn-details');
  Zoom.classList.add('user-shape');
  Zoom.classList.add('col-1');
  Zoom.setAttribute('id', 'label-name-zoom-' + HTMLName);
  Zoom.setAttribute('title', 'Zoom to ' + stripUserArea(name));
  Zoom.setAttribute('aria-label', 'Zoom to ' + stripUserArea(name));

  Zoom.innerHTML = '<i class="fas fa-search-location" id="svg-name-zoom-' + HTMLName + '" style="z-index: -99;"></i>';
  Zoom.addEventListener('click', function (e) {
    // ga event action, category, label
    (0, _utilitys.googleAnalyticsEvent)('click', 'zonalstats ' + store.getStateItem('activeNav'), 'zoom area');

    e.stopImmediatePropagation();
    e.stopPropagation();
    e.preventDefault();

    var areanameid = returnSimpleButtonElementId(e.target);
    var areaname = stripUserArea(areanameid);
    areaname = areaname.replace('-USERAREA-', '').replace('_', ' ');
    var activeNav = store.getStateItem('activeNav');

    if (activeNav) {
      switch (activeNav) {
        case 'main-nav-map-searchhubs':
          getHubGeoJson(areaname, mapComponent);
          break;
        case 'main-nav-map-examples':
          break;
        case 'main-nav-map-searchNShubs':
          getNatureServeHubGeoJson(areaname, mapComponent);
          break;
        case 'main-nav-map':
          getExlporeGeoJson(areaname, mapComponent);
          break;
        default:
          getExlporeGeoJson(areaname, mapComponent);
          break;
      }
    }
  });
  return Zoom;
}

// Makes main title for an individual short zonal stats item
// @return DOM element
function makeRemoveLabel(name, mapComponent) {
  var zonalLabel = makeDiv();
  var HTMLName = makeHTMLName(name);
  zonalLabel.classList.add('zonal-label-remove');
  zonalLabel.classList.add('btn');
  zonalLabel.classList.add('btn-light');
  zonalLabel.classList.add('btn-details');
  zonalLabel.classList.add('user-shape');
  zonalLabel.classList.add('text-danger');
  zonalLabel.classList.add('col-1');
  zonalLabel.setAttribute('id', 'label-name-remove-' + HTMLName);
  zonalLabel.setAttribute('title', 'Remove ' + stripUserArea(name) + ' from list');
  zonalLabel.setAttribute('aria-label', 'Remove ' + stripUserArea(name) + ' from list');

  zonalLabel.innerHTML = '<i class="far fa-trash-alt" id="svg-name-remove-' + HTMLName + '" style="z-index: -99;"></i>';
  zonalLabel.addEventListener('click', function (e) {
    // ga event action, category, label
    (0, _utilitys.googleAnalyticsEvent)('click', 'zonalstats ' + store.getStateItem('activeNav'), 'remove area');

    e.stopImmediatePropagation();
    e.stopPropagation();
    e.preventDefault();

    var areanameid = returnSimpleButtonElementId(e.target);
    var areaname = stripUserArea(areanameid);
    var removeElemName = 'zonal-stats-wrapper-' + areaname;
    var removeElem = document.getElementById(removeElemName);
    removeElem.parentNode.removeChild(removeElem);
    areaname = areaname.replace('-USERAREA-', '').replace('_', ' ');
    removeUserareaByName(areaname);

    // dispatch a event to window so we can redraw the map layers
    // and redraw the zonal stat area
    dispatchRemoveEnd();
  });

  return zonalLabel;
}

// Creates all of the interior html for the short zonal stats
// @param data | Object
// @return Array
function makeShortZonalStatsInterior(data, name) {
  return [makeLabel(name)];
}

// checks if inner HTML of element is Plain old Text
// instead of another HTML element
function innerHTMLisText(innerHTML) {
  if (typeof innerHTML === 'string') {
    if (innerHTML.indexOf('div') === -1) {
      return true;
    }
  }
  return false;
}

function toggleMouseHighLightsOn(elem) {
  if (elem) {
    elem.classList.add('path-highlight');
    elem.classList.remove('path-nohighlight');
  }
}

function toggleMouseHighLightsOff(elem) {
  if (elem) {
    elem.classList.remove('path-highlight');
    elem.classList.add('path-nohighlight');
  }
}

function togglePermHighLightsAllOff(elem) {
  if (elem) {
    elem.classList.remove('path-highlight-perm');
    elem.classList.remove('path-nohighlight-perm');
  }
}

function toggleAllLongZonalsOff(elem) {
  var zonalLongWrapper = document.querySelectorAll('.zonal-long-wrapper');

  zonalLongWrapper.forEach(function (zonal) {
    zonal.classList.remove('active');
  });
}

function toggleLabelHighLightsOff(elem) {
  if (elem) {
    elem.classList.remove('label-name-highlight');
    elem.classList.add('label-name-nohighlight');
  }
}

function toggleLabelHighLightsOn(elem) {
  if (elem) {
    elem.classList.add('label-name-highlight');
    elem.classList.remove('label-name-nohighlight');
  }
}

function hideLastLongStats() {
  var graphstate = store.getStateItem('zonalactive');
  // remove any prevous long chart
  if ((0, _utilitys.checkValidObject)(graphstate)) {
    var elemid = graphstate[0];
    var activestate = graphstate[1];
    if (activestate === 'graph' || activestate === 'table') {
      var lastactive = document.getElementById(elemid);
      if (lastactive) {
        lastactive.classList.remove('active');
      }
    }
  }
}

function hideLastHighlight() {
  var graphstate = store.getStateItem('zonalactive');
  // remove any prevous long chart
  if ((0, _utilitys.checkValidObject)(graphstate)) {
    var elemid = graphstate[0];

    var lastpathid = elemid.replace('name--USERAREA-', 'path--USERAREA-');
    var lastpathelem = document.querySelector('.' + lastpathid);

    togglePermHighLightsOff(lastpathelem);
    toggleMouseHighLightsOff(lastpathelem);
  }
}

function viewLongZonalStatsFromShape(name) {
  // ga event action, category, label
  (0, _utilitys.googleAnalyticsEvent)('click', 'zonalstats ' + store.getStateItem('activeNav'), 'display graphs', 'from shape');

  hideLastLongStats();
  hideLastHighlight();

  document.getElementById('zonal-header').classList.add('d-none');
  ZonalWrapperActiveRemove();
  disableAllZonalButtons();
  enableZonalButtons('-USERAREA-' + name);
  disableOverView();
  enableMainZonalButton();
  dissmissAllZonalStatsWrappers();
  zonalStatsWrappersActive('-USERAREA-' + name);

  var hasShapeButtonElem = document.getElementById('hasshape-button-holder');
  hasShapeButtonElem.classList.add('d-none');

  var pathid = 'path--USERAREA-' + name;
  if (pathid) {
    var pathelem = document.querySelector('.' + pathid);
    togglePermHighLightsOn(pathelem);
  }

  var idname = 'name--USERAREA-' + name;
  if (idname) {
    document.getElementById(idname).classList.add('active');
    setGraphsState(idname, 'graph');
  }
}

function zonalLabelMouseOverHandler(e) {
  e.stopImmediatePropagation();
  e.stopPropagation();
  e.preventDefault();
  var id = e.target.getAttribute('id');
  var HTMLName = stripUserArea(id);
  if (innerHTMLisText(HTMLName)) {
    var path = document.querySelector('.path-' + HTMLName);
    togglePermHighLightsAllOff(path);
    toggleMouseHighLightsOn(path);
  }
}

function zonalLabelMouseOutHandler(e) {
  e.stopImmediatePropagation();
  e.stopPropagation();
  e.preventDefault();
  var id = e.target.getAttribute('id');
  var HTMLName = stripUserArea(id);

  if (innerHTMLisText(HTMLName)) {
    var path = document.querySelector('.path-' + HTMLName);
    toggleMouseHighLightsOff(path);

    var labelName = 'label-name-' + HTMLName;
    var labelElem = document.getElementById(labelName);
    toggleLabelHighLightsOff(labelElem);

    var labelzName = 'zonal-wrapper-' + HTMLName;
    var labelzElem = document.getElementById(labelzName);
    toggleLabelHighLightsOff(labelzElem);

    var shotChartsLabels = 'short-chart-' + HTMLName;
    var shotChartsLabelsElem = document.getElementById(shotChartsLabels);
    toggleLabelHighLightsOff(shotChartsLabelsElem);
  }
}

// Builds the inner HTML for the long zonal stats
// @param DOM Element | wrapper
function buildLongStatsHtml(wrapper) {
  // lint complains otherwise, but due to chaining of functions it's mistaken
  var innerWrapper = wrapper;
  // const region = store.getStateItem('region');
  innerWrapper.innerHTML = ZonalLong; // eslint-disable-line
  var inputData = WMSLayers.filter(function (layer) {
    return layer.chartSummary;
  });

  // iterate the layer props to assing apporaite thml
  inputData.forEach(function (layerProps) {
    var layerElem = wrapper.querySelector('.zonal-long-' + layerProps.chartCSSSelector + '-wrapper .zonal-long-table-wrapper');

    if (layerElem) {
      var legendHTML = (0, _utilitys.getLegendHtml)(layerProps.chartLegendValues);
      layerElem.innerHTML = legendHTML;

      // get the color palette for layer, each layer can have its own
      var colorPalette = layerProps.chartCSSColor;

      // iterate the color palette for layer so we can assing apporaite css color to element
      Object.keys(colorPalette).forEach(function (color) {
        // convert the color number to number word 2 - two
        // this is how html elments are named.
        var colorlueWord = (0, _utilitys.numberToWord)(Number(color));
        // get the element based on the color word
        var valueELem = layerElem.querySelector('.value-' + colorlueWord);

        // if the element exists add css color values
        if (valueELem) {
          // set background based on mapconfig values
          valueELem.style.background = colorPalette[color];

          // set font color
          valueELem.style.color = '#000';

          // // last color tends to be to dark for dark font
          // if (parseInt(color) >= layerProps.chartLegendValues ) {
          //   valueELem.style.color = '#fff';
          // }
          // add classes for region, chartCSSSelector, and source in case we want to find it later
          valueELem.classList.add(layerProps.chartCSSSelector);
          valueELem.classList.add(layerProps.region);
          valueELem.classList.add(layerProps.source);
        }
      });
    }
  });
}

// event function to draw mapinfp (identify) stats
function drawMapInfoStatsHandler() {
  // get chart data for summary data
  var activeNav = store.getStateItem('activeNav');
  var chartName = 'mapinfo_nfwf';
  var region = store.getStateItem('region');
  var mapinfochartdata = store.getStateItem('mapinfochartdata');

  // natureserve data in differ state key
  if (activeNav === 'main-nav-map-searchNShubs') {
    chartName = 'mapinfo_ns';
    region = 'targetedwatershed';
    mapinfochartdata = store.getStateItem('mapinfonschartdata');
  }

  // filter chart data
  var chartdata = mapinfochartdata.filter(function (data) {
    return data.name === chartName && data.groupname === 'summary' && data.region === region;
  });
  var chartSelector = '.leaflet-popup #mapInfo-chart.summary-chart';

  // leaflet popup takes a second to render, chartjs needs to be rendered
  // to draw on the canvas and resize so timeout needed
  setTimeout(function () {
    return (0, _utilitys.makeBasicBarChart)(document, chartSelector, chartdata);
  }, 50);
  (0, _utilitys.hardSpinnerOff)();
  return null;
}

// draw the mapinfo chart. This is the indentify click function
function drawMapInfoStats() {
  // add listener for leaflets open popup
  window.addEventListener('mapinfo-data-ready', drawMapInfoStatsHandler);

  // reform identify data into chartjs data
  (0, _utilitys.formatMapInfoChartData)();
}

// Creates the entire short zonal stats block of html
// @param data | Object
// @return DOM element
function drawShortZonalStats(data, name, mapComponent, region) {
  var wrapper = makeDiv();
  var activeNav = store.getStateItem('activeNav');

  wrapper.classList.add('zonal-short-wrapper');
  wrapper.classList.add('w-100');
  wrapper.classList.add('active');
  wrapper.classList.add('row');
  wrapper.classList.add('justify-content-center');

  var HTMLName = makeHTMLName(name);
  wrapper.setAttribute('id', 'short-chart-' + HTMLName);

  wrapper.innerHTML = ZonalShort; // eslint-disable-line

  var shortChart = wrapper.querySelector('.zonal-short-wrappper');
  addUserAreaIdsToChildren(shortChart.childNodes, HTMLName);

  makeShortZonalStatsInterior(data, name).forEach(function (elem) {
    wrapper.insertBefore(elem, wrapper.childNodes[0]);
  });

  // get chart data for summary data
  var chartName = stripUserArea(name);
  var configchartdata = store.getStateItem('configchartdata');
  var chartdata = configchartdata.filter(function (configdata) {
    return configdata.name === chartName && configdata.groupname === 'summary' && configdata.region === region;
  });
  var chartSelector = '.summary-chart.state' + HTMLName;
  (0, _utilitys.makeBasicBarChart)(wrapper, chartSelector, chartdata);

  if (window.screen.availWidth > 769) {
    wrapper.addEventListener('click', shortZonalClickHandler);
  }

  wrapper.addEventListener('mouseover', zonalLabelMouseOverHandler);
  wrapper.addEventListener('mouseout', zonalLabelMouseOutHandler);

  shortChart.addEventListener('mouseout', zonalLabelMouseOutHandler);
  shortChart.addEventListener('mouseover', zonalLabelMouseOverHandler);

  switch (activeNav) {
    case 'main-nav-map-searchhubs':
      break;
    case 'main-nav-map-examples':
      break;
    case 'main-nav-map-searchNShubs':
      break;
    case 'main-nav-map':
      {
        // detete the area button
        var rem = makeRemoveLabel(name, mapComponent);
        wrapper.insertBefore(rem, wrapper.childNodes[1]);
        break;
      }
    default:
      {
        // detete the area button
        var _rem = makeRemoveLabel(name, mapComponent);
        wrapper.insertBefore(_rem, wrapper.childNodes[1]);
        break;
      }
  }

  // zoom to the area button
  var zoom = makeZoom(name, mapComponent);
  wrapper.insertBefore(zoom, wrapper.childNodes[1]);

  var defaultLongGraphs = wrapper.querySelector('.default-long-graphs');
  defaultLongGraphs.classList.remove('d-none');

  var ovr = makeOverviewLabel();
  var buttonHolder = document.getElementById('zonal-stats-short-title-holder');
  buttonHolder.innerHTML = ovr.innerHTML;
  buttonHolder.classList.remove('d-none');
  disableMainZonalButton();
  return wrapper;
}

function formatToThreePlaces(value) {
  return (Math.round(value * 1000) / 1000).toString();
}

function formatRawValue(value) {
  return checkNoData(value) ? 'No data' : formatToThreePlaces(value);
}

// renders data in a table format
// only renders data that is available for the region it is from.
function drawRawValue(wrapper, value) {
  var tr = document.createElement('tr');

  var th = document.createElement('th');
  var label = document.createTextNode(value.label);
  th.appendChild(label);

  var tdvalue = document.createElement('td');
  var dataValue = document.createTextNode(formatRawValue(value.value));
  tdvalue.appendChild(dataValue);

  var tdrange = document.createElement('td');
  var range = document.createTextNode(value.range);
  tdrange.appendChild(range);

  tr.appendChild(th);
  tr.appendChild(tdvalue);
  tr.appendChild(tdrange);

  wrapper.querySelector('.table-rawdata .body-rawdata').appendChild(tr);
}

function populateRawTableRow(wrapper, value) {
  drawRawValue(wrapper, value);
}

function drawRawValues(wrapper, data) {
  data.forEach(populateRawTableRow.bind(null, wrapper));
}

function drawName(wrapper, name) {
  wrapper.querySelector('#zonal-long-name').textContent = name;
}

// creates zonal buttons in sticky header.
function drawZonalButtons(HTMLName, name) {
  var buttonHolder = document.getElementById('zonal-stats-button-holder');
  var wrapper = makeDiv();
  wrapper.innerHTML = ZonalButtons; // eslint-disable-line
  drawName(wrapper, name);
  wrapper.querySelector('.zonal-long-button-wrapper').setAttribute('id', 'button-name--' + HTMLName);
  wrapper.querySelector('.zonal-long-buttons-holder').setAttribute('id', 'button-holder-name--' + HTMLName);
  wrapper.querySelector('.zonal-long-button-graphs').setAttribute('id', 'graph-name--' + HTMLName);
  wrapper.querySelector('.zonal-long-button-download').setAttribute('id', 'download-name--' + HTMLName);
  wrapper.querySelector('.zonal-long-button-raw').setAttribute('id', 'raw-name--' + HTMLName);
  wrapper.querySelector('.zonal-long-button-dismiss').setAttribute('id', 'dismiss-name--' + HTMLName);
  wrapper.querySelector('#zonal-long-name').setAttribute('id', 'zonal-long-name--' + HTMLName);

  buttonHolder.innerHTML += wrapper.innerHTML;
}

// take map config data and api data and maps to
// the driver charts in the details, then dynamically uses the
// chartInputName key from the mapconfig.js to create driver charts
function makeDetailDriverCharts(wrapper, data, region, chartName) {
  var layerRegionInfo = WMSLayers.filter(function (layers) {
    return layers.region === region;
  });
  var layerInfo = layerRegionInfo.filter(function (layer) {
    return layer.chartDriver;
  });
  var driverGroups = (0, _utilitys.groupByDriver)(layerInfo, 'chartInputName');

  // iterate each group i.e. FishAndWildlife, assets, threats
  driverGroups.forEach(function (driver) {
    var driverGroupName = driver[0].chartInputName;
    var driverGroupLabel = driver[0].chartInpuLabel;

    // filter data fro the group
    var configchartdata = store.getStateItem('configchartdata');
    var chartdata = configchartdata.filter(function (configdata) {
      return configdata.name === chartName && configdata.groupname === driverGroupName && configdata.region === region;
    });

    // make new html elements
    var HTMLName = makeHTMLName(chartName);
    var driverHolder = wrapper.querySelector('#name-' + HTMLName + ' #driver-charts-holder');

    // make title div to hold chart title
    var NewTitleDiv = makeDiv();
    NewTitleDiv.setAttribute('id', 'driver-title-' + driverGroupName);
    NewTitleDiv.innerHTML = '' + driverGroupLabel;
    NewTitleDiv.classList.add('text-center');
    NewTitleDiv.classList.add('text-capitalize');
    NewTitleDiv.classList.add('font-weight-bold');
    NewTitleDiv.classList.add('pt-3');

    // make canvas div to hold chart
    var NewChartCanvasDiv = makeDiv();
    NewChartCanvasDiv.setAttribute('id', 'driver-' + driverGroupName);
    NewChartCanvasDiv.classList.add('chartjs-wrapper');
    NewChartCanvasDiv.innerHTML = '<canvas id="" class="d-flex details-chart group-' + driverGroupName + '"></canvas>';

    // ensire the the html element that holds the driver charts exists
    if (driverHolder) {
      driverHolder.appendChild(NewTitleDiv);
      driverHolder.appendChild(NewChartCanvasDiv);
    }

    // make the driver charts
    var chartSelector = '#name-' + HTMLName + ' #driver-charts-holder .details-chart.group-' + driverGroupName;
    (0, _utilitys.makeBasicBarChart)(driverHolder, chartSelector, chartdata);
  });
}

function getDataForTables(data, argRegion) {
  // filter the region layer list so we can get map configation values for all
  // regions layers
  var region = argRegion;
  var layerRegionInfo = WMSLayers.filter(function (layers) {
    return layers.region === region;
  });
  var activeNav = store.getStateItem('activeNav');
  if (activeNav === 'main-nav-map-searchNShubs') {
    region = 'targetedwatershed';
  }
  // if layerRegionInfo empty array then exit nothing matches.
  if (layerRegionInfo.length === 0) {
    return null;
  }

  // iterate over returned data and values and map it into a object array
  // that only contains summary data or input data not driver data
  var dataForTables = [];
  Object.keys(data).forEach(function (key) {
    // check of data matches a driver
    var layerInfoHasKey = layerRegionInfo.filter(function (layer) {
      return layer.apikey === key;
    });

    // filter the regions layers to the specifc layer so we can get map configation values
    if (activeNav === 'main-nav-map-searchhubs' || activeNav === 'main-nav-map-searchNShubs') {
      layerInfoHasKey = layerRegionInfo.filter(function (layer) {
        return layer.hubsapikey === key;
      });
    }

    // check of data matches a driver and add it to a new object araray that is key, value
    if (layerInfoHasKey.length > 0) {
      dataForTables.push({
        key: key,
        value: data[key],
        cssselector: layerInfoHasKey[0].chartCSSSelector,
        label: layerInfoHasKey[0].label,
        range: layerInfoHasKey[0].chartMinValue + ' to ' + (layerInfoHasKey[0].chartMaxValue - 1),
        source: layerInfoHasKey[0].source
      });
    }
  });
  return dataForTables;
}

// Draws and configures the long zonal stats
// @param data | Object - results of API
// @return DOM element
function drawLongZonalStats(data, name, region) {
  var HTMLName = makeHTMLName(name);
  var wrapper = makeDiv();

  wrapper.classList.add('zonal-long-wrapper');
  wrapper.setAttribute('id', 'name-' + HTMLName);
  buildLongStatsHtml(wrapper);
  drawName(wrapper, name);
  drawZonalButtons(HTMLName, name);

  var dataForTable = getDataForTables(data, region);
  drawRawValues(wrapper, dataForTable);

  // get chart data for summary data
  var chartName = stripUserArea(name);
  var configchartdata = store.getStateItem('configchartdata');
  var chartdata = configchartdata.filter(function (configdata) {
    return configdata.name === chartName && configdata.groupname === 'summary' && configdata.region === region;
  });
  var chartSelector = '#name-' + HTMLName + ' .summary-chart-details';
  (0, _utilitys.makeBasicBarChart)(wrapper, chartSelector, chartdata);

  // make drivers charts will create drivers based on mapconfig
  makeDetailDriverCharts(wrapper, data, region, chartName);
  return wrapper;
}

// check if graph or table is the active state is so we can disable the
// mouse off event on the shape.  This prevents the map from removeing the
// highlighted shape.
function isGraphActivetate() {
  var graphstate = store.getStateItem('zonalactive');
  if ((0, _utilitys.checkValidObject)(graphstate)) {
    var activestate = graphstate[1];
    if (activestate === 'graph' || activestate === 'table') return true;
  }
  return false;
}

function restoreGraphState() {
  var graphstate = store.getStateItem('zonalactive');
  if ((0, _utilitys.checkValidObject)(graphstate)) {
    var elemid = graphstate[0];
    var activestate = graphstate[1];
    var elem = document.getElementById(elemid.replace('name-', 'name'));
    var path = document.querySelector('.path' + elemid.replace('name-', ''));
    var HTMLName = stripUserArea(elemid);

    switch (activestate) {
      case 'graph':
        displayGraphs(elem);
        if (elem) {
          shapeNavOff();
          elem.classList.add('active');
          document.getElementById('zonal-header').classList.add('d-none');
          togglePermHighLightsOn(path);
          ZonalWrapperActiveRemove();
          enableZonalButtons(HTMLName);
          enableMainZonalButton();
          dissmissAllZonalStatsWrappers();
          zonalStatsWrappersActive(HTMLName);
          store.setStoreItem('zonalactive', [elemid, activestate]);
          disableOverView();
          var hasShapeButtonElem = document.getElementById('hasshape-button-holder');
          hasShapeButtonElem.classList.add('d-none');
        }

        break;
      case 'table':
        if (elem) {
          shapeNavOff();
          elem.classList.add('active');
          elem.classList.add('active-table');
          document.getElementById('zonal-header').classList.add('d-none');
          displayRawValues(elem);
          togglePermHighLightsOn(path);
          ZonalWrapperActiveRemove();
          enableZonalButtons(HTMLName);
          enableMainZonalButton();
          dissmissAllZonalStatsWrappers();
          zonalStatsWrappersActive(HTMLName);
          store.setStoreItem('zonalactive', [elemid, activestate]);
          disableOverView();
          var _hasShapeButtonElem = document.getElementById('hasshape-button-holder');
          _hasShapeButtonElem.classList.add('d-none');
        }
        break;
      default:
        return null;
    }
  }
  return null;
}

// Draws and configures the entire zonal stats
// @param data | Object - results of API
function drawZonalStatsFromAPI(data, name, mapComponent) {
  var region = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'continental_us';

  var HTMLName = makeHTMLName(name);

  if (!document.getElementById('zonal-header')) {
    document.getElementById('zonal-area-wrapper').innerHTML = ZonalWrapper; // eslint-disable-line
  }
  var wrapper = makeDiv();
  wrapper.classList.add('zonal-stats-wrapper');
  wrapper.classList.add('h-100');
  wrapper.classList.add('region-' + region);
  wrapper.setAttribute('id', 'zonal-stats-wrapper-' + HTMLName);
  wrapper.appendChild(drawShortZonalStats(data, name, mapComponent, region));
  wrapper.appendChild(drawLongZonalStats(data, name, region));
  document.getElementById('zonal-content').appendChild(wrapper);

  // initalize new tooltips
  $(function () {
    $('#zonal-content [data-toggle="tooltip"]').tooltip({ trigger: 'hover focus' });
  });

  var iconelem = document.getElementById('btn-details-icon');
  iconelem.addEventListener('mouseover', zonalLabelMouseOverHandler);
  iconelem.addEventListener('mouseout', zonalLabelMouseOutHandler);
  disableMainZonalButton();

  toggleRegionCharts();
  restoreGraphState();
}

exports.drawZonalStatsFromAPI = drawZonalStatsFromAPI;
exports.restoreGraphState = restoreGraphState;
exports.toggleMouseHighLightsOn = toggleMouseHighLightsOn;
exports.toggleLabelHighLightsOn = toggleLabelHighLightsOn;
exports.toggleMouseHighLightsOff = toggleMouseHighLightsOff;
exports.toggleLabelHighLightsOff = toggleLabelHighLightsOff;
exports.togglePermHighLightsAllOff = togglePermHighLightsAllOff;
exports.makeHTMLName = makeHTMLName;
exports.stripUserArea = stripUserArea;
exports.isGraphActivetate = isGraphActivetate;
exports.viewLongZonalStatsFromShape = viewLongZonalStatsFromShape;
exports.drawMapInfoStats = drawMapInfoStats;
exports.enableOverView = enableOverView;
exports.disableOverView = disableOverView;
exports.enableZonalButtons = enableZonalButtons;
exports.disableZonalButtons = disableZonalButtons;
exports.toggleALLPathsOff = toggleALLPathsOff;
exports.toggleAllLongZonalsOff = toggleAllLongZonalsOff;

// change region is state changes

window.addEventListener('regionChanged', function (e) {
  toggleRegionCharts();
});

/***/ }),

/***/ "./src/templates/colorramp_breaks_eight.html":
/*!***************************************************!*\
  !*** ./src/templates/colorramp_breaks_eight.html ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"zonal-long-table zonal-long-table-eightbreaks\">\n  <div class=\"zonal-long-table-row zonal-long-table-row-header-simple\">\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-low\">Low</div>\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-high\">High</div>\n  </div>\n  <div class=\"zonal-long-table-row\">\n    <div class=\"zonal-long-table-item zonal-long-table-item-eightbreaks zonal-long-table-cell-eightbreaks value-none\">None</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-eightbreaks zonal-long-table-cell-eightbreaks value-one\">1</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-eightbreaks zonal-long-table-cell-eightbreaks value-two\">2</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-eightbreaks zonal-long-table-cell-eightbreaks value-three\">3</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-eightbreaks zonal-long-table-cell-eightbreaks value-four\">4</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-eightbreaks zonal-long-table-cell-eightbreaks value-five\">5</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-eightbreaks zonal-long-table-cell-eightbreaks value-six\">6</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-eightbreaks zonal-long-table-cell-eightbreaks value-seven\">7</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-eightbreaks zonal-long-table-cell-eightbreaks value-eight\">8</div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/colorramp_breaks_fifteen.html":
/*!*****************************************************!*\
  !*** ./src/templates/colorramp_breaks_fifteen.html ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"zonal-long-table zonal-long-table-fifteen\">\n  <div class=\"zonal-long-table-row zonal-long-table-row-header-simple\">\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-low\">Less</div>\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-high\">More</div>\n  </div>\n  <div class=\"zonal-long-table-row\">\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-none\">None</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-one\">1</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-two\">2</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-three\">3</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-four\">4</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-five\">5</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-six\">6</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-seven\">7</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-eight\">8</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-nine\">9</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-ten\">10</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-eleven\">11</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-twelve\">12</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-thirteen\">13</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-fourteen\">14</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-fifteen\">15</div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/colorramp_breaks_five.html":
/*!**************************************************!*\
  !*** ./src/templates/colorramp_breaks_five.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"zonal-long-table zonal-long-table-fivebreaks\">\n  <div class=\"zonal-long-table-row zonal-long-table-row-header-simple\">\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-low\">Low</div>\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-high\">High</div>\n  </div>\n  <div class=\"zonal-long-table-row\">\n    <div class=\"zonal-long-table-item zonal-long-table-item-fivebreaks zonal-long-table-cell-fivebreaks value-none\">None</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fivebreaks zonal-long-table-cell-fivebreaks value-one\">1</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fivebreaks zonal-long-table-cell-fivebreaks value-two\">2</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fivebreaks zonal-long-table-cell-fivebreaks value-three\">3</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fivebreaks zonal-long-table-cell-fivebreaks value-four\">4</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fivebreaks zonal-long-table-cell-fivebreaks value-five\">5</div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/colorramp_breaks_four.html":
/*!**************************************************!*\
  !*** ./src/templates/colorramp_breaks_four.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"zonal-long-table zonal-long-table-fourbreaks\">\n  <div class=\"zonal-long-table-row zonal-long-table-row-header-simple\">\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-low\">Less</div>\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-high\">More</div>\n  </div>\n  <div class=\"zonal-long-table-row\">\n    <div class=\"zonal-long-table-item zonal-long-table-item-fourbreaks zonal-long-table-cell-fourbreaks value-none\">None</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fourbreaks zonal-long-table-cell-fourbreaks value-one\">1</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fourbreaks zonal-long-table-cell-fourbreaks value-two\">2</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fourbreaks zonal-long-table-cell-fourbreaks value-three\">3</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fourbreaks zonal-long-table-cell-fourbreaks value-four\">4</div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/colorramp_breaks_fourteen.html":
/*!******************************************************!*\
  !*** ./src/templates/colorramp_breaks_fourteen.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"zonal-long-table zonal-long-table-fifteen\">\n  <div class=\"zonal-long-table-row zonal-long-table-row-header-simple\">\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-low\">Less</div>\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-high\">More</div>\n  </div>\n  <div class=\"zonal-long-table-row\">\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-none\">None</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-one\">1</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-two\">2</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-three\">3</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-four\">4</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-five\">5</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-six\">6</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-seven\">7</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-eight\">8</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-nine\">9</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-ten\">10</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-eleven\">11</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-twelve\">12</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-thirteen\">13</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-fifteen zonal-long-table-cell-fifteen value-fourteen\">14</div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/colorramp_breaks_nine.html":
/*!**************************************************!*\
  !*** ./src/templates/colorramp_breaks_nine.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"zonal-long-table zonal-long-table-ninebreaks\">\n  <div class=\"zonal-long-table-row zonal-long-table-row-header-simple\">\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-low\">Low</div>\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-high\">High</div>\n  </div>\n  <div class=\"zonal-long-table-row\">\n    <div class=\"zonal-long-table-item zonal-long-table-item-ninebreaks zonal-long-table-cell-ninebreaks value-none\">None</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-ninebreaks zonal-long-table-cell-ninebreaks value-one\">1</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-ninebreaks zonal-long-table-cell-ninebreaks value-two\">2</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-ninebreaks zonal-long-table-cell-ninebreaks value-three\">3</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-ninebreaks zonal-long-table-cell-ninebreaks value-four\">4</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-ninebreaks zonal-long-table-cell-ninebreaks value-five\">5</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-ninebreaks zonal-long-table-cell-ninebreaks value-six\">6</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-ninebreaks zonal-long-table-cell-ninebreaks value-seven\">7</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-ninebreaks zonal-long-table-cell-ninebreaks value-eight\">8</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-ninebreaks zonal-long-table-cell-ninebreaks value-nine\">9</div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/colorramp_breaks_one.html":
/*!*************************************************!*\
  !*** ./src/templates/colorramp_breaks_one.html ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"zonal-long-table zonal-long-table-onebreaks\">\n  <div class=\"zonal-long-table-row zonal-long-table-row-header-simple\">\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-low\">Low</div>\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-high\">High</div>\n  </div>\n  <div class=\"zonal-long-table-row\">\n    <div class=\"zonal-long-table-item zonal-long-table-item-onebreaks zonal-long-table-cell-onebreaks value-none\">None</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-onebreaks zonal-long-table-cell-onebreaks value-one\">1</div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/colorramp_breaks_seven.html":
/*!***************************************************!*\
  !*** ./src/templates/colorramp_breaks_seven.html ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"zonal-long-table zonal-long-table-sevenbreaks\">\n  <div class=\"zonal-long-table-row zonal-long-table-row-header-simple\">\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-low\">Low</div>\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-high\">High</div>\n  </div>\n  <div class=\"zonal-long-table-row\">\n    <div class=\"zonal-long-table-item zonal-long-table-item-sevenbreaks zonal-long-table-cell-sevenbreaks value-none\">None</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-sevenbreaks zonal-long-table-cell-sevenbreaks value-one\">1</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-sevenbreaks zonal-long-table-cell-sevenbreaks value-two\">2</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-sevenbreaks zonal-long-table-cell-sevenbreaks value-three\">3</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-sevenbreaks zonal-long-table-cell-sevenbreaks value-four\">4</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-sevenbreaks zonal-long-table-cell-sevenbreaks value-five\">5</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-sevenbreaks zonal-long-table-cell-sevenbreaks value-six\">6</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-sevenbreaks zonal-long-table-cell-sevenbreaks value-seven\">7</div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/colorramp_breaks_six.html":
/*!*************************************************!*\
  !*** ./src/templates/colorramp_breaks_six.html ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"zonal-long-table zonal-long-table-sixbreaks\">\n  <div class=\"zonal-long-table-row zonal-long-table-row-header-simple\">\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-low\">Low</div>\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-high\">High</div>\n  </div>\n  <div class=\"zonal-long-table-row\">\n    <div class=\"zonal-long-table-item zonal-long-table-item-sixbreaks zonal-long-table-cell-sixbreaks value-none\">None</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-sixbreaks zonal-long-table-cell-sixbreaks value-one\">1</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-sixbreaks zonal-long-table-cell-sixbreaks value-two\">2</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-sixbreaks zonal-long-table-cell-sixbreaks value-three\">3</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-sixbreaks zonal-long-table-cell-sixbreaks value-four\">4</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-sixbreaks zonal-long-table-cell-sixbreaks value-five\">5</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-sixbreaks zonal-long-table-cell-sixbreaks value-six\">6</div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/colorramp_breaks_ten.html":
/*!*************************************************!*\
  !*** ./src/templates/colorramp_breaks_ten.html ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"zonal-long-table zonal-long-table-tenbreaks\">\n  <div class=\"zonal-long-table-row zonal-long-table-row-header-simple\">\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-low\">Low</div>\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-high\">High</div>\n  </div>\n  <div class=\"zonal-long-table-row\">\n    <div class=\"zonal-long-table-item zonal-long-table-item-tenbreaks zonal-long-table-cell-tenbreaks value-none\">None</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-tenbreaks zonal-long-table-cell-tenbreaks value-one\">1</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-tenbreaks zonal-long-table-cell-tenbreaks value-two\">2</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-tenbreaks zonal-long-table-cell-tenbreaks value-three\">3</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-tenbreaks zonal-long-table-cell-tenbreaks value-four\">4</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-tenbreaks zonal-long-table-cell-tenbreaks value-five\">5</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-tenbreaks zonal-long-table-cell-tenbreaks value-six\">6</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-tenbreaks zonal-long-table-cell-tenbreaks value-seven\">7</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-tenbreaks zonal-long-table-cell-tenbreaks value-eight\">8</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-tenbreaks zonal-long-table-cell-tenbreaks value-nine\">9</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-tenbreaks zonal-long-table-cell-tenbreaks value-ten\">10</div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/colorramp_breaks_three.html":
/*!***************************************************!*\
  !*** ./src/templates/colorramp_breaks_three.html ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"zonal-long-table zonal-long-table-threebreaks\">\n  <div class=\"zonal-long-table-row zonal-long-table-row-header-simple\">\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-low\">Low</div>\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-high\">High</div>\n  </div>\n  <div class=\"zonal-long-table-row\">\n    <div class=\"zonal-long-table-item zonal-long-table-item-threebreaks zonal-long-table-cell-threebreaks value-none\">None</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-threebreaks zonal-long-table-cell-threebreaks value-one\">1</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-threebreaks zonal-long-table-cell-threebreaks value-two\">2</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-threebreaks zonal-long-table-cell-threebreaks value-three\">3</div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/colorramp_breaks_two.html":
/*!*************************************************!*\
  !*** ./src/templates/colorramp_breaks_two.html ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"zonal-long-table zonal-long-table-twobreaks\">\n  <div class=\"zonal-long-table-row zonal-long-table-row-header-simple\">\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-low\">Low</div>\n    <div class=\"zonal-long-table-header-simple zonal-long-table-header-simple-high\">High</div>\n  </div>\n  <div class=\"zonal-long-table-row\">\n    <div class=\"zonal-long-table-item zonal-long-table-item-twobreaks zonal-long-table-cell-twobreaks value-none\">None</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-twobreaks zonal-long-table-cell-twobreaks value-one\">1</div>\n    <div class=\"zonal-long-table-item zonal-long-table-item-twobreaks zonal-long-table-cell-twobreaks value-two\">2</div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/map.html":
/*!********************************!*\
  !*** ./src/templates/map.html ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"map\" ref=\"mapContainer\" class=\"map\"></div>\n";

/***/ }),

/***/ "./src/templates/mapinfo.html":
/*!************************************!*\
  !*** ./src/templates/mapinfo.html ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- <div id=\"mapInfo-content\" ref=\"mapInfo-content\" class=\"mapInfo-content\">test</div> -->\n<div ref=\"map-info-list\" id=\"map-info-list\" class=\"map-info-list\">\n  <div class=\"toggle-list\">\n    <div class=\"flex-fill h-100 mapinfo-header\" >\n      <div class=\"sticky-top\">\n        <h5>Map Information</h5>\n        <hr />\n      </div>\n    </div>\n\n    <div ref=\"mapinfodata\" id=\"mapinfodata\" class=\"text-left mapinfodata\">\n\n      <span class=\"default-mapinfo\" >\n        <div class=\"zonal-short-wrappper active col-12\">\n          <div class=\"zonal-long-graph-wrapper zonal-long-graph-wrapper-short-chart w-100\">\n            <!-- <h6>Basic Information</h6> -->\n            <div class=\"zonal-long-graph zonal-summary-wrapper\">\n              <div class=\"zonal-long-graph-content\">\n                <div class=\"zonal-long-graph-axis\">\n                  <div class=\"zonal-long-graph-axis-label zonal-long-graph-axis-label-high\">High</div>\n                  <div class=\"zonal-long-graph-axis-label zonal-long-graph-axis-label-low\">Low</div>\n                </div>\n                <div class=\"zonal-long-graph-steps\">\n                  <div class=\"zonal-long-graph-step zonal-long-graph-step-1\"></div>\n                  <div class=\"zonal-long-graph-step zonal-long-graph-step-2\"></div>\n                  <div class=\"zonal-long-graph-step zonal-long-graph-step-3\"></div>\n                  <div class=\"zonal-long-graph-step zonal-long-graph-step-4\"></div>\n                </div>\n                <div class=\"zonal-long-graph-bars\">\n                  <div class=\"zonal-long-graph-bar-wrapper\">\n                    <div class=\"zonal-long-graph-bar zonal-long-graph-bar-hubs\"></div>\n                  </div>\n                  <div class=\"zonal-long-graph-bar-wrapper\">\n                    <div class=\"zonal-long-graph-bar zonal-long-graph-bar-aquatic\"></div>\n                  </div>\n                  <div class=\"zonal-long-graph-bar-wrapper\">\n                    <div class=\"zonal-long-graph-bar zonal-long-graph-bar-terrestrial\"></div>\n                  </div>\n                  <div class=\"zonal-long-graph-bar-wrapper\">\n                    <div class=\"zonal-long-graph-bar zonal-long-graph-bar-exposure\"></div>\n                  </div>\n                  <div class=\"zonal-long-graph-bar-wrapper\">\n                    <div class=\"zonal-long-graph-bar zonal-long-graph-bar-asset\"></div>\n                  </div>\n                  <div class=\"zonal-long-graph-bar-wrapper\">\n                    <div class=\"zonal-long-graph-bar zonal-long-graph-bar-threat\"></div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"zonal-long-graph-labels\">\n                <div class=\"zonal-long-graph-label zonal-long-graph-label-hubs\"><div class=\"zonal-long-graph-label-text\">Resilience Hubs</div></div>\n                <div class=\"zonal-long-graph-label zonal-long-graph-label-aquatic\"><div class=\"zonal-long-graph-label-text\">Aquatic</div></div>\n                <div class=\"zonal-long-graph-label zonal-long-graph-label-terrestrial\"><div class=\"zonal-long-graph-label-text\">Terrestrial</div></div>\n                <div class=\"zonal-long-graph-label zonal-long-graph-label-exposure\"><div class=\"zonal-long-graph-label-text\">Community Exposure</div></div>\n                <div class=\"zonal-long-graph-label zonal-long-graph-label-asset\"><div class=\"zonal-long-graph-label-text\">Asset</div></div>\n                <div class=\"zonal-long-graph-label zonal-long-graph-label-threat\"><div class=\"zonal-long-graph-label-text\">Threat</div></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </span>\n\n      <span class=\"ns-mapinfo\" >\n        <div class=\"zonal-short-wrappper active col-12\">\n          <div class=\"zonal-long-graph-wrapper zonal-long-graph-wrapper-short-chart w-100\">\n            <!-- <h6>Basic Information</h6> -->\n            <div class=\"zonal-long-graph zonal-summary-wrapper\">\n              <div class=\"zonal-long-graph-content\">\n                <div class=\"zonal-long-graph-axis\">\n                  <div class=\"zonal-long-graph-axis-label zonal-long-graph-axis-label-high\">High</div>\n                  <div class=\"zonal-long-graph-axis-label zonal-long-graph-axis-label-low\">Low</div>\n                </div>\n                <div class=\"zonal-long-graph-steps\">\n                  <div class=\"zonal-long-graph-step zonal-long-graph-step-1\"></div>\n                  <div class=\"zonal-long-graph-step zonal-long-graph-step-2\"></div>\n                  <div class=\"zonal-long-graph-step zonal-long-graph-step-3\"></div>\n                  <div class=\"zonal-long-graph-step zonal-long-graph-step-4\"></div>\n                </div>\n                <div class=\"zonal-long-graph-bars\">\n                  <div class=\"zonal-long-graph-bar-wrapper\">\n                    <div class=\"zonal-long-graph-bar zonal-long-graph-bar-ns-hubs\"></div>\n                  </div>\n                  <div class=\"zonal-long-graph-bar-wrapper\">\n                    <div class=\"zonal-long-graph-bar zonal-long-graph-bar-ns-fishandwildlife\"></div>\n                  </div>\n                  <div class=\"zonal-long-graph-bar-wrapper\">\n                    <div class=\"zonal-long-graph-bar zonal-long-graph-bar-ns-exposure\"></div>\n                  </div>\n                  <div class=\"zonal-long-graph-bar-wrapper\">\n                    <div class=\"zonal-long-graph-bar zonal-long-graph-bar-ns-asset\"></div>\n                  </div>\n                  <div class=\"zonal-long-graph-bar-wrapper\">\n                    <div class=\"zonal-long-graph-bar zonal-long-graph-bar-ns-threat\"></div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"zonal-long-graph-labels\">\n                <div class=\"zonal-long-graph-label zonal-long-graph-label-hubs\"><div class=\"zonal-long-graph-label-text\">Hubs</div></div>\n                <div class=\"zonal-long-graph-label zonal-long-graph-label-fishandwildlife\"><div class=\"zonal-long-graph-label-text\">Fish and Wildlife</div></div>\n                <div class=\"zonal-long-graph-label zonal-long-graph-label-exposure\"><div class=\"zonal-long-graph-label-text\">Exposure</div></div>\n                <div class=\"zonal-long-graph-label zonal-long-graph-label-asset\"><div class=\"zonal-long-graph-label-text\">Asset</div></div>\n                <div class=\"zonal-long-graph-label zonal-long-graph-label-threat\"><div class=\"zonal-long-graph-label-text\">Threat</div></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </span>\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/maplayers_list.html":
/*!*******************************************!*\
  !*** ./src/templates/maplayers_list.html ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "<div ref=\"maplayers_list\" id=\"maplayers_list\" class=\"h-100 maplayers_list py-3\">\n  <div id=\"hide-show-layerlist\" class=\"hide-show-layerlist p-2\">\n    <i class=\"fas fa-angle-left\"></i>\n    <i class=\"fas fa-angle-right d-none\"></i>\n  </div>\n\n<!-- <div class=\"collapse navbar-collapse\" id=\"mapListToggle\"> -->\n<div class=\"navbar-collapse pr-1\" id=\"mapListToggle\">\n  <div ref=\"ToggleLayers\" id=\"ToggleLayerList\" class=\"layer-toggles h-100 w-100\">\n    <button id=\"btn-basemap\" title=\"Change Base Map\" aria-label=\"Clear Map\" type=\"button\" class=\"btn-light btn-basemap\">\n      <span class=\"btn-icon btn-text-left w-100\">\n        <i class=\"fas fa-th-large icon-left\"></i>\n        <span class=\"btn-action\">Change the Base Map</span>\n        <span id=\"btn-basemap-label\" class=\"btn-label\">Dark Gray</span>\n      </span>\n    </button>\n\n    <div id=\"basemaplist\" class=\"list-group list-group-dark list-basemap closed\">\n      <span title=\"Close Base Map List\" aria-label=\"Close Base Map List\" id=\"basemap_list_close\" class=\"float-right text-right w-100 basemap_list_close d-none\">\n        <span class=\"choose-base-map\">Change the Base Map</span>\n        <i title=\"Close Base Map List\" aria-label=\"Close Base Map List\" class=\"fas fa-times\"></i>\n      </span>\n      <button title=\"Base Map Dark Gray\" aria-label=\"Base Map Dark Gray\" id=\"basemap-DarkGray\" type=\"button\" class=\"list-group-item list-group-item-action\">\n        <img src=\"" + __webpack_require__(/*! ../images/DGCanvasBase.png */ "./src/images/DGCanvasBase.png") + "\" alt=\"Base Map Dark Gray\" class=\"basemap-img\" />\n        <span class=\"list-label-name\">Dark Gray</span>\n      </button>\n      <button title=\"Base Map Imagery\" aria-label=\"Base Map Imagery\" id=\"basemap-Imagery\" type=\"button\" class=\"list-group-item list-group-item-action\">\n        <img src=\"" + __webpack_require__(/*! ../images/imagery.jpg */ "./src/images/imagery.jpg") + "\" alt=\"Base Map Imagery\" class=\"basemap-img\" />\n        <span class=\"list-label-name\">Imagery</span>\n      </button>\n      <button title=\"Base Map Topographic\" aria-label=\"Base Map Topographic\" id=\"basemap-Topographic\" type=\"button\" class=\"list-group-item list-group-item-action\">\n        <img src=\"" + __webpack_require__(/*! ../images/topo_map_2.jpg */ "./src/images/topo_map_2.jpg") + "\" alt=\"Base Map Topographic\" class=\"basemap-img\" />\n        <span class=\"list-label-name\">Topographic</span>\n      </button>\n      <button title=\"Base Map Streets\" aria-label=\"Base Map Dark Streets\" id=\"basemap-Streets\" type=\"button\" class=\"list-group-item list-group-item-action\">\n        <img src=\"" + __webpack_require__(/*! ../images/world_street_map.jpg */ "./src/images/world_street_map.jpg") + "\" alt=\"Base Map Streets\" class=\"basemap-img\" />\n        <span class=\"list-label-name\">Streets</span>\n      </button>\n    </div>\n\n    <!-- <button id=\"btn-zoomregion\" title=\"Change region\" aria-label=\"Clear Map\" type=\"button\" class=\"btn-light btn-basemap zoom-region\">\n    <span class=\"btn-icon btn-text-left w-100\">\n    <i class=\"fas fa-clone icon-left\"></i>\n    <span class=\"btn-action\">Select a Region</span>\n    <span id=\"btn-zoomregion-label\" class=\"btn-label\">Southeast U.S.</span>\n  </span>\n</button> -->\n\n<!-- <div id=\"zoomregionlist\" class=\"list-group list-group-dark list-zoomregion closed\">\n<span title=\"zoom to a region\" aria-label=\"zoom region South East U.S\" id=\"zoomregion_close\" class=\"float-right text-right w-100 zoomregion_list_close d-none\">\n<span class=\"choose-base-map align-self-center\">Southeast U.S</span>\n<i title=\"Close Zoom Region List\" aria-label=\"Close Zoom Region List\" class=\"fas fa-times\"></i>\n</span>\n<button title=\"Zoom to a region South East U.S\" aria-label=\"Zoom to a region South East U.S\" id=\"zoomregion-seus\" type=\"button\" class=\"list-group-item list-group-item-action\">\n<img src=\"" + __webpack_require__(/*! ../images/zoomregion-cus.png */ "./src/images/zoomregion-cus.png") + "\" alt=\"Zoom to a region South East U.S\" class=\"zoomregion-img  align-self-center\" />\n<span class=\"list-label-name align-self-center\">South East U.S</span>\n</button>\n</div> -->\n<div class=\"LayerList-spacer\" id=\"platform-spacer-1\"></div>\n\n<div id=\"platform-holder\" >\n\n  <div class=\"LayerList-Group platform-group\" id=\"LayerList-Group-Header\">\n    <div class=\"LayerInput-header platform py-2\" id=\"SatellitePlatform-Header\">Satellite Platform</div>\n  </div>\n\n  <div class=\"btn-group w-100 platform\" role=\"group\" aria-label=\"Satellite Platform\" title=\"Satellite Platform\">\n    <button type=\"button\" class=\"btn btn-secondary btn-platform selected\" id=\"btn-platform-landsat8\" value=\"landsat8\">Landsat 8</button>\n    <button type=\"button\" class=\"btn btn-secondary btn-platform \" id=\"btn-platform-sentinel2\" value=\"sentinel2\">Sentinel 2</button>\n    <!-- <button type=\"button\" class=\"btn btn-secondary btn-platform\" id=\"btn-platform-combined\">Combined</button>\n    <button type=\"button\" class=\"btn btn-secondary\">Right</button> -->\n  </div\n</div>\n\n<div class=\"LayerList-spacer\" id=\"platform-spacer-5\"></div>\n<div class=\"LayerList-spacer\" id=\"platform-spacer-5\"></div>\n\n<span class=\"brand-maplist-holder\">\n  <span class=\"navbar-brand nav-brand-maplayerlist py-2 w-100\" >Map Layers</span>\n</span>\n\n<span id=\"defaultLayerList\" >\n  <div class=\"LayerList-Group\" id=\"LayerList-Group-Header\">\n    <div class=\"LayerInput-header current-year py-2\" id=\"HubsLayers-Header\">Current Year to Date Landsat</div>\n\n    <div ref=\"LayerInput\" id=\"southeast_swir_current_threshold_landsat8-layerToggle\" class=\"custom-control custom-checkbox\">\n      <div class=\"layer-toggle-wrapper\">\n        <input title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_swir_current_threshold_landsat8-toggle\" type=\"checkbox\" class=\"custom-control-input\" id=\"southeast_swir_current_threshold_landsat8-toggle\">\n        <label title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_swir_current_threshold_landsat8-label\" class=\"custom-control-label\" for=\"southeast_swir_current_threshold_landsat8-toggle\" id=\"southeast_swir_current_threshold_landsat8-label\">SWIR Differencing (Threshold Change)</label>\n        <span title=\"\" aria-label=\"Show layer description\" class=\"float-right text-center layer-description-text\" data-trigger=\"focus hover\" data-toggle=\"popover\" data-placement=\"bottom\" role=\"button\" tabindex=\"-1\"  >\n          <i title=\"\" aria-label=\"Show layer description\" class=\"fas fa-info\"></i>\n        </span>\n        <span title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"float-right text-center layer-legend-toggler closed\">\n          <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa-th-list closed d-none\"></i>\n          <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa fa-th-list open\"></i>\n        </span>\n\n      </div>\n      <div class=\"layer-legend-wrapper closed\">\n        <div class=\"layer-legend\"></div>\n      </div>\n    </div>\n\n    <div ref=\"LayerInput\" id=\"southeast_swir_current_all_landsat8-layerToggle\" class=\"custom-control custom-checkbox\">\n      <div class=\"layer-toggle-wrapper\">\n        <input title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_swir_current_all_landsat8-toggle\" type=\"checkbox\" class=\"custom-control-input\" id=\"southeast_swir_current_all_landsat8-toggle\">\n        <label title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_swir_current_all_landsat8-label\" class=\"custom-control-label\" for=\"southeast_swir_current_all_landsat8-toggle\" id=\"southeast_swir_current_all_landsat8-label\">SWIR Differencing (All Change)</label>\n        <span title=\"\" aria-label=\"Show layer description\" class=\"float-right text-center layer-description-text\" data-trigger=\"focus hover\" data-toggle=\"popover\" data-placement=\"bottom\" role=\"button\" tabindex=\"-1\"  >\n          <i title=\"\" aria-label=\"Show layer description\" class=\"fas fa-info\"></i>\n        </span>\n        <span title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"float-right text-center layer-legend-toggler closed\">\n          <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa-th-list closed d-none\"></i>\n          <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa fa-th-list open\"></i>\n        </span>\n\n      </div>\n      <div class=\"layer-legend-wrapper closed\">\n        <div class=\"layer-legend\"></div>\n      </div>\n    </div>\n\n    <div ref=\"LayerInput\" id=\"southeast_ndvi_current_landsat8-layerToggle\" class=\"custom-control custom-checkbox\">\n      <div class=\"layer-toggle-wrapper\">\n        <input title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_ndvi_current_landsat8-toggle\" type=\"checkbox\" class=\"custom-control-input\" id=\"southeast_ndvi_current_landsat8-toggle\">\n        <label title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_ndvi_current_landsat8-label\" class=\"custom-control-label\" for=\"southeast_ndvi_current_landsat8-toggle\" id=\"southeast_ndvi_current_landsat8-label\">NDVI</label>\n        <span title=\"\" aria-label=\"Show layer description\" class=\"float-right text-center layer-description-text\" data-trigger=\"focus hover\" data-toggle=\"popover\" data-placement=\"bottom\" role=\"button\" tabindex=\"-1\"  >\n          <i title=\"\" aria-label=\"Show layer description\" class=\"fas fa-info\"></i>\n        </span>\n        <span title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"float-right text-center layer-legend-toggler closed\">\n          <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa-th-list closed d-none\"></i>\n          <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa fa-th-list open\"></i>\n        </span>\n\n      </div>\n      <div class=\"layer-legend-wrapper closed\">\n        <div class=\"layer-legend\"></div>\n      </div>\n    </div>\n\n    <div ref=\"LayerInput\" id=\"southeast_ndmi_current_landsat8-layerToggle\" class=\"custom-control custom-checkbox\">\n      <div class=\"layer-toggle-wrapper\">\n        <input title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_ndmi_current_landsat8-toggle\" type=\"checkbox\" class=\"custom-control-input\" id=\"southeast_ndmi_current_landsat8-toggle\">\n        <label title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_ndmi_current_landsat8-label\" class=\"custom-control-label\" for=\"southeast_ndmi_current_landsat8-toggle\" id=\"southeast_ndmi_current_landsat8-label\">NDMI</label>\n        <span title=\"\" aria-label=\"Show layer description\" class=\"float-right text-center layer-description-text\" data-trigger=\"focus hover\" data-toggle=\"popover\" data-placement=\"bottom\" role=\"button\" tabindex=\"-1\"  >\n          <i title=\"\" aria-label=\"Show layer description\" class=\"fas fa-info\"></i>\n        </span>\n        <span title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"float-right text-center layer-legend-toggler closed\">\n          <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa-th-list closed d-none\"></i>\n          <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa fa-th-list open\"></i>\n        </span>\n\n      </div>\n      <div class=\"layer-legend-wrapper closed\">\n        <div class=\"layer-legend\"></div>\n      </div>\n    </div>\n\n\n  </div>\n\n\n  <div class=\"LayerList-spacer\" id=\"AssetInputs-Header\"></div>\n\n  <div class=\"LayerList-Group inputs-collapser\" id=\"LayerList-Group-Header\">\n\n    <div class=\"LayerInput-header inputs-collapser-header\" id=\"AssetInputs-Header\" data-target=\"#CollapseOneYearArchive\" aria-expanded=\"true\" aria-controls=\"CollapseOneYearArchive\">\n      Last Year\n      <!-- <i class=\"fa fa-caret-up icon-right d-none\" aria-hidden=\"false\"></i>\n      <i class=\"fa fa-caret-down icon-right d-none\" aria-hidden=\"false\"></i> -->\n    </div>\n      <div class=\"collapse show\" id=\"CollapseOneYearArchive\">\n\n        <div class=\"inputs-layer-list\">\n\n          <div ref=\"LayerInput\" id=\"southeast_swir_current_threshold_1yr_landsat8-layerToggle\" class=\"custom-control custom-checkbox\">\n            <div class=\"layer-toggle-wrapper\">\n              <input title=\"Toggle southeast_swir_current_threshold_1yr_landsat8\" aria-label=\"Toggle southeast_swir_current_threshold_1yr_landsat8\" ref=\"southeast_swir_current_threshold_1yr_landsat8-toggle\" type=\"checkbox\" class=\"custom-control-input\" id=\"southeast_swir_current_threshold_1yr_landsat8-toggle\">\n              <label title=\"Toggle southeast_swir_current_threshold_1yr_landsat8\" aria-label=\"Toggle southeast_swir_current_threshold_1yr_landsat8\" ref=\"southeast_swir_current_threshold_1yr_landsat8-label\" class=\"custom-control-label\" for=\"southeast_swir_current_threshold_1yr_landsat8-toggle\" id=\"southeast_swir_current_threshold_1yr_landsat8-label\">SWIR Differencing (Threshold Change)</label>\n              <span title=\"\" aria-label=\"Show layer description\" class=\"float-right text-center layer-description-text\" data-trigger=\"focus hover\" data-toggle=\"popover\" data-placement=\"bottom\" role=\"button\" tabindex=\"-1\"  >\n                <i title=\"\" aria-label=\"Show layer description\" class=\"fas fa-info\"></i>\n              </span>\n              <span title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"float-right text-center layer-legend-toggler closed\">\n                <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa-th-list closed d-none\"></i>\n                <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa fa-th-list open\"></i>\n              </span>\n\n            </div>\n            <div class=\"layer-legend-wrapper closed\">\n              <div class=\"layer-legend\"></div>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </div>\n\n\n      </span>\n\n      <span id=\"sentinel2defaultLayerList\" class=\"d-none\" >\n        <div class=\"LayerList-Group\" id=\"LayerList-Group-Header\">\n          <div class=\"LayerInput-header current-year py-2\" id=\"HubsLayers-Header\">Current Year to Date Sentinel</div>\n\n          <div ref=\"LayerInput\" id=\"southeast_swir_current_threshold_sentinel2-layerToggle\" class=\"custom-control custom-checkbox\">\n            <div class=\"layer-toggle-wrapper\">\n              <input title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_swir_current_threshold_sentinel2-toggle\" type=\"checkbox\" class=\"custom-control-input\" id=\"southeast_swir_current_threshold_sentinel2-toggle\">\n              <label title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_swir_current_threshold_sentinel2-label\" class=\"custom-control-label\" for=\"southeast_swir_current_threshold_sentinel2-toggle\" id=\"southeast_swir_current_threshold_sentinel2-label\">SWIR Differencing (Threshold Change)</label>\n              <span title=\"\" aria-label=\"Show layer description\" class=\"float-right text-center layer-description-text\" data-trigger=\"focus hover\" data-toggle=\"popover\" data-placement=\"bottom\" role=\"button\" tabindex=\"-1\"  >\n                <i title=\"\" aria-label=\"Show layer description\" class=\"fas fa-info\"></i>\n              </span>\n              <span title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"float-right text-center layer-legend-toggler closed\">\n                <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa-th-list closed d-none\"></i>\n                <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa fa-th-list open\"></i>\n              </span>\n\n            </div>\n            <div class=\"layer-legend-wrapper closed\">\n              <div class=\"layer-legend\"></div>\n            </div>\n          </div>\n\n          <div ref=\"LayerInput\" id=\"southeast_swir_current_all_sentinel2-layerToggle\" class=\"custom-control custom-checkbox\">\n            <div class=\"layer-toggle-wrapper\">\n              <input title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_swir_current_all_sentinel2-toggle\" type=\"checkbox\" class=\"custom-control-input\" id=\"southeast_swir_current_all_sentinel2-toggle\">\n              <label title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_swir_current_all_sentinel2-label\" class=\"custom-control-label\" for=\"southeast_swir_current_all_sentinel2-toggle\" id=\"southeast_swir_current_all_sentinel2-label\">SWIR Differencing (All Change)</label>\n              <span title=\"\" aria-label=\"Show layer description\" class=\"float-right text-center layer-description-text\" data-trigger=\"focus hover\" data-toggle=\"popover\" data-placement=\"bottom\" role=\"button\" tabindex=\"-1\"  >\n                <i title=\"\" aria-label=\"Show layer description\" class=\"fas fa-info\"></i>\n              </span>\n              <span title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"float-right text-center layer-legend-toggler closed\">\n                <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa-th-list closed d-none\"></i>\n                <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa fa-th-list open\"></i>\n              </span>\n\n            </div>\n            <div class=\"layer-legend-wrapper closed\">\n              <div class=\"layer-legend\"></div>\n            </div>\n          </div>\n\n          <div ref=\"LayerInput\" id=\"southeast_ndvi_current_sentinel2-layerToggle\" class=\"custom-control custom-checkbox\">\n            <div class=\"layer-toggle-wrapper\">\n              <input title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_ndvi_current_sentinel2-toggle\" type=\"checkbox\" class=\"custom-control-input\" id=\"southeast_ndvi_current_sentinel2-toggle\">\n              <label title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_ndvi_current_sentinel2-label\" class=\"custom-control-label\" for=\"southeast_ndvi_current_sentinel2-toggle\" id=\"southeast_ndvi_current_sentinel2-label\">NDVI</label>\n              <span title=\"\" aria-label=\"Show layer description\" class=\"float-right text-center layer-description-text\" data-trigger=\"focus hover\" data-toggle=\"popover\" data-placement=\"bottom\" role=\"button\" tabindex=\"-1\"  >\n                <i title=\"\" aria-label=\"Show layer description\" class=\"fas fa-info\"></i>\n              </span>\n              <span title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"float-right text-center layer-legend-toggler closed\">\n                <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa-th-list closed d-none\"></i>\n                <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa fa-th-list open\"></i>\n              </span>\n\n            </div>\n            <div class=\"layer-legend-wrapper closed\">\n              <div class=\"layer-legend\"></div>\n            </div>\n          </div>\n\n          <div ref=\"LayerInput\" id=\"southeast_ndmi_current_sentinel2-layerToggle\" class=\"custom-control custom-checkbox\">\n            <div class=\"layer-toggle-wrapper\">\n              <input title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_ndmi_current_sentinel2-toggle\" type=\"checkbox\" class=\"custom-control-input\" id=\"southeast_ndmi_current_sentinel2-toggle\">\n              <label title=\"Toggle southeast-swir-currentMaskForForest\" aria-label=\"Toggle southeast-swir-currentMaskForForest\" ref=\"southeast_ndmi_current_sentinel2-label\" class=\"custom-control-label\" for=\"southeast_ndmi_current_sentinel2-toggle\" id=\"southeast_ndmi_current_sentinel2-label\">NDMI</label>\n              <span title=\"\" aria-label=\"Show layer description\" class=\"float-right text-center layer-description-text\" data-trigger=\"focus hover\" data-toggle=\"popover\" data-placement=\"bottom\" role=\"button\" tabindex=\"-1\"  >\n                <i title=\"\" aria-label=\"Show layer description\" class=\"fas fa-info\"></i>\n              </span>\n              <span title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"float-right text-center layer-legend-toggler closed\">\n                <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa-th-list closed d-none\"></i>\n                <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa fa-th-list open\"></i>\n              </span>\n\n            </div>\n            <div class=\"layer-legend-wrapper closed\">\n              <div class=\"layer-legend\"></div>\n            </div>\n          </div>\n\n\n        </div>\n\n\n        <div class=\"LayerList-spacer\" id=\"AssetInputs-Header\"></div>\n\n        <div class=\"LayerList-Group inputs-collapser\" id=\"LayerList-Group-Header\">\n\n          <div class=\"LayerInput-header inputs-collapser-header\" id=\"AssetInputs-Header\" data-target=\"#CollapseOneYearArchive\" aria-expanded=\"true\" aria-controls=\"CollapseOneYearArchive\">\n            Last Year\n            <!-- <i class=\"fa fa-caret-up icon-right d-none\" aria-hidden=\"false\"></i>\n            <i class=\"fa fa-caret-down icon-right d-none\" aria-hidden=\"false\"></i> -->\n          </div>\n            <div class=\"collapse show\" id=\"CollapseOneYearArchive\">\n\n              <div class=\"inputs-layer-list\">\n\n                <div ref=\"LayerInput\" id=\"southeast_swir_current_threshold_1yr_sentinel2-layerToggle\" class=\"custom-control custom-checkbox\">\n                  <div class=\"layer-toggle-wrapper\">\n                    <input title=\"Toggle southeast_swir_current_threshold_1yr_sentinel2\" aria-label=\"Toggle southeast_swir_current_threshold_1yr_sentinel2\" ref=\"southeast_swir_current_threshold_1yr_sentinel2-toggle\" type=\"checkbox\" class=\"custom-control-input\" id=\"southeast_swir_current_threshold_1yr_sentinel2-toggle\">\n                    <label title=\"Toggle southeast_swir_current_threshold_1yr_sentinel2\" aria-label=\"Toggle southeast_swir_current_threshold_1yr_sentinel2\" ref=\"southeast_swir_current_threshold_1yr_sentinel2-label\" class=\"custom-control-label\" for=\"southeast_swir_current_threshold_1yr_sentinel2-toggle\" id=\"southeast_swir_current_threshold_1yr_sentinel2-label\">SWIR Differencing (Threshold Change)</label>\n                    <span title=\"\" aria-label=\"Show layer description\" class=\"float-right text-center layer-description-text\" data-trigger=\"focus hover\" data-toggle=\"popover\" data-placement=\"bottom\" role=\"button\" tabindex=\"-1\"  >\n                      <i title=\"\" aria-label=\"Show layer description\" class=\"fas fa-info\"></i>\n                    </span>\n                    <span title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"float-right text-center layer-legend-toggler closed\">\n                      <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa-th-list closed d-none\"></i>\n                      <i title=\"View Legend\" aria-label=\"View Legend\" id=\"legend-hubs\" class=\"fa fa fa-th-list open\"></i>\n                    </span>\n\n                  </div>\n                  <div class=\"layer-legend-wrapper closed\">\n                    <div class=\"layer-legend\"></div>\n                  </div>\n                </div>\n\n              </div>\n            </div>\n          </div>\n\n\n      </span>\n\n    </div>\n    <!-- </nav> -->\n  </div>\n  <!-- </nav> -->\n</div>\n";

/***/ }),

/***/ "./src/templates/nav_bar.html":
/*!************************************!*\
  !*** ./src/templates/nav_bar.html ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nav class=\"navbar navbar-expand-lg navbar-dark main-navbar-toggle\">\n   <a class=\"navbar-brand\" href=\"#\">Southern Forest Area Change Tool (SouthFACT)</a>\n  <button class=\"navbar-toggler bnt-main-navbar-toggle\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mainNavToggle\" aria-controls=\"mainNavToggle\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n  <div class=\"collapse navbar-collapse\" id=\"mainNavToggle\">\n    <nav class=\"navbar-nav mr-auto mt-2 mt-lg-0\"  id=\"main-nav\" >\n    </nav>\n  </div>\n</nav>\n";

/***/ }),

/***/ "./src/templates/nav_bar_nav.html":
/*!****************************************!*\
  !*** ./src/templates/nav_bar_nav.html ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<a ref=\"main-nav-page\" id=\"main-nav-page\" class=\"nav-link main-nav\" href=\"\"></a>\n";

/***/ }),

/***/ "./src/templates/notfound.html":
/*!*************************************!*\
  !*** ./src/templates/notfound.html ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"container-fluid d-flex flex-column\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-12 align-self-center\">\n      <h1 class=\"not-found\">OOPS!</h1>\n      <div class=\"\">\n        <p class=\"not-found\">\n          We can't seem to find the page you are looking for.\n        </p>\n\n        <p class=\"not-found\">\n          Here are some links to try instead:\n        </p>\n\n        <div class=\"list-group not-found\">\n          <a ref=\"main_nav_index\" class=\"list-group-item list-group-item-action not-found\" href=\"./#Home\" data-navigo>Home</a>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n";

/***/ }),

/***/ "./src/templates/searchlocations.html":
/*!********************************************!*\
  !*** ./src/templates/searchlocations.html ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div ref=\"searchlocations_list\" id=\"searchlocations_list\" class=\"searchlocations_list\">\n  <div class=\"toggle-list h-100\">\n    <div class=\"flex-fill h-100\" >\n      <div class=\"sticky-top\">\n        <h5>Search Location</h5>\n        <hr />\n      </div>\n    </div>\n    <div class=\"LayerList-spacer\" id=\"searchlocationsdata\" ></div>\n    <div ref=\"searchlocationsdata\" id=\"searchlocationsdata\" class=\"text-left d-flex w-100 searchlocationsdata\">\n      <div title=\"Location\" aria-label=\"Location\" class=\"searchlocationsdata-content\" id=\"searchlocations-content\" >Location Unknown</div>\n    </div>\n    <div id=\"searchlocations-buttons\">\n        <button id=\"i-btn\" title=\"Map Information\" aria-label=\"Map Information\" type=\"button\" class=\"btn btn-sm btn-light i-btn\"><i class=\"fas fa-info\"></i></button>\n    </div>\n  </div>\n";

/***/ }),

/***/ "./src/templates/shareurl.html":
/*!*************************************!*\
  !*** ./src/templates/shareurl.html ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"shareurl-holder\" class=\"nothing\">\n  <input id=\"shareurltextarea\" title=\"copy share\" aria-label=\"share url\" class=\"form-control\" readonly=\"\">\n  <button id=\"btn-icon\" aria-label=\"copy share url\" title=\"copy share url\" class=\"btn-copy-share\">\n    <i class=\"fas fa-copy btn-copy-share-icon\"></i>\n    <span class=\"btn-med-label btn-copy-share-text\">Copy URL</span>\n  </button>\n  <button id=\"btn-icon\" aria-label=\"close copy share url\" title=\"close copy share url\" class=\"btn-close-share\">\n    <i class=\"fas fa-angle-double-left \"></i>\n  </button>\n</div>\n";

/***/ }),

/***/ 0:
/*!***************************************************!*\
  !*** multi babel-polyfill ./src/scripts/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! babel-polyfill */"./node_modules/babel-polyfill/lib/index.js");
module.exports = __webpack_require__(/*! /Users/dmichels/Documents/GitHub/southfact-map-v2/src/scripts/index.js */"./src/scripts/index.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,